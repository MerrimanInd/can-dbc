use byteorder::{ByteOrder, LE, BE};
use socketcan::CanMessageId;
use socketcan_tokio::bcm::CanBCMSocket;
use futures::Stream;
use std::convert::TryFrom;

#[allow(dead_code)]
 pub const MESSAGE_ID_DISP1: u32 = 2561212158;

#[allow(dead_code)]
 pub const MESSAGE_ID_DRC: u32 = 2566746366;

#[allow(dead_code)]
 pub const MESSAGE_ID_EC2: u32 = 2566750206;

#[allow(dead_code)]
 pub const MESSAGE_ID_EEC7: u32 = 2566755582;

#[allow(dead_code)]
 pub const MESSAGE_ID_EEC8: u32 = 2566746110;

#[allow(dead_code)]
 pub const MESSAGE_ID_EFL_P5: u32 = 2566752510;

#[allow(dead_code)]
 pub const MESSAGE_ID_EFL_P6: u32 = 2566752254;

#[allow(dead_code)]
 pub const MESSAGE_ID_EFL_P7: u32 = 2566751998;

#[allow(dead_code)]
 pub const MESSAGE_ID_EFL_P8: u32 = 2566751742;

#[allow(dead_code)]
 pub const MESSAGE_ID_EFL_P9: u32 = 2566751486;

#[allow(dead_code)]
 pub const MESSAGE_ID_EGRBV: u32 = 2499641854;

#[allow(dead_code)]
 pub const MESSAGE_ID_ESV1: u32 = 2566748158;

#[allow(dead_code)]
 pub const MESSAGE_ID_ESV2: u32 = 2566747902;

#[allow(dead_code)]
 pub const MESSAGE_ID_ESV3: u32 = 2566747646;

#[allow(dead_code)]
 pub const MESSAGE_ID_ESV4: u32 = 2566747390;

#[allow(dead_code)]
 pub const MESSAGE_ID_ESV5: u32 = 2566747134;

#[allow(dead_code)]
 pub const MESSAGE_ID_ESV6: u32 = 2566746878;

#[allow(dead_code)]
 pub const MESSAGE_ID_FLIC: u32 = 2561277694;

#[allow(dead_code)]
 pub const MESSAGE_ID_J2012: u32 = 2633861886;

#[allow(dead_code)]
 pub const MESSAGE_ID_PTC1: u32 = 2566749438;

#[allow(dead_code)]
 pub const MESSAGE_ID_SAS: u32 = 2565873150;

#[allow(dead_code)]
 pub const MESSAGE_ID_SCR1: u32 = 2566745854;

#[allow(dead_code)]
 pub const MESSAGE_ID_TCI: u32 = 2566751230;

#[allow(dead_code)]
 pub const MESSAGE_ID_TRF2: u32 = 2566755838;

#[allow(dead_code)]
 pub const MESSAGE_ID_VDS2: u32 = 2566752766;

#[allow(dead_code)]
 pub const MESSAGE_ID_LF: u32 = 2633938942;

#[allow(dead_code)]
 pub const MESSAGE_ID_LD: u32 = 2566799614;

#[allow(dead_code)]
 pub const MESSAGE_ID_LC: u32 = 2365473278;

#[allow(dead_code)]
 pub const MESSAGE_ID_LBC: u32 = 2365485822;

#[allow(dead_code)]
 pub const MESSAGE_ID_IT6: u32 = 2633926654;

#[allow(dead_code)]
 pub const MESSAGE_ID_IT5: u32 = 2633926398;

#[allow(dead_code)]
 pub const MESSAGE_ID_IT4: u32 = 2633926142;

#[allow(dead_code)]
 pub const MESSAGE_ID_IT3: u32 = 2633925886;

#[allow(dead_code)]
 pub const MESSAGE_ID_IT2: u32 = 2633925630;

#[allow(dead_code)]
 pub const MESSAGE_ID_IT1: u32 = 2633925374;

#[allow(dead_code)]
 pub const MESSAGE_ID_ISO3: u32 = 2633927422;

#[allow(dead_code)]
 pub const MESSAGE_ID_ISO2: u32 = 2633927166;

#[allow(dead_code)]
 pub const MESSAGE_ID_ISO1: u32 = 2633926910;

#[allow(dead_code)]
 pub const MESSAGE_ID_ISCS: u32 = 2566768894;

#[allow(dead_code)]
 pub const MESSAGE_ID_ISC: u32 = 2566769406;

#[allow(dead_code)]
 pub const MESSAGE_ID_IO: u32 = 2566839550;

#[allow(dead_code)]
 pub const MESSAGE_ID_IMT2: u32 = 2633934334;

#[allow(dead_code)]
 pub const MESSAGE_ID_IMT1: u32 = 2566825726;

#[allow(dead_code)]
 pub const MESSAGE_ID_IC2: u32 = 2566770942;

#[allow(dead_code)]
 pub const MESSAGE_ID_IC1: u32 = 2566846206;

#[allow(dead_code)]
 pub const MESSAGE_ID_HTR: u32 = 2566811134;

#[allow(dead_code)]
 pub const MESSAGE_ID_HRW: u32 = 2298375934;

#[allow(dead_code)]
 pub const MESSAGE_ID_HPG: u32 = 2565867774;

#[allow(dead_code)]
 pub const MESSAGE_ID_HOURS: u32 = 2566841854;

#[allow(dead_code)]
 pub const MESSAGE_ID_HBS: u32 = 2365449982;

#[allow(dead_code)]
 pub const MESSAGE_ID_GTFI: u32 = 2633939198;

#[allow(dead_code)]
 pub const MESSAGE_ID_GFP: u32 = 2633927678;

#[allow(dead_code)]
 pub const MESSAGE_ID_GFI2: u32 = 2633925118;

#[allow(dead_code)]
 pub const MESSAGE_ID_GFI1: u32 = 2633937662;

#[allow(dead_code)]
 pub const MESSAGE_ID_GFD: u32 = 2566804990;

#[allow(dead_code)]
 pub const MESSAGE_ID_GFC: u32 = 2633936894;

#[allow(dead_code)]
 pub const MESSAGE_ID_SEP2: u32 = 2566757630;

#[allow(dead_code)]
 pub const MESSAGE_ID_SEP1: u32 = 2566757886;

#[allow(dead_code)]
 pub const MESSAGE_ID_PTODE: u32 = 2566759678;

#[allow(dead_code)]
 pub const MESSAGE_ID_GFI3: u32 = 2432541438;

#[allow(dead_code)]
 pub const MESSAGE_ID_EFL_P4: u32 = 2566761214;

#[allow(dead_code)]
 pub const MESSAGE_ID_EEC6: u32 = 2432541694;

#[allow(dead_code)]
 pub const MESSAGE_ID_DC2: u32 = 2566759934;

#[allow(dead_code)]
 pub const MESSAGE_ID_CRI1: u32 = 2566757374;

#[allow(dead_code)]
 pub const MESSAGE_ID_AHI2: u32 = 2566756862;

#[allow(dead_code)]
 pub const MESSAGE_ID_AFC2: u32 = 2566758654;

#[allow(dead_code)]
 pub const MESSAGE_ID_AFC1: u32 = 2566758910;

#[allow(dead_code)]
 pub const MESSAGE_ID_AAC2: u32 = 2566758142;

#[allow(dead_code)]
 pub const MESSAGE_ID_AAC1: u32 = 2566758398;

#[allow(dead_code)]
 pub const MESSAGE_ID_AHI1: u32 = 2566756606;

#[allow(dead_code)]
 pub const MESSAGE_ID_RGAAQ: u32 = 2364546302;

#[allow(dead_code)]
 pub const MESSAGE_ID_TFAC: u32 = 2431654654;

#[allow(dead_code)]
 pub const MESSAGE_ID_KL3: u32 = 2364545534;

#[allow(dead_code)]
 pub const MESSAGE_ID_KL2: u32 = 2364545278;

#[allow(dead_code)]
 pub const MESSAGE_ID_KL1: u32 = 2364545022;

#[allow(dead_code)]
 pub const MESSAGE_ID_CCS: u32 = 2364544766;

#[allow(dead_code)]
 pub const MESSAGE_ID_RGTARP: u32 = 2364544510;

#[allow(dead_code)]
 pub const MESSAGE_ID_BI: u32 = 2364544254;

#[allow(dead_code)]
 pub const MESSAGE_ID_EBS11: u32 = 2349006590;

#[allow(dead_code)]
 pub const MESSAGE_ID_EBS12: u32 = 2566834686;

#[allow(dead_code)]
 pub const MESSAGE_ID_EBS21: u32 = 2550398718;

#[allow(dead_code)]
 pub const MESSAGE_ID_EBS22: u32 = 2566833406;

#[allow(dead_code)]
 pub const MESSAGE_ID_EBS23: u32 = 2365507326;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPM11: u32 = 2565013246;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPM12: u32 = 2566807038;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPM13: u32 = 2365480958;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPM14: u32 = 2566808062;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPM15: u32 = 2566808574;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPM16: u32 = 2566809086;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPM21: u32 = 2564947710;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPM22: u32 = 2566834430;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPM23: u32 = 2365481214;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPM24: u32 = 2566808318;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPM25: u32 = 2566808830;

#[allow(dead_code)]
 pub const MESSAGE_ID_ISO15765_FUNCT: u32 = 2564554494;

#[allow(dead_code)]
 pub const MESSAGE_ID_ISO15765_PHYS: u32 = 2564488958;

#[allow(dead_code)]
 pub const MESSAGE_ID_NETWORK: u32 = 2565734142;

#[allow(dead_code)]
 pub const MESSAGE_ID_RGE11: u32 = 2565144318;

#[allow(dead_code)]
 pub const MESSAGE_ID_RGE21: u32 = 2565209854;

#[allow(dead_code)]
 pub const MESSAGE_ID_RGE22: u32 = 2566806782;

#[allow(dead_code)]
 pub const MESSAGE_ID_RGE23: u32 = 2566807294;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM26: u32 = 2566764798;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM18: u32 = 2564095742;

#[allow(dead_code)]
 pub const MESSAGE_ID_XBR: u32 = 2349137662;

#[allow(dead_code)]
 pub const MESSAGE_ID_WFI: u32 = 2566848510;

#[allow(dead_code)]
 pub const MESSAGE_ID_VW: u32 = 2566843134;

#[allow(dead_code)]
 pub const MESSAGE_ID_VEP3: u32 = 2566804222;

#[allow(dead_code)]
 pub const MESSAGE_ID_VEP2: u32 = 2633928190;

#[allow(dead_code)]
 pub const MESSAGE_ID_VP: u32 = 2566845438;

#[allow(dead_code)]
 pub const MESSAGE_ID_VI: u32 = 2566843646;

#[allow(dead_code)]
 pub const MESSAGE_ID_VH: u32 = 2566842366;

#[allow(dead_code)]
 pub const MESSAGE_ID_VF: u32 = 2566809854;

#[allow(dead_code)]
 pub const MESSAGE_ID_VDS: u32 = 2566842622;

#[allow(dead_code)]
 pub const MESSAGE_ID_VDHR: u32 = 2566832638;

#[allow(dead_code)]
 pub const MESSAGE_ID_VDC2: u32 = 2565868030;

#[allow(dead_code)]
 pub const MESSAGE_ID_VDC1: u32 = 2566803454;

#[allow(dead_code)]
 pub const MESSAGE_ID_VD: u32 = 2566840574;

#[allow(dead_code)]
 pub const MESSAGE_ID_TVI: u32 = 2633938686;

#[allow(dead_code)]
 pub const MESSAGE_ID_TTI2: u32 = 2633937150;

#[allow(dead_code)]
 pub const MESSAGE_ID_TTI1: u32 = 2633938174;

#[allow(dead_code)]
 pub const MESSAGE_ID_TSI: u32 = 2633938430;

#[allow(dead_code)]
 pub const MESSAGE_ID_TSC1: u32 = 2348875518;

#[allow(dead_code)]
 pub const MESSAGE_ID_TR7: u32 = 2566766846;

#[allow(dead_code)]
 pub const MESSAGE_ID_TR6: u32 = 2566765310;

#[allow(dead_code)]
 pub const MESSAGE_ID_TR5: u32 = 2566765566;

#[allow(dead_code)]
 pub const MESSAGE_ID_TR4: u32 = 2566765822;

#[allow(dead_code)]
 pub const MESSAGE_ID_TR3: u32 = 2566766078;

#[allow(dead_code)]
 pub const MESSAGE_ID_TR2: u32 = 2566766590;

#[allow(dead_code)]
 pub const MESSAGE_ID_TR1: u32 = 2566766334;

#[allow(dead_code)]
 pub const MESSAGE_ID_TPRS: u32 = 2561605374;

#[allow(dead_code)]
 pub const MESSAGE_ID_TPRI: u32 = 2566765054;

#[allow(dead_code)]
 pub const MESSAGE_ID_TP3: u32 = 2633923326;

#[allow(dead_code)]
 pub const MESSAGE_ID_TP2: u32 = 2633923070;

#[allow(dead_code)]
 pub const MESSAGE_ID_TP1: u32 = 2633922814;

#[allow(dead_code)]
 pub const MESSAGE_ID_TIRE: u32 = 2566845694;

#[allow(dead_code)]
 pub const MESSAGE_ID_TI1: u32 = 2566805246;

#[allow(dead_code)]
 pub const MESSAGE_ID_TFI: u32 = 2633939966;

#[allow(dead_code)]
 pub const MESSAGE_ID_TDI: u32 = 2633939710;

#[allow(dead_code)]
 pub const MESSAGE_ID_TDA: u32 = 2564161278;

#[allow(dead_code)]
 pub const MESSAGE_ID_TD: u32 = 2566842110;

#[allow(dead_code)]
 pub const MESSAGE_ID_TCW: u32 = 2566821630;

#[allow(dead_code)]
 pub const MESSAGE_ID_TCO1: u32 = 2365484286;

#[allow(dead_code)]
 pub const MESSAGE_ID_TCI6: u32 = 2566771710;

#[allow(dead_code)]
 pub const MESSAGE_ID_TCI5: u32 = 2566821886;

#[allow(dead_code)]
 pub const MESSAGE_ID_TCI4: u32 = 2566822142;

#[allow(dead_code)]
 pub const MESSAGE_ID_TCI3: u32 = 2566822398;

#[allow(dead_code)]
 pub const MESSAGE_ID_TCI2: u32 = 2566822654;

#[allow(dead_code)]
 pub const MESSAGE_ID_TCI1: u32 = 2633931774;

#[allow(dead_code)]
 pub const MESSAGE_ID_TCFG2: u32 = 2566802430;

#[allow(dead_code)]
 pub const MESSAGE_ID_TCFG: u32 = 2566841086;

#[allow(dead_code)]
 pub const MESSAGE_ID_TC1: u32 = 2348941054;

#[allow(dead_code)]
 pub const MESSAGE_ID_TC: u32 = 2566839806;

#[allow(dead_code)]
 pub const MESSAGE_ID_TAVG: u32 = 2633911806;

#[allow(dead_code)]
 pub const MESSAGE_ID_SPR: u32 = 2566775550;

#[allow(dead_code)]
 pub const MESSAGE_ID_SP2: u32 = 2566819838;

#[allow(dead_code)]
 pub const MESSAGE_ID_SOFT: u32 = 2566839038;

#[allow(dead_code)]
 pub const MESSAGE_ID_SHUTDOW: u32 = 2566841598;

#[allow(dead_code)]
 pub const MESSAGE_ID_SERV: u32 = 2566832382;

#[allow(dead_code)]
 pub const MESSAGE_ID_S2: u32 = 2633928446;

#[allow(dead_code)]
 pub const MESSAGE_ID_RTC1: u32 = 2566804478;

#[allow(dead_code)]
 pub const MESSAGE_ID_RF: u32 = 2566847486;

#[allow(dead_code)]
 pub const MESSAGE_ID_RESET: u32 = 2631859966;

#[allow(dead_code)]
 pub const MESSAGE_ID_RC: u32 = 2566840830;

#[allow(dead_code)]
 pub const MESSAGE_ID_RBI: u32 = 2633930238;

#[allow(dead_code)]
 pub const MESSAGE_ID_PTO: u32 = 2566844670;

#[allow(dead_code)]
 pub const MESSAGE_ID_OWW: u32 = 2566770174;

#[allow(dead_code)]
 pub const MESSAGE_ID_OHECS: u32 = 2566769662;

#[allow(dead_code)]
 pub const MESSAGE_ID_OHCSS: u32 = 2566768638;

#[allow(dead_code)]
 pub const MESSAGE_ID_OEL: u32 = 2365443326;

#[allow(dead_code)]
 pub const MESSAGE_ID_MVS: u32 = 2566776318;

#[allow(dead_code)]
 pub const MESSAGE_ID_ML: u32 = 2566802686;

#[allow(dead_code)]
 pub const MESSAGE_ID_MCI: u32 = 2566774014;

#[allow(dead_code)]
 pub const MESSAGE_ID_MBT3: u32 = 2566823166;

#[allow(dead_code)]
 pub const MESSAGE_ID_MBT2: u32 = 2566823422;

#[allow(dead_code)]
 pub const MESSAGE_ID_MBT1: u32 = 2566823678;

#[allow(dead_code)]
 pub const MESSAGE_ID_LVDD: u32 = 2432595710;

#[allow(dead_code)]
 pub const MESSAGE_ID_LVD: u32 = 2365486590;

#[allow(dead_code)]
 pub const MESSAGE_ID_LTP: u32 = 2365485566;

#[allow(dead_code)]
 pub const MESSAGE_ID_LTFI: u32 = 2633939454;

#[allow(dead_code)]
 pub const MESSAGE_ID_LSP: u32 = 2365486334;

#[allow(dead_code)]
 pub const MESSAGE_ID_LOI: u32 = 2364542462;

#[allow(dead_code)]
 pub const MESSAGE_ID_LMP: u32 = 2365486078;

#[allow(dead_code)]
 pub const MESSAGE_ID_LFI: u32 = 2633937918;

#[allow(dead_code)]
 pub const MESSAGE_ID_LFE: u32 = 2566845182;

#[allow(dead_code)]
 pub const MESSAGE_ID_LFC: u32 = 2566842878;

#[allow(dead_code)]
 pub const MESSAGE_ID_FWD: u32 = 2633883646;

#[allow(dead_code)]
 pub const MESSAGE_ID_FMS: u32 = 2633880062;

#[allow(dead_code)]
 pub const MESSAGE_ID_FLI2: u32 = 2566806526;

#[allow(dead_code)]
 pub const MESSAGE_ID_FLI1: u32 = 2431649790;

#[allow(dead_code)]
 pub const MESSAGE_ID_FL: u32 = 2633929214;

#[allow(dead_code)]
 pub const MESSAGE_ID_FD: u32 = 2566831614;

#[allow(dead_code)]
 pub const MESSAGE_ID_ETH: u32 = 2566820094;

#[allow(dead_code)]
 pub const MESSAGE_ID_ETC8: u32 = 2364542206;

#[allow(dead_code)]
 pub const MESSAGE_ID_ETC7: u32 = 2566802174;

#[allow(dead_code)]
 pub const MESSAGE_ID_ETC6: u32 = 2633935870;

#[allow(dead_code)]
 pub const MESSAGE_ID_ETC5: u32 = 2633942014;

#[allow(dead_code)]
 pub const MESSAGE_ID_ETC4: u32 = 2633942526;

#[allow(dead_code)]
 pub const MESSAGE_ID_ETC3: u32 = 2633943038;

#[allow(dead_code)]
 pub const MESSAGE_ID_ETC2: u32 = 2565867006;

#[allow(dead_code)]
 pub const MESSAGE_ID_ETC1: u32 = 2364539646;

#[allow(dead_code)]
 pub const MESSAGE_ID_ET3: u32 = 2566810110;

#[allow(dead_code)]
 pub const MESSAGE_ID_ET2: u32 = 2566825214;

#[allow(dead_code)]
 pub const MESSAGE_ID_ET1: u32 = 2566844158;

#[allow(dead_code)]
 pub const MESSAGE_ID_ET: u32 = 2566785022;

#[allow(dead_code)]
 pub const MESSAGE_ID_ESC1: u32 = 2565868542;

#[allow(dead_code)]
 pub const MESSAGE_ID_ERC2: u32 = 2633941758;

#[allow(dead_code)]
 pub const MESSAGE_ID_ERC1: u32 = 2565865726;

#[allow(dead_code)]
 pub const MESSAGE_ID_EPT5: u32 = 2633932798;

#[allow(dead_code)]
 pub const MESSAGE_ID_EPT4: u32 = 2566824190;

#[allow(dead_code)]
 pub const MESSAGE_ID_EPT3: u32 = 2633933310;

#[allow(dead_code)]
 pub const MESSAGE_ID_EPT2: u32 = 2633933566;

#[allow(dead_code)]
 pub const MESSAGE_ID_EPT1: u32 = 2633933822;

#[allow(dead_code)]
 pub const MESSAGE_ID_EPD: u32 = 2566776062;

#[allow(dead_code)]
 pub const MESSAGE_ID_EP: u32 = 2566771454;

#[allow(dead_code)]
 pub const MESSAGE_ID_EOAC: u32 = 2566775806;

#[allow(dead_code)]
 pub const MESSAGE_ID_EO1: u32 = 2633935358;

#[allow(dead_code)]
 pub const MESSAGE_ID_EJM3: u32 = 2365447166;

#[allow(dead_code)]
 pub const MESSAGE_ID_EJM2: u32 = 2365446654;

#[allow(dead_code)]
 pub const MESSAGE_ID_EJM1: u32 = 2365446142;

#[allow(dead_code)]
 pub const MESSAGE_ID_EI: u32 = 2633929470;

#[allow(dead_code)]
 pub const MESSAGE_ID_EH: u32 = 2633937406;

#[allow(dead_code)]
 pub const MESSAGE_ID_EGF1: u32 = 2364541694;

#[allow(dead_code)]
 pub const MESSAGE_ID_EFS: u32 = 2566810366;

#[allow(dead_code)]
 pub const MESSAGE_ID_EFL_P3: u32 = 2566767102;

#[allow(dead_code)]
 pub const MESSAGE_ID_EFL_P2: u32 = 2566839294;

#[allow(dead_code)]
 pub const MESSAGE_ID_EFL_P1: u32 = 2566844414;

#[allow(dead_code)]
 pub const MESSAGE_ID_EES: u32 = 2633929726;

#[allow(dead_code)]
 pub const MESSAGE_ID_EEC5: u32 = 2566772222;

#[allow(dead_code)]
 pub const MESSAGE_ID_EEC4: u32 = 2633940734;

#[allow(dead_code)]
 pub const MESSAGE_ID_EEC3: u32 = 2566840318;

#[allow(dead_code)]
 pub const MESSAGE_ID_EEC2: u32 = 2364539902;

#[allow(dead_code)]
 pub const MESSAGE_ID_EEC1: u32 = 2364540158;

#[allow(dead_code)]
 pub const MESSAGE_ID_ECUID: u32 = 2566768126;

#[allow(dead_code)]
 pub const MESSAGE_ID_ECT1: u32 = 2566804734;

#[allow(dead_code)]
 pub const MESSAGE_ID_EC1: u32 = 2566841342;

#[allow(dead_code)]
 pub const MESSAGE_ID_EBC5: u32 = 2566767870;

#[allow(dead_code)]
 pub const MESSAGE_ID_EBC4: u32 = 2633936126;

#[allow(dead_code)]
 pub const MESSAGE_ID_EBC3: u32 = 2566827518;

#[allow(dead_code)]
 pub const MESSAGE_ID_EBC2: u32 = 2566832126;

#[allow(dead_code)]
 pub const MESSAGE_ID_EBC1: u32 = 2565865982;

#[allow(dead_code)]
 pub const MESSAGE_ID_EAC1: u32 = 2565867262;

#[allow(dead_code)]
 pub const MESSAGE_ID_EAC: u32 = 2566821118;

#[allow(dead_code)]
 pub const MESSAGE_ID_DI: u32 = 2566810622;

#[allow(dead_code)]
 pub const MESSAGE_ID_DD: u32 = 2566847742;

#[allow(dead_code)]
 pub const MESSAGE_ID_CSA: u32 = 2566768382;

#[allow(dead_code)]
 pub const MESSAGE_ID_CVW: u32 = 2566811902;

#[allow(dead_code)]
 pub const MESSAGE_ID_CTL: u32 = 2563768062;

#[allow(dead_code)]
 pub const MESSAGE_ID_CT6: u32 = 2633924862;

#[allow(dead_code)]
 pub const MESSAGE_ID_CT5: u32 = 2633924606;

#[allow(dead_code)]
 pub const MESSAGE_ID_CT4: u32 = 2633924350;

#[allow(dead_code)]
 pub const MESSAGE_ID_CT3: u32 = 2633924094;

#[allow(dead_code)]
 pub const MESSAGE_ID_CT2: u32 = 2633923838;

#[allow(dead_code)]
 pub const MESSAGE_ID_CT1: u32 = 2633923582;

#[allow(dead_code)]
 pub const MESSAGE_ID_CMI: u32 = 2633878014;

#[allow(dead_code)]
 pub const MESSAGE_ID_CM3: u32 = 2566771966;

#[allow(dead_code)]
 pub const MESSAGE_ID_CM1: u32 = 2564882174;

#[allow(dead_code)]
 pub const MESSAGE_ID_CL: u32 = 2563833598;

#[allow(dead_code)]
 pub const MESSAGE_ID_CI: u32 = 2566843390;

#[allow(dead_code)]
 pub const MESSAGE_ID_CCVS: u32 = 2566844926;

#[allow(dead_code)]
 pub const MESSAGE_ID_CCSS: u32 = 2566843902;

#[allow(dead_code)]
 pub const MESSAGE_ID_CCC: u32 = 2566809598;

#[allow(dead_code)]
 pub const MESSAGE_ID_CBI: u32 = 2633940222;

#[allow(dead_code)]
 pub const MESSAGE_ID_CACI: u32 = 2566775294;

#[allow(dead_code)]
 pub const MESSAGE_ID_BT1: u32 = 2566803710;

#[allow(dead_code)]
 pub const MESSAGE_ID_BM: u32 = 2566809342;

#[allow(dead_code)]
 pub const MESSAGE_ID_BJM3: u32 = 2365446910;

#[allow(dead_code)]
 pub const MESSAGE_ID_BJM2: u32 = 2365446398;

#[allow(dead_code)]
 pub const MESSAGE_ID_BJM1: u32 = 2365445886;

#[allow(dead_code)]
 pub const MESSAGE_ID_B: u32 = 2566847230;

#[allow(dead_code)]
 pub const MESSAGE_ID_AWPP: u32 = 2566848254;

#[allow(dead_code)]
 pub const MESSAGE_ID_ATS: u32 = 2631728894;

#[allow(dead_code)]
 pub const MESSAGE_ID_ATR: u32 = 2631794430;

#[allow(dead_code)]
 pub const MESSAGE_ID_AT: u32 = 2633934846;

#[allow(dead_code)]
 pub const MESSAGE_ID_ASC6: u32 = 2362572542;

#[allow(dead_code)]
 pub const MESSAGE_ID_ASC5: u32 = 2365478910;

#[allow(dead_code)]
 pub const MESSAGE_ID_ASC4: u32 = 2566805758;

#[allow(dead_code)]
 pub const MESSAGE_ID_ASC3: u32 = 2566806014;

#[allow(dead_code)]
 pub const MESSAGE_ID_ASC2: u32 = 2362638078;

#[allow(dead_code)]
 pub const MESSAGE_ID_ASC1: u32 = 2365479678;

#[allow(dead_code)]
 pub const MESSAGE_ID_AS: u32 = 2566837758;

#[allow(dead_code)]
 pub const MESSAGE_ID_AP: u32 = 2633922558;

#[allow(dead_code)]
 pub const MESSAGE_ID_AMB2: u32 = 2566775038;

#[allow(dead_code)]
 pub const MESSAGE_ID_WSMEM: u32 = 2633895166;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM8: u32 = 2566836478;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM7: u32 = 2565078782;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM6: u32 = 2566836222;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM5: u32 = 2566835966;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM4: u32 = 2566835710;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM3: u32 = 2566835454;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM25: u32 = 2566764542;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM24: u32 = 2566764286;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM23: u32 = 2555576062;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM22: u32 = 2562981630;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM21: u32 = 2562850558;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM20: u32 = 2562916094;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM2: u32 = 2566835198;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM19: u32 = 2564030206;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM17: u32 = 2564226814;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM16: u32 = 2564292350;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM15: u32 = 2564357886;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM14: u32 = 2564423422;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM13: u32 = 2564816638;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM12: u32 = 2566837502;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM11: u32 = 2566837246;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM10: u32 = 2566836990;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM1: u32 = 2566834942;

#[allow(dead_code)]
 pub const MESSAGE_ID_UTACR: u32 = 2566780926;

#[allow(dead_code)]
 pub const MESSAGE_ID_UTACP: u32 = 2566781182;

#[allow(dead_code)]
 pub const MESSAGE_ID_UTACE: u32 = 2566778366;

#[allow(dead_code)]
 pub const MESSAGE_ID_UPCACR: u32 = 2566778622;

#[allow(dead_code)]
 pub const MESSAGE_ID_UPCACP: u32 = 2566778878;

#[allow(dead_code)]
 pub const MESSAGE_ID_UPCAC: u32 = 2566779134;

#[allow(dead_code)]
 pub const MESSAGE_ID_UPBACR: u32 = 2566779390;

#[allow(dead_code)]
 pub const MESSAGE_ID_UPBACP: u32 = 2566779646;

#[allow(dead_code)]
 pub const MESSAGE_ID_UPBAC: u32 = 2566779902;

#[allow(dead_code)]
 pub const MESSAGE_ID_UPACCR: u32 = 2566780158;

#[allow(dead_code)]
 pub const MESSAGE_ID_UPAACP: u32 = 2566780414;

#[allow(dead_code)]
 pub const MESSAGE_ID_UPAAC: u32 = 2566780670;

#[allow(dead_code)]
 pub const MESSAGE_ID_UAAC: u32 = 2566781438;

#[allow(dead_code)]
 pub const MESSAGE_ID_GTACR: u32 = 2566784254;

#[allow(dead_code)]
 pub const MESSAGE_ID_GTACP: u32 = 2566784510;

#[allow(dead_code)]
 pub const MESSAGE_ID_GTACE: u32 = 2566781694;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPCACR: u32 = 2566781950;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPCACP: u32 = 2566782206;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPCAC: u32 = 2566782462;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPBACRP: u32 = 2566782718;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPBACP: u32 = 2566782974;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPBAC: u32 = 2566783230;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPAACR: u32 = 2566783486;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPAACP: u32 = 2566783742;

#[allow(dead_code)]
 pub const MESSAGE_ID_GPAAC: u32 = 2566783998;

#[allow(dead_code)]
 pub const MESSAGE_ID_GAAC: u32 = 2566784766;

#[allow(dead_code)]
 pub const MESSAGE_ID_BUSC: u32 = 2566776830;

#[allow(dead_code)]
 pub const MESSAGE_ID_BPCAC: u32 = 2566777342;

#[allow(dead_code)]
 pub const MESSAGE_ID_BPBAC: u32 = 2566777598;

#[allow(dead_code)]
 pub const MESSAGE_ID_BPAAC: u32 = 2566777854;

#[allow(dead_code)]
 pub const MESSAGE_ID_BGSC: u32 = 2566777086;

#[allow(dead_code)]
 pub const MESSAGE_ID_BAAC: u32 = 2566778110;

#[allow(dead_code)]
 pub const MESSAGE_ID_WSMSTR: u32 = 2633895422;

#[allow(dead_code)]
 pub const MESSAGE_ID_CA: u32 = 2566838526;

#[allow(dead_code)]
 pub const MESSAGE_ID_ACL: u32 = 2565799678;

#[allow(dead_code)]
 pub const MESSAGE_ID_XFER: u32 = 2563440382;

#[allow(dead_code)]
 pub const MESSAGE_ID_TPDT: u32 = 2565603070;

#[allow(dead_code)]
 pub const MESSAGE_ID_TPCM: u32 = 2565668606;

#[allow(dead_code)]
 pub const MESSAGE_ID_RQST2: u32 = 2563374846;

#[allow(dead_code)]
 pub const MESSAGE_ID_RQST: u32 = 2565537534;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM29: u32 = 2560556798;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM28: u32 = 2566750462;

#[allow(dead_code)]
 pub const MESSAGE_ID_DM27: u32 = 2566750974;

#[allow(dead_code)]
 pub const MESSAGE_ID_ATI2: u32 = 2566748414;

#[allow(dead_code)]
 pub const MESSAGE_ID_ATI1: u32 = 2566748670;

#[allow(dead_code)]
 pub const MESSAGE_ID_AAC3: u32 = 2566745598;

#[allow(dead_code)]
 pub const MESSAGE_ID_AAC4: u32 = 2566745342;

#[allow(dead_code)]
 pub const MESSAGE_ID_AETC: u32 = 2566754558;

#[allow(dead_code)]
 pub const MESSAGE_ID_AFSS: u32 = 2566749950;

#[allow(dead_code)]
 pub const MESSAGE_ID_AT1I1: u32 = 2565869310;

#[allow(dead_code)]
 pub const MESSAGE_ID_AT1I2: u32 = 2566763774;

#[allow(dead_code)]
 pub const MESSAGE_ID_AT1O1: u32 = 2565869566;

#[allow(dead_code)]
 pub const MESSAGE_ID_AT1O2: u32 = 2566763518;

#[allow(dead_code)]
 pub const MESSAGE_ID_AT2I1: u32 = 2565869822;

#[allow(dead_code)]
 pub const MESSAGE_ID_AT2I2: u32 = 2566763006;

#[allow(dead_code)]
 pub const MESSAGE_ID_AT2O1: u32 = 2565870078;

#[allow(dead_code)]
 pub const MESSAGE_ID_AT2O2: u32 = 2566762750;

#[allow(dead_code)]
 pub const MESSAGE_ID_ATGP1: u32 = 2566753534;

#[allow(dead_code)]
 pub const MESSAGE_ID_ATGP2: u32 = 2566753278;

#[allow(dead_code)]
 pub const MESSAGE_ID_ATM2: u32 = 2566762494;

#[allow(dead_code)]
 pub const MESSAGE_ID_ATS1: u32 = 2566749182;

#[allow(dead_code)]
 pub const MESSAGE_ID_ATS2: u32 = 2566748926;

#[allow(dead_code)]
 pub const MESSAGE_ID_AUXIO1: u32 = 2566838782;

#[allow(dead_code)]
 pub const MESSAGE_ID_AUXIO2: u32 = 2561146622;

#[allow(dead_code)]
 pub const MESSAGE_ID_AUXIO3: u32 = 2561081086;

#[allow(dead_code)]
 pub const MESSAGE_ID_AUXIO4: u32 = 2561015550;

#[allow(dead_code)]
 pub const MESSAGE_ID_BSA: u32 = 2566746622;

#[allow(dead_code)]
 pub const MESSAGE_ID_AMB: u32 = 2566845950;

#[allow(dead_code)]
 pub const MESSAGE_ID_AIR2: u32 = 2566840062;

#[allow(dead_code)]
 pub const MESSAGE_ID_AIR1: u32 = 2566827774;

#[allow(dead_code)]
 pub const MESSAGE_ID_AI: u32 = 2566846974;

#[allow(dead_code)]
 pub const MESSAGE_ID_AF2: u32 = 2633935614;

#[allow(dead_code)]
 pub const MESSAGE_ID_ACC2: u32 = 2566803966;

#[allow(dead_code)]
 pub const MESSAGE_ID_ACC1: u32 = 2432593918;

#[allow(dead_code)]
 pub const MESSAGE_ID_AC: u32 = 2633935102;

#[allow(dead_code)]
 pub const MESSAGE_ID_AAI: u32 = 2633927934;

#[allow(dead_code)]
 pub const MESSAGE_ID_A1: u32 = 2566847998;

#[allow(dead_code)]
 pub const MESSAGE_ID_ACKM: u32 = 2565406462;

#[allow(dead_code)]
 pub const MESSAGE_ID_ATM1: u32 = 2566763262;

#[allow(dead_code)]
 pub const MESSAGE_ID_DC1: u32 = 2566803198;

#[allow(dead_code)]
 pub const MESSAGE_ID_FWSS1: u32 = 2565870334;

#[allow(dead_code)]
 pub const MESSAGE_ID_FWSS2: u32 = 2566762238;

#[allow(dead_code)]
 pub const MESSAGE_ID_SSI: u32 = 2364543998;

#[allow(dead_code)]
 pub const MESSAGE_ID_TRF1: u32 = 2566846718;

#[allow(dead_code)]
 pub const MESSAGE_ID_VEP1: u32 = 2566846462;

#[allow(dead_code)]
 pub const MESSAGE_ID_WCM2: u32 = 2566760702;

#[allow(dead_code)]
 pub const MESSAGE_ID_WCM1: u32 = 2566760958;

#[allow(dead_code)]
 pub const MESSAGE_ID_VROM: u32 = 2633869310;

#[allow(dead_code)]
 pub const MESSAGE_ID_VREP: u32 = 2365433598;

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TextDisplayInstructions2561212158 {
    HldDsplyPrsntlyDsplydInfrmtnShl,
    ClrDsplyDsplydInfrmtnShldBDltdN,
    X1110reserved,
    OvrwrtSbstrngAPrtnOfPrsntlyDspl,
    OvrwrtDsplyPrsntlyDsplydInfrmtn,
    AppndAtEndOfDsplyTrnsmttdInfrmt,
    XValue(u64),
}

impl From<u64> for TextDisplayInstructions2561212158 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TextDisplayInstructions2561212158::HldDsplyPrsntlyDsplydInfrmtnShl,
            0 => TextDisplayInstructions2561212158::ClrDsplyDsplydInfrmtnShldBDltdN,
            5 => TextDisplayInstructions2561212158::X1110reserved,
            4 => TextDisplayInstructions2561212158::OvrwrtSbstrngAPrtnOfPrsntlyDspl,
            3 => TextDisplayInstructions2561212158::OvrwrtDsplyPrsntlyDsplydInfrmtn,
            2 => TextDisplayInstructions2561212158::AppndAtEndOfDsplyTrnsmttdInfrmt,
            value => TextDisplayInstructions2561212158::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MovementStatusOfRamp32566746366 {
    NotAvailable,
    Error,
    RampBeingMoved,
    RampNotBeingMoved,
    XValue(u64),
}

impl From<u64> for MovementStatusOfRamp32566746366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => MovementStatusOfRamp32566746366::NotAvailable,
            2 => MovementStatusOfRamp32566746366::Error,
            1 => MovementStatusOfRamp32566746366::RampBeingMoved,
            0 => MovementStatusOfRamp32566746366::RampNotBeingMoved,
            value => MovementStatusOfRamp32566746366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableStatusOfRamp32566746366 {
    NotAvailable,
    Error,
    RampEnabled,
    RampDisabled,
    XValue(u64),
}

impl From<u64> for EnableStatusOfRamp32566746366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableStatusOfRamp32566746366::NotAvailable,
            2 => EnableStatusOfRamp32566746366::Error,
            1 => EnableStatusOfRamp32566746366::RampEnabled,
            0 => EnableStatusOfRamp32566746366::RampDisabled,
            value => EnableStatusOfRamp32566746366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RetractStatusOfRamp32566746366 {
    NotAvailable,
    Error,
    RampEx,
    RampRetracted,
    XValue(u64),
}

impl From<u64> for RetractStatusOfRamp32566746366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RetractStatusOfRamp32566746366::NotAvailable,
            2 => RetractStatusOfRamp32566746366::Error,
            1 => RetractStatusOfRamp32566746366::RampEx,
            0 => RetractStatusOfRamp32566746366::RampRetracted,
            value => RetractStatusOfRamp32566746366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MovementStatusOfRamp22566746366 {
    NotAvailable,
    Error,
    RampBeingMoved,
    RampNotBeingMoved,
    XValue(u64),
}

impl From<u64> for MovementStatusOfRamp22566746366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => MovementStatusOfRamp22566746366::NotAvailable,
            2 => MovementStatusOfRamp22566746366::Error,
            1 => MovementStatusOfRamp22566746366::RampBeingMoved,
            0 => MovementStatusOfRamp22566746366::RampNotBeingMoved,
            value => MovementStatusOfRamp22566746366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableStatusOfRamp22566746366 {
    NotAvailable,
    Error,
    RampEnabled,
    RampDisabled,
    XValue(u64),
}

impl From<u64> for EnableStatusOfRamp22566746366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableStatusOfRamp22566746366::NotAvailable,
            2 => EnableStatusOfRamp22566746366::Error,
            1 => EnableStatusOfRamp22566746366::RampEnabled,
            0 => EnableStatusOfRamp22566746366::RampDisabled,
            value => EnableStatusOfRamp22566746366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RetractStatusOfRamp22566746366 {
    NotAvailable,
    Error,
    RampEx,
    RampRetracted,
    XValue(u64),
}

impl From<u64> for RetractStatusOfRamp22566746366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RetractStatusOfRamp22566746366::NotAvailable,
            2 => RetractStatusOfRamp22566746366::Error,
            1 => RetractStatusOfRamp22566746366::RampEx,
            0 => RetractStatusOfRamp22566746366::RampRetracted,
            value => RetractStatusOfRamp22566746366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MovementStatusOfRamp12566746366 {
    NotAvailable,
    Error,
    RampBeingMoved,
    RampNotBeingMoved,
    XValue(u64),
}

impl From<u64> for MovementStatusOfRamp12566746366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => MovementStatusOfRamp12566746366::NotAvailable,
            2 => MovementStatusOfRamp12566746366::Error,
            1 => MovementStatusOfRamp12566746366::RampBeingMoved,
            0 => MovementStatusOfRamp12566746366::RampNotBeingMoved,
            value => MovementStatusOfRamp12566746366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableStatusOfRamp12566746366 {
    NotAvailable,
    Error,
    RampEnabled,
    RampDisabled,
    XValue(u64),
}

impl From<u64> for EnableStatusOfRamp12566746366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableStatusOfRamp12566746366::NotAvailable,
            2 => EnableStatusOfRamp12566746366::Error,
            1 => EnableStatusOfRamp12566746366::RampEnabled,
            0 => EnableStatusOfRamp12566746366::RampDisabled,
            value => EnableStatusOfRamp12566746366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RetractStatusOfRamp12566746366 {
    NotAvailable,
    Error,
    RampEx,
    RampRetracted,
    XValue(u64),
}

impl From<u64> for RetractStatusOfRamp12566746366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RetractStatusOfRamp12566746366::NotAvailable,
            2 => RetractStatusOfRamp12566746366::Error,
            1 => RetractStatusOfRamp12566746366::RampEx,
            0 => RetractStatusOfRamp12566746366::RampRetracted,
            value => RetractStatusOfRamp12566746366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LaneDepartureWarningEnableCmd2561277694 {
    DonTCare,
    Reserved,
    EnableLaneDepartureWarning,
    DisableLaneDepartureWarning,
    XValue(u64),
}

impl From<u64> for LaneDepartureWarningEnableCmd2561277694 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LaneDepartureWarningEnableCmd2561277694::DonTCare,
            2 => LaneDepartureWarningEnableCmd2561277694::Reserved,
            1 => LaneDepartureWarningEnableCmd2561277694::EnableLaneDepartureWarning,
            0 => LaneDepartureWarningEnableCmd2561277694::DisableLaneDepartureWarning,
            value => LaneDepartureWarningEnableCmd2561277694::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum J2012dtcStatus2633861886 {
    DtcIsActive,
    DtcIsPreviouslyActive,
    XValue(u64),
}

impl From<u64> for J2012dtcStatus2633861886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => J2012dtcStatus2633861886::DtcIsActive,
            0 => J2012dtcStatus2633861886::DtcIsPreviouslyActive,
            value => J2012dtcStatus2633861886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtVhclS2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u64),
}

impl From<u64> for PrtcltTrpActvRgnrtnInhbtdDtVhclS2566749438 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PrtcltTrpActvRgnrtnInhbtdDtVhclS2566749438::NotAvailable,
            2 => PrtcltTrpActvRgnrtnInhbtdDtVhclS2566749438::ReservedForSaeAssignment,
            1 => PrtcltTrpActvRgnrtnInhbtdDtVhclS2566749438::Inhibited,
            0 => PrtcltTrpActvRgnrtnInhbtdDtVhclS2566749438::NotInhibited,
            value => PrtcltTrpActvRgnrtnInhbtdDtVhclS2566749438::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtOtOfN2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u64),
}

impl From<u64> for PrtcltTrpActvRgnrtnInhbtdDtOtOfN2566749438 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PrtcltTrpActvRgnrtnInhbtdDtOtOfN2566749438::NotAvailable,
            2 => PrtcltTrpActvRgnrtnInhbtdDtOtOfN2566749438::ReservedForSaeAssignment,
            1 => PrtcltTrpActvRgnrtnInhbtdDtOtOfN2566749438::Inhibited,
            0 => PrtcltTrpActvRgnrtnInhbtdDtOtOfN2566749438::NotInhibited,
            value => PrtcltTrpActvRgnrtnInhbtdDtOtOfN2566749438::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtAcclP2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u64),
}

impl From<u64> for PrtcltTrpActvRgnrtnInhbtdDtAcclP2566749438 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PrtcltTrpActvRgnrtnInhbtdDtAcclP2566749438::NotAvailable,
            2 => PrtcltTrpActvRgnrtnInhbtdDtAcclP2566749438::ReservedForSaeAssignment,
            1 => PrtcltTrpActvRgnrtnInhbtdDtAcclP2566749438::Inhibited,
            0 => PrtcltTrpActvRgnrtnInhbtdDtAcclP2566749438::NotInhibited,
            value => PrtcltTrpActvRgnrtnInhbtdDtAcclP2566749438::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtptoAc2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u64),
}

impl From<u64> for PrtcltTrpActvRgnrtnInhbtdDtptoAc2566749438 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PrtcltTrpActvRgnrtnInhbtdDtptoAc2566749438::NotAvailable,
            2 => PrtcltTrpActvRgnrtnInhbtdDtptoAc2566749438::ReservedForSaeAssignment,
            1 => PrtcltTrpActvRgnrtnInhbtdDtptoAc2566749438::Inhibited,
            0 => PrtcltTrpActvRgnrtnInhbtdDtptoAc2566749438::NotInhibited,
            value => PrtcltTrpActvRgnrtnInhbtdDtptoAc2566749438::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtSrvcB2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u64),
}

impl From<u64> for PrtcltTrpActvRgnrtnInhbtdDtSrvcB2566749438 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PrtcltTrpActvRgnrtnInhbtdDtSrvcB2566749438::NotAvailable,
            2 => PrtcltTrpActvRgnrtnInhbtdDtSrvcB2566749438::ReservedForSaeAssignment,
            1 => PrtcltTrpActvRgnrtnInhbtdDtSrvcB2566749438::Inhibited,
            0 => PrtcltTrpActvRgnrtnInhbtdDtSrvcB2566749438::NotInhibited,
            value => PrtcltTrpActvRgnrtnInhbtdDtSrvcB2566749438::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtCltch2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u64),
}

impl From<u64> for PrtcltTrpActvRgnrtnInhbtdDtCltch2566749438 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PrtcltTrpActvRgnrtnInhbtdDtCltch2566749438::NotAvailable,
            2 => PrtcltTrpActvRgnrtnInhbtdDtCltch2566749438::ReservedForSaeAssignment,
            1 => PrtcltTrpActvRgnrtnInhbtdDtCltch2566749438::Inhibited,
            0 => PrtcltTrpActvRgnrtnInhbtdDtCltch2566749438::NotInhibited,
            value => PrtcltTrpActvRgnrtnInhbtdDtCltch2566749438::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdDtInhbt2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u64),
}

impl From<u64> for PrtcltTrpActvRgnrtnInhbtdDtInhbt2566749438 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PrtcltTrpActvRgnrtnInhbtdDtInhbt2566749438::NotAvailable,
            2 => PrtcltTrpActvRgnrtnInhbtdDtInhbt2566749438::ReservedForSaeAssignment,
            1 => PrtcltTrpActvRgnrtnInhbtdDtInhbt2566749438::Inhibited,
            0 => PrtcltTrpActvRgnrtnInhbtdDtInhbt2566749438::NotInhibited,
            value => PrtcltTrpActvRgnrtnInhbtdDtInhbt2566749438::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PrtcltTrpActvRgnrtnInhbtdStatus2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Inhibited,
    NotInhibited,
    XValue(u64),
}

impl From<u64> for PrtcltTrpActvRgnrtnInhbtdStatus2566749438 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PrtcltTrpActvRgnrtnInhbtdStatus2566749438::NotAvailable,
            2 => PrtcltTrpActvRgnrtnInhbtdStatus2566749438::ReservedForSaeAssignment,
            1 => PrtcltTrpActvRgnrtnInhbtdStatus2566749438::Inhibited,
            0 => PrtcltTrpActvRgnrtnInhbtdStatus2566749438::NotInhibited,
            value => PrtcltTrpActvRgnrtnInhbtdStatus2566749438::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ParticulateTrapStatus2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    RegenerationNeededHighestLevel,
    RegenerationNeededModerateLevel,
    RegenerationNeededLowestLevel,
    RegenerationNotNeeded,
    XValue(u64),
}

impl From<u64> for ParticulateTrapStatus2566749438 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => ParticulateTrapStatus2566749438::NotAvailable,
            6 => ParticulateTrapStatus2566749438::ReservedForSaeAssignment,
            3 => ParticulateTrapStatus2566749438::RegenerationNeededHighestLevel,
            2 => ParticulateTrapStatus2566749438::RegenerationNeededModerateLevel,
            1 => ParticulateTrapStatus2566749438::RegenerationNeededLowestLevel,
            0 => ParticulateTrapStatus2566749438::RegenerationNotNeeded,
            value => ParticulateTrapStatus2566749438::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PrtcltTrpActvRegenerationStatus2566749438 {
    NotAvailable,
    RgnrtnNddAtmtcllyInttdActvRgnrt,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for PrtcltTrpActvRegenerationStatus2566749438 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PrtcltTrpActvRegenerationStatus2566749438::NotAvailable,
            2 => PrtcltTrpActvRegenerationStatus2566749438::RgnrtnNddAtmtcllyInttdActvRgnrt,
            1 => PrtcltTrpActvRegenerationStatus2566749438::Active,
            0 => PrtcltTrpActvRegenerationStatus2566749438::NotActive,
            value => PrtcltTrpActvRegenerationStatus2566749438::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PrtcltTrpPssvRegenerationStatus2566749438 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for PrtcltTrpPssvRegenerationStatus2566749438 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PrtcltTrpPssvRegenerationStatus2566749438::NotAvailable,
            2 => PrtcltTrpPssvRegenerationStatus2566749438::ReservedForSaeAssignment,
            1 => PrtcltTrpPssvRegenerationStatus2566749438::Active,
            0 => PrtcltTrpPssvRegenerationStatus2566749438::NotActive,
            value => PrtcltTrpPssvRegenerationStatus2566749438::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ParticulateTrapLampCmd2566749438 {
    NotAvailable,
    OnFastBlink,
    ReservedForSaeAssignment,
    OnSolid,
    Off,
    XValue(u64),
}

impl From<u64> for ParticulateTrapLampCmd2566749438 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => ParticulateTrapLampCmd2566749438::NotAvailable,
            4 => ParticulateTrapLampCmd2566749438::OnFastBlink,
            6 => ParticulateTrapLampCmd2566749438::ReservedForSaeAssignment,
            1 => ParticulateTrapLampCmd2566749438::OnSolid,
            0 => ParticulateTrapLampCmd2566749438::Off,
            value => ParticulateTrapLampCmd2566749438::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SteerAngleSensorCalibrated2565873150 {
    NotAvailable,
    Reserved,
    SasCalibrated,
    SasNotCalibrated,
    XValue(u64),
}

impl From<u64> for SteerAngleSensorCalibrated2565873150 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SteerAngleSensorCalibrated2565873150::NotAvailable,
            2 => SteerAngleSensorCalibrated2565873150::Reserved,
            1 => SteerAngleSensorCalibrated2565873150::SasCalibrated,
            0 => SteerAngleSensorCalibrated2565873150::SasNotCalibrated,
            value => SteerAngleSensorCalibrated2565873150::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SteerAngleSensorActiveMode2565873150 {
    NotAvailable,
    Reserved,
    NormalModeActive,
    ProgrammingModeActive,
    XValue(u64),
}

impl From<u64> for SteerAngleSensorActiveMode2565873150 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SteerAngleSensorActiveMode2565873150::NotAvailable,
            2 => SteerAngleSensorActiveMode2565873150::Reserved,
            1 => SteerAngleSensorActiveMode2565873150::NormalModeActive,
            0 => SteerAngleSensorActiveMode2565873150::ProgrammingModeActive,
            value => SteerAngleSensorActiveMode2565873150::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SteerWheelAngleRangeCounterType2565873150 {
    SignalNotAvailable,
    NotDefined,
    AbsNumberOfCounts,
    RelativeNumberOfCounts,
    XValue(u64),
}

impl From<u64> for SteerWheelAngleRangeCounterType2565873150 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SteerWheelAngleRangeCounterType2565873150::SignalNotAvailable,
            2 => SteerWheelAngleRangeCounterType2565873150::NotDefined,
            1 => SteerWheelAngleRangeCounterType2565873150::AbsNumberOfCounts,
            0 => SteerWheelAngleRangeCounterType2565873150::RelativeNumberOfCounts,
            value => SteerWheelAngleRangeCounterType2565873150::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransferCaseStatus2566751230 {
    Error,
    TrnsfrCsShftInPrgrssGrNtCnfrmed,
    WheelLow,
    Neutral,
    WheelHigh,
    XValue(u64),
}

impl From<u64> for TransferCaseStatus2566751230 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            6 => TransferCaseStatus2566751230::Error,
            5 => TransferCaseStatus2566751230::TrnsfrCsShftInPrgrssGrNtCnfrmed,
            4 => TransferCaseStatus2566751230::WheelLow,
            2 => TransferCaseStatus2566751230::Neutral,
            1 => TransferCaseStatus2566751230::WheelHigh,
            value => TransferCaseStatus2566751230::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransOilLevelSwitch2566755838 {
    NotAvailable,
    Error,
    FullNotEmpty,
    Empty,
    XValue(u64),
}

impl From<u64> for TransOilLevelSwitch2566755838 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransOilLevelSwitch2566755838::NotAvailable,
            2 => TransOilLevelSwitch2566755838::Error,
            1 => TransOilLevelSwitch2566755838::FullNotEmpty,
            0 => TransOilLevelSwitch2566755838::Empty,
            value => TransOilLevelSwitch2566755838::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransOilFilterRestrictionSwitch2566755838 {
    NotAvailable,
    Error,
    RestrictionExistsOnOilFilter,
    NoRestriction,
    XValue(u64),
}

impl From<u64> for TransOilFilterRestrictionSwitch2566755838 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransOilFilterRestrictionSwitch2566755838::NotAvailable,
            2 => TransOilFilterRestrictionSwitch2566755838::Error,
            1 => TransOilFilterRestrictionSwitch2566755838::RestrictionExistsOnOilFilter,
            0 => TransOilFilterRestrictionSwitch2566755838::NoRestriction,
            value => TransOilFilterRestrictionSwitch2566755838::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementRearWorkLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplementRearWorkLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementRearWorkLight2566799614::NotAvailable,
            2 => ImplementRearWorkLight2566799614::FaultDetected,
            1 => ImplementRearWorkLight2566799614::Activate,
            0 => ImplementRearWorkLight2566799614::Deactivate,
            value => ImplementRearWorkLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementLeftForwardWorkLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplementLeftForwardWorkLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementLeftForwardWorkLight2566799614::NotAvailable,
            2 => ImplementLeftForwardWorkLight2566799614::FaultDetected,
            1 => ImplementLeftForwardWorkLight2566799614::Activate,
            0 => ImplementLeftForwardWorkLight2566799614::Deactivate,
            value => ImplementLeftForwardWorkLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementRightForwardWorkLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplementRightForwardWorkLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementRightForwardWorkLight2566799614::NotAvailable,
            2 => ImplementRightForwardWorkLight2566799614::FaultDetected,
            1 => ImplementRightForwardWorkLight2566799614::Activate,
            0 => ImplementRightForwardWorkLight2566799614::Deactivate,
            value => ImplementRightForwardWorkLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementLeftFacingWorkLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplementLeftFacingWorkLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementLeftFacingWorkLight2566799614::NotAvailable,
            2 => ImplementLeftFacingWorkLight2566799614::FaultDetected,
            1 => ImplementLeftFacingWorkLight2566799614::Activate,
            0 => ImplementLeftFacingWorkLight2566799614::Deactivate,
            value => ImplementLeftFacingWorkLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementRightFacingWorkLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplementRightFacingWorkLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementRightFacingWorkLight2566799614::NotAvailable,
            2 => ImplementRightFacingWorkLight2566799614::FaultDetected,
            1 => ImplementRightFacingWorkLight2566799614::Activate,
            0 => ImplementRightFacingWorkLight2566799614::Deactivate,
            value => ImplementRightFacingWorkLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementOemOption1Light2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplementOemOption1Light2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementOemOption1Light2566799614::NotAvailable,
            2 => ImplementOemOption1Light2566799614::FaultDetected,
            1 => ImplementOemOption1Light2566799614::Activate,
            0 => ImplementOemOption1Light2566799614::Deactivate,
            value => ImplementOemOption1Light2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementOemOption2Light2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplementOemOption2Light2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementOemOption2Light2566799614::NotAvailable,
            2 => ImplementOemOption2Light2566799614::FaultDetected,
            1 => ImplementOemOption2Light2566799614::Activate,
            0 => ImplementOemOption2Light2566799614::Deactivate,
            value => ImplementOemOption2Light2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrctrFrontHighMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TrctrFrontHighMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrctrFrontHighMountedWorkLights2566799614::NotAvailable,
            2 => TrctrFrontHighMountedWorkLights2566799614::FaultDetected,
            1 => TrctrFrontHighMountedWorkLights2566799614::Activate,
            0 => TrctrFrontHighMountedWorkLights2566799614::Deactivate,
            value => TrctrFrontHighMountedWorkLights2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrctorFrontLowMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TrctorFrontLowMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrctorFrontLowMountedWorkLights2566799614::NotAvailable,
            2 => TrctorFrontLowMountedWorkLights2566799614::FaultDetected,
            1 => TrctorFrontLowMountedWorkLights2566799614::Activate,
            0 => TrctorFrontLowMountedWorkLights2566799614::Deactivate,
            value => TrctorFrontLowMountedWorkLights2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrctorSideHighMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for TrctorSideHighMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrctorSideHighMountedWorkLights2566799614::NotAvailable,
            2 => TrctorSideHighMountedWorkLights2566799614::FaultDetected,
            1 => TrctorSideHighMountedWorkLights2566799614::Activated,
            0 => TrctorSideHighMountedWorkLights2566799614::Deactivated,
            value => TrctorSideHighMountedWorkLights2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorSideLowMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for TractorSideLowMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TractorSideLowMountedWorkLights2566799614::NotAvailable,
            2 => TractorSideLowMountedWorkLights2566799614::FaultDetected,
            1 => TractorSideLowMountedWorkLights2566799614::Activated,
            0 => TractorSideLowMountedWorkLights2566799614::Deactivated,
            value => TractorSideLowMountedWorkLights2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrctorRearHighMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for TrctorRearHighMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrctorRearHighMountedWorkLights2566799614::NotAvailable,
            2 => TrctorRearHighMountedWorkLights2566799614::FaultDetected,
            1 => TrctorRearHighMountedWorkLights2566799614::Activated,
            0 => TrctorRearHighMountedWorkLights2566799614::Deactivated,
            value => TrctorRearHighMountedWorkLights2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorRearLowMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TractorRearLowMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TractorRearLowMountedWorkLights2566799614::NotAvailable,
            2 => TractorRearLowMountedWorkLights2566799614::FaultDetected,
            1 => TractorRearLowMountedWorkLights2566799614::Activate,
            0 => TractorRearLowMountedWorkLights2566799614::Deactivate,
            value => TractorRearLowMountedWorkLights2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrctrUndersideMountedWorkLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TrctrUndersideMountedWorkLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrctrUndersideMountedWorkLights2566799614::NotAvailable,
            2 => TrctrUndersideMountedWorkLights2566799614::FaultDetected,
            1 => TrctrUndersideMountedWorkLights2566799614::Activate,
            0 => TrctrUndersideMountedWorkLights2566799614::Deactivate,
            value => TrctrUndersideMountedWorkLights2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RearFogLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for RearFogLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RearFogLights2566799614::NotAvailable,
            2 => RearFogLights2566799614::FaultDetected,
            1 => RearFogLights2566799614::Activated,
            0 => RearFogLights2566799614::Deactivated,
            value => RearFogLights2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorMarkerLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for TractorMarkerLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TractorMarkerLight2566799614::NotAvailable,
            2 => TractorMarkerLight2566799614::FaultDetected,
            1 => TractorMarkerLight2566799614::Activated,
            0 => TractorMarkerLight2566799614::Deactivated,
            value => TractorMarkerLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementMarkerLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for ImplementMarkerLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementMarkerLight2566799614::NotAvailable,
            2 => ImplementMarkerLight2566799614::FaultDetected,
            1 => ImplementMarkerLight2566799614::Activated,
            0 => ImplementMarkerLight2566799614::Deactivated,
            value => ImplementMarkerLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorClearanceLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for TractorClearanceLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TractorClearanceLight2566799614::NotAvailable,
            2 => TractorClearanceLight2566799614::FaultDetected,
            1 => TractorClearanceLight2566799614::Activated,
            0 => TractorClearanceLight2566799614::Deactivated,
            value => TractorClearanceLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementClearanceLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for ImplementClearanceLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementClearanceLight2566799614::NotAvailable,
            2 => ImplementClearanceLight2566799614::FaultDetected,
            1 => ImplementClearanceLight2566799614::Activated,
            0 => ImplementClearanceLight2566799614::Deactivated,
            value => ImplementClearanceLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LeftStopLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for LeftStopLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LeftStopLight2566799614::NotAvailable,
            2 => LeftStopLight2566799614::FaultDetected,
            1 => LeftStopLight2566799614::Activated,
            0 => LeftStopLight2566799614::Deactivated,
            value => LeftStopLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RightStopLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for RightStopLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RightStopLight2566799614::NotAvailable,
            2 => RightStopLight2566799614::FaultDetected,
            1 => RightStopLight2566799614::Activated,
            0 => RightStopLight2566799614::Deactivated,
            value => RightStopLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CenterStopLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for CenterStopLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CenterStopLight2566799614::NotAvailable,
            2 => CenterStopLight2566799614::FaultDetected,
            1 => CenterStopLight2566799614::Activated,
            0 => CenterStopLight2566799614::Deactivated,
            value => CenterStopLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BackUpLightAndAlarmHorn2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for BackUpLightAndAlarmHorn2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => BackUpLightAndAlarmHorn2566799614::NotAvailable,
            2 => BackUpLightAndAlarmHorn2566799614::FaultDetected,
            1 => BackUpLightAndAlarmHorn2566799614::Activated,
            0 => BackUpLightAndAlarmHorn2566799614::Deactivated,
            value => BackUpLightAndAlarmHorn2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LeftTurnSignalLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for LeftTurnSignalLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LeftTurnSignalLights2566799614::NotAvailable,
            2 => LeftTurnSignalLights2566799614::FaultDetected,
            1 => LeftTurnSignalLights2566799614::Activated,
            0 => LeftTurnSignalLights2566799614::Deactivated,
            value => LeftTurnSignalLights2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RightTurnSignalLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for RightTurnSignalLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RightTurnSignalLights2566799614::NotAvailable,
            2 => RightTurnSignalLights2566799614::FaultDetected,
            1 => RightTurnSignalLights2566799614::Activated,
            0 => RightTurnSignalLights2566799614::Deactivated,
            value => RightTurnSignalLights2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RotatingBeaconLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for RotatingBeaconLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RotatingBeaconLight2566799614::NotAvailable,
            2 => RotatingBeaconLight2566799614::FaultDetected,
            1 => RotatingBeaconLight2566799614::Activated,
            0 => RotatingBeaconLight2566799614::Deactivated,
            value => RotatingBeaconLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorFrontFogLights2566799614 {
    NotAvailable,
    FaultDetected,
    Activated,
    Deactivated,
    XValue(u64),
}

impl From<u64> for TractorFrontFogLights2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TractorFrontFogLights2566799614::NotAvailable,
            2 => TractorFrontFogLights2566799614::FaultDetected,
            1 => TractorFrontFogLights2566799614::Activated,
            0 => TractorFrontFogLights2566799614::Deactivated,
            value => TractorFrontFogLights2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HighBeamHeadLightData2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for HighBeamHeadLightData2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => HighBeamHeadLightData2566799614::NotAvailable,
            2 => HighBeamHeadLightData2566799614::FaultDetected,
            1 => HighBeamHeadLightData2566799614::Activate,
            0 => HighBeamHeadLightData2566799614::Deactivate,
            value => HighBeamHeadLightData2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LowBeamHeadLightData2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for LowBeamHeadLightData2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LowBeamHeadLightData2566799614::NotAvailable,
            2 => LowBeamHeadLightData2566799614::FaultDetected,
            1 => LowBeamHeadLightData2566799614::Activate,
            0 => LowBeamHeadLightData2566799614::Deactivate,
            value => LowBeamHeadLightData2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AltBeamHeadLightData2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for AltBeamHeadLightData2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AltBeamHeadLightData2566799614::NotAvailable,
            2 => AltBeamHeadLightData2566799614::FaultDetected,
            1 => AltBeamHeadLightData2566799614::Activate,
            0 => AltBeamHeadLightData2566799614::Deactivate,
            value => AltBeamHeadLightData2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RunningLight2566799614 {
    NotAvailable,
    FaultDetected,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for RunningLight2566799614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RunningLight2566799614::NotAvailable,
            2 => RunningLight2566799614::FaultDetected,
            1 => RunningLight2566799614::Activate,
            0 => RunningLight2566799614::Deactivate,
            value => RunningLight2566799614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementRearWorkLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplementRearWorkLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementRearWorkLightCmd2365473278::DonTCare,
            2 => ImplementRearWorkLightCmd2365473278::Reserved,
            1 => ImplementRearWorkLightCmd2365473278::Activate,
            0 => ImplementRearWorkLightCmd2365473278::Deactivate,
            value => ImplementRearWorkLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplmentLeftForwardWorkLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplmentLeftForwardWorkLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplmentLeftForwardWorkLightCmd2365473278::DonTCare,
            2 => ImplmentLeftForwardWorkLightCmd2365473278::Reserved,
            1 => ImplmentLeftForwardWorkLightCmd2365473278::Activate,
            0 => ImplmentLeftForwardWorkLightCmd2365473278::Deactivate,
            value => ImplmentLeftForwardWorkLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplmntRightForwardWorkLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplmntRightForwardWorkLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplmntRightForwardWorkLightCmd2365473278::DonTCare,
            2 => ImplmntRightForwardWorkLightCmd2365473278::Reserved,
            1 => ImplmntRightForwardWorkLightCmd2365473278::Activate,
            0 => ImplmntRightForwardWorkLightCmd2365473278::Deactivate,
            value => ImplmntRightForwardWorkLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LightingDataRqCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for LightingDataRqCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LightingDataRqCmd2365473278::DonTCare,
            2 => LightingDataRqCmd2365473278::Reserved,
            1 => LightingDataRqCmd2365473278::Activate,
            0 => LightingDataRqCmd2365473278::Deactivate,
            value => LightingDataRqCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementLeftFacingWorkLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplementLeftFacingWorkLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementLeftFacingWorkLightCmd2365473278::DonTCare,
            2 => ImplementLeftFacingWorkLightCmd2365473278::Reserved,
            1 => ImplementLeftFacingWorkLightCmd2365473278::Activate,
            0 => ImplementLeftFacingWorkLightCmd2365473278::Deactivate,
            value => ImplementLeftFacingWorkLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplmentRightFacingWorkLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplmentRightFacingWorkLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplmentRightFacingWorkLightCmd2365473278::DonTCare,
            2 => ImplmentRightFacingWorkLightCmd2365473278::Reserved,
            1 => ImplmentRightFacingWorkLightCmd2365473278::Activate,
            0 => ImplmentRightFacingWorkLightCmd2365473278::Deactivate,
            value => ImplmentRightFacingWorkLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementOemOption1LightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplementOemOption1LightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementOemOption1LightCmd2365473278::DonTCare,
            2 => ImplementOemOption1LightCmd2365473278::Reserved,
            1 => ImplementOemOption1LightCmd2365473278::Activate,
            0 => ImplementOemOption1LightCmd2365473278::Deactivate,
            value => ImplementOemOption1LightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementOemOption2LightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplementOemOption2LightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementOemOption2LightCmd2365473278::DonTCare,
            2 => ImplementOemOption2LightCmd2365473278::Reserved,
            1 => ImplementOemOption2LightCmd2365473278::Activate,
            0 => ImplementOemOption2LightCmd2365473278::Deactivate,
            value => ImplementOemOption2LightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrctrFrntHghMuntedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TrctrFrntHghMuntedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrctrFrntHghMuntedWorkLightsCmd2365473278::DonTCare,
            2 => TrctrFrntHghMuntedWorkLightsCmd2365473278::Reserved,
            1 => TrctrFrntHghMuntedWorkLightsCmd2365473278::Activate,
            0 => TrctrFrntHghMuntedWorkLightsCmd2365473278::Deactivate,
            value => TrctrFrntHghMuntedWorkLightsCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrctrFrntLwMountedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TrctrFrntLwMountedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrctrFrntLwMountedWorkLightsCmd2365473278::DonTCare,
            2 => TrctrFrntLwMountedWorkLightsCmd2365473278::Reserved,
            1 => TrctrFrntLwMountedWorkLightsCmd2365473278::Activate,
            0 => TrctrFrntLwMountedWorkLightsCmd2365473278::Deactivate,
            value => TrctrFrntLwMountedWorkLightsCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrctrSdHighMountedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TrctrSdHighMountedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrctrSdHighMountedWorkLightsCmd2365473278::DonTCare,
            2 => TrctrSdHighMountedWorkLightsCmd2365473278::Reserved,
            1 => TrctrSdHighMountedWorkLightsCmd2365473278::Activate,
            0 => TrctrSdHighMountedWorkLightsCmd2365473278::Deactivate,
            value => TrctrSdHighMountedWorkLightsCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrctrSdeLowMountedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TrctrSdeLowMountedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrctrSdeLowMountedWorkLightsCmd2365473278::DonTCare,
            2 => TrctrSdeLowMountedWorkLightsCmd2365473278::Reserved,
            1 => TrctrSdeLowMountedWorkLightsCmd2365473278::Activate,
            0 => TrctrSdeLowMountedWorkLightsCmd2365473278::Deactivate,
            value => TrctrSdeLowMountedWorkLightsCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrctrRrHighMountedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TrctrRrHighMountedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrctrRrHighMountedWorkLightsCmd2365473278::DonTCare,
            2 => TrctrRrHighMountedWorkLightsCmd2365473278::Reserved,
            1 => TrctrRrHighMountedWorkLightsCmd2365473278::Activate,
            0 => TrctrRrHighMountedWorkLightsCmd2365473278::Deactivate,
            value => TrctrRrHighMountedWorkLightsCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrctrRarLowMountedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TrctrRarLowMountedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrctrRarLowMountedWorkLightsCmd2365473278::DonTCare,
            2 => TrctrRarLowMountedWorkLightsCmd2365473278::Reserved,
            1 => TrctrRarLowMountedWorkLightsCmd2365473278::Activate,
            0 => TrctrRarLowMountedWorkLightsCmd2365473278::Deactivate,
            value => TrctrRarLowMountedWorkLightsCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrctrUndrsdMountedWorkLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TrctrUndrsdMountedWorkLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrctrUndrsdMountedWorkLightsCmd2365473278::DonTCare,
            2 => TrctrUndrsdMountedWorkLightsCmd2365473278::Reserved,
            1 => TrctrUndrsdMountedWorkLightsCmd2365473278::Activate,
            0 => TrctrUndrsdMountedWorkLightsCmd2365473278::Deactivate,
            value => TrctrUndrsdMountedWorkLightsCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RearFogLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for RearFogLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RearFogLightCmd2365473278::DonTCare,
            2 => RearFogLightCmd2365473278::Reserved,
            1 => RearFogLightCmd2365473278::Activate,
            0 => RearFogLightCmd2365473278::Deactivate,
            value => RearFogLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorMarkerLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TractorMarkerLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TractorMarkerLightCmd2365473278::DonTCare,
            2 => TractorMarkerLightCmd2365473278::Reserved,
            1 => TractorMarkerLightCmd2365473278::Activate,
            0 => TractorMarkerLightCmd2365473278::Deactivate,
            value => TractorMarkerLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementMarkerLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplementMarkerLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementMarkerLightCmd2365473278::DonTCare,
            2 => ImplementMarkerLightCmd2365473278::Reserved,
            1 => ImplementMarkerLightCmd2365473278::Activate,
            0 => ImplementMarkerLightCmd2365473278::Deactivate,
            value => ImplementMarkerLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorClearanceLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TractorClearanceLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TractorClearanceLightCmd2365473278::DonTCare,
            2 => TractorClearanceLightCmd2365473278::Reserved,
            1 => TractorClearanceLightCmd2365473278::Activate,
            0 => TractorClearanceLightCmd2365473278::Deactivate,
            value => TractorClearanceLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ImplementClearanceLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for ImplementClearanceLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ImplementClearanceLightCmd2365473278::DonTCare,
            2 => ImplementClearanceLightCmd2365473278::Reserved,
            1 => ImplementClearanceLightCmd2365473278::Activate,
            0 => ImplementClearanceLightCmd2365473278::Deactivate,
            value => ImplementClearanceLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LeftStopLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for LeftStopLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LeftStopLightCmd2365473278::DonTCare,
            2 => LeftStopLightCmd2365473278::Reserved,
            1 => LeftStopLightCmd2365473278::Activate,
            0 => LeftStopLightCmd2365473278::Deactivate,
            value => LeftStopLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RightStopLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for RightStopLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RightStopLightCmd2365473278::DonTCare,
            2 => RightStopLightCmd2365473278::Reserved,
            1 => RightStopLightCmd2365473278::Activate,
            0 => RightStopLightCmd2365473278::Deactivate,
            value => RightStopLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CenterStopLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for CenterStopLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CenterStopLightCmd2365473278::DonTCare,
            2 => CenterStopLightCmd2365473278::Reserved,
            1 => CenterStopLightCmd2365473278::Activate,
            0 => CenterStopLightCmd2365473278::Deactivate,
            value => CenterStopLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BackUpLightAndAlarmHornCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for BackUpLightAndAlarmHornCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => BackUpLightAndAlarmHornCmd2365473278::DonTCare,
            2 => BackUpLightAndAlarmHornCmd2365473278::Reserved,
            1 => BackUpLightAndAlarmHornCmd2365473278::Activate,
            0 => BackUpLightAndAlarmHornCmd2365473278::Deactivate,
            value => BackUpLightAndAlarmHornCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LeftTurnSignalLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for LeftTurnSignalLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LeftTurnSignalLightsCmd2365473278::DonTCare,
            2 => LeftTurnSignalLightsCmd2365473278::Reserved,
            1 => LeftTurnSignalLightsCmd2365473278::Activate,
            0 => LeftTurnSignalLightsCmd2365473278::Deactivate,
            value => LeftTurnSignalLightsCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RightTurnSignalLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for RightTurnSignalLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RightTurnSignalLightsCmd2365473278::DonTCare,
            2 => RightTurnSignalLightsCmd2365473278::Reserved,
            1 => RightTurnSignalLightsCmd2365473278::Activate,
            0 => RightTurnSignalLightsCmd2365473278::Deactivate,
            value => RightTurnSignalLightsCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RotatingBeaconLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for RotatingBeaconLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RotatingBeaconLightCmd2365473278::DonTCare,
            2 => RotatingBeaconLightCmd2365473278::Reserved,
            1 => RotatingBeaconLightCmd2365473278::Activate,
            0 => RotatingBeaconLightCmd2365473278::Deactivate,
            value => RotatingBeaconLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorFrontFogLightsCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for TractorFrontFogLightsCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TractorFrontFogLightsCmd2365473278::DonTCare,
            2 => TractorFrontFogLightsCmd2365473278::Reserved,
            1 => TractorFrontFogLightsCmd2365473278::Activate,
            0 => TractorFrontFogLightsCmd2365473278::Deactivate,
            value => TractorFrontFogLightsCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HighBeamHeadLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for HighBeamHeadLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => HighBeamHeadLightCmd2365473278::DonTCare,
            2 => HighBeamHeadLightCmd2365473278::Reserved,
            1 => HighBeamHeadLightCmd2365473278::Activate,
            0 => HighBeamHeadLightCmd2365473278::Deactivate,
            value => HighBeamHeadLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LowBeamHeadLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for LowBeamHeadLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LowBeamHeadLightCmd2365473278::DonTCare,
            2 => LowBeamHeadLightCmd2365473278::Reserved,
            1 => LowBeamHeadLightCmd2365473278::Activate,
            0 => LowBeamHeadLightCmd2365473278::Deactivate,
            value => LowBeamHeadLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AltBeamHeadLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for AltBeamHeadLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AltBeamHeadLightCmd2365473278::DonTCare,
            2 => AltBeamHeadLightCmd2365473278::Reserved,
            1 => AltBeamHeadLightCmd2365473278::Activate,
            0 => AltBeamHeadLightCmd2365473278::Deactivate,
            value => AltBeamHeadLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RunningLightCmd2365473278 {
    DonTCare,
    Reserved,
    Activate,
    Deactivate,
    XValue(u64),
}

impl From<u64> for RunningLightCmd2365473278 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RunningLightCmd2365473278::DonTCare,
            2 => RunningLightCmd2365473278::Reserved,
            1 => RunningLightCmd2365473278::Activate,
            0 => RunningLightCmd2365473278::Deactivate,
            value => RunningLightCmd2365473278::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BladeCtrlMode2365485822 {
    InactiveAutomaticMode,
    AutomaticMode,
    ManualMode,
    XValue(u64),
}

impl From<u64> for BladeCtrlMode2365485822 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => BladeCtrlMode2365485822::InactiveAutomaticMode,
            1 => BladeCtrlMode2365485822::AutomaticMode,
            0 => BladeCtrlMode2365485822::ManualMode,
            value => BladeCtrlMode2365485822::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngOprtrPrmryIntrmdtSpdSlctStte2566768894 {
    NotAvailable,
    SaeReserved,
    Thr1101CtrlSttIsIscSttng1Thru13,
    CtrlSttIsIscFnctnltyIsNtRqdEngO,
    XValue(u64),
}

impl From<u64> for EngOprtrPrmryIntrmdtSpdSlctStte2566768894 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngOprtrPrmryIntrmdtSpdSlctStte2566768894::NotAvailable,
            14 => EngOprtrPrmryIntrmdtSpdSlctStte2566768894::SaeReserved,
            1 => EngOprtrPrmryIntrmdtSpdSlctStte2566768894::Thr1101CtrlSttIsIscSttng1Thru13,
            0 => EngOprtrPrmryIntrmdtSpdSlctStte2566768894::CtrlSttIsIscFnctnltyIsNtRqdEngO,
            value => EngOprtrPrmryIntrmdtSpdSlctStte2566768894::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngOprtrPrmryIntrmdtSpeedSelect2566769406 {
    NotAvailable,
    ErrorCondition,
    Thr1101IndctsThtIscSttng1Thr13I,
    IndctsThtIscFnctnltyIsNtRqdEngO,
    XValue(u64),
}

impl From<u64> for EngOprtrPrmryIntrmdtSpeedSelect2566769406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngOprtrPrmryIntrmdtSpeedSelect2566769406::NotAvailable,
            14 => EngOprtrPrmryIntrmdtSpeedSelect2566769406::ErrorCondition,
            1 => EngOprtrPrmryIntrmdtSpeedSelect2566769406::Thr1101IndctsThtIscSttng1Thr13I,
            0 => EngOprtrPrmryIntrmdtSpeedSelect2566769406::IndctsThtIscFnctnltyIsNtRqdEngO,
            value => EngOprtrPrmryIntrmdtSpeedSelect2566769406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CabHeatingZone2566811134 {
    NotAvailable,
    Reserved,
    CabHeatingZoneOn,
    CabHeatingZoneOff,
    XValue(u64),
}

impl From<u64> for CabHeatingZone2566811134 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CabHeatingZone2566811134::NotAvailable,
            2 => CabHeatingZone2566811134::Reserved,
            1 => CabHeatingZone2566811134::CabHeatingZoneOn,
            0 => CabHeatingZone2566811134::CabHeatingZoneOff,
            value => CabHeatingZone2566811134::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngHeatingZone2566811134 {
    NotAvailable,
    Reserved,
    EngHeatingZoneOn,
    EngHeatingZoneOff,
    XValue(u64),
}

impl From<u64> for EngHeatingZone2566811134 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngHeatingZone2566811134::NotAvailable,
            2 => EngHeatingZone2566811134::Reserved,
            1 => EngHeatingZone2566811134::EngHeatingZoneOn,
            0 => EngHeatingZone2566811134::EngHeatingZoneOff,
            value => EngHeatingZone2566811134::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CabVentilation2566811134 {
    NotAvailable,
    Reserved,
    CabIsVentilated,
    CabNotVentilated,
    XValue(u64),
}

impl From<u64> for CabVentilation2566811134 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CabVentilation2566811134::NotAvailable,
            2 => CabVentilation2566811134::Reserved,
            1 => CabVentilation2566811134::CabIsVentilated,
            0 => CabVentilation2566811134::CabNotVentilated,
            value => CabVentilation2566811134::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxilaryHeaterWaterPumpStatus2566811134 {
    NotAvailable,
    Reserved,
    WaterPumpIsRunning,
    WaterPumpIsNotRunning,
    XValue(u64),
}

impl From<u64> for AuxilaryHeaterWaterPumpStatus2566811134 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxilaryHeaterWaterPumpStatus2566811134::NotAvailable,
            2 => AuxilaryHeaterWaterPumpStatus2566811134::Reserved,
            1 => AuxilaryHeaterWaterPumpStatus2566811134::WaterPumpIsRunning,
            0 => AuxilaryHeaterWaterPumpStatus2566811134::WaterPumpIsNotRunning,
            value => AuxilaryHeaterWaterPumpStatus2566811134::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxHeaterMode2566811134 {
    NotAvailable,
    Error,
    X1101notDefined,
    NormalMode,
    EconomyMode,
    OffDtadrPrErpnRgltnsFrTrnsprtOf,
    HeaterNotActive,
    XValue(u64),
}

impl From<u64> for AuxHeaterMode2566811134 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => AuxHeaterMode2566811134::NotAvailable,
            14 => AuxHeaterMode2566811134::Error,
            4 => AuxHeaterMode2566811134::X1101notDefined,
            3 => AuxHeaterMode2566811134::NormalMode,
            2 => AuxHeaterMode2566811134::EconomyMode,
            1 => AuxHeaterMode2566811134::OffDtadrPrErpnRgltnsFrTrnsprtOf,
            0 => AuxHeaterMode2566811134::HeaterNotActive,
            value => AuxHeaterMode2566811134::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FireApparatusPumpEngagement2565867774 {
    NotAvailableNotInstalled,
    Error,
    PumpEngaged,
    PumpNotEngaged,
    XValue(u64),
}

impl From<u64> for FireApparatusPumpEngagement2565867774 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FireApparatusPumpEngagement2565867774::NotAvailableNotInstalled,
            2 => FireApparatusPumpEngagement2565867774::Error,
            1 => FireApparatusPumpEngagement2565867774::PumpEngaged,
            0 => FireApparatusPumpEngagement2565867774::PumpNotEngaged,
            value => FireApparatusPumpEngagement2565867774::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngHydPressGovernorSwitch2565867774 {
    NotAvailable,
    ErrorIndicator,
    PressModeActive,
    PressModeInactive,
    XValue(u64),
}

impl From<u64> for EngHydPressGovernorSwitch2565867774 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngHydPressGovernorSwitch2565867774::NotAvailable,
            2 => EngHydPressGovernorSwitch2565867774::ErrorIndicator,
            1 => EngHydPressGovernorSwitch2565867774::PressModeActive,
            0 => EngHydPressGovernorSwitch2565867774::PressModeInactive,
            value => EngHydPressGovernorSwitch2565867774::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngHydPrssGovernorModeIndicator2565867774 {
    NotAvailable,
    ErrorIndicator,
    Enabled,
    Disabled,
    XValue(u64),
}

impl From<u64> for EngHydPrssGovernorModeIndicator2565867774 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngHydPrssGovernorModeIndicator2565867774::NotAvailable,
            2 => EngHydPrssGovernorModeIndicator2565867774::ErrorIndicator,
            1 => EngHydPrssGovernorModeIndicator2565867774::Enabled,
            0 => EngHydPrssGovernorModeIndicator2565867774::Disabled,
            value => EngHydPrssGovernorModeIndicator2565867774::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HydBrakeFluidLevelSwitch2365449982 {
    NotAvailable,
    ErrorIndicator,
    FluidLevelIsSufficient,
    FluidLevelIsNotSufficient,
    XValue(u64),
}

impl From<u64> for HydBrakeFluidLevelSwitch2365449982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => HydBrakeFluidLevelSwitch2365449982::NotAvailable,
            2 => HydBrakeFluidLevelSwitch2365449982::ErrorIndicator,
            1 => HydBrakeFluidLevelSwitch2365449982::FluidLevelIsSufficient,
            0 => HydBrakeFluidLevelSwitch2365449982::FluidLevelIsNotSufficient,
            value => HydBrakeFluidLevelSwitch2365449982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HydBrakeSystemAudibleWarningCmd2365449982 {
    DontCare,
    Reserved,
    AudibleWarningOn,
    AudibleWarningOff,
    XValue(u64),
}

impl From<u64> for HydBrakeSystemAudibleWarningCmd2365449982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => HydBrakeSystemAudibleWarningCmd2365449982::DontCare,
            2 => HydBrakeSystemAudibleWarningCmd2365449982::Reserved,
            1 => HydBrakeSystemAudibleWarningCmd2365449982::AudibleWarningOn,
            0 => HydBrakeSystemAudibleWarningCmd2365449982::AudibleWarningOff,
            value => HydBrakeSystemAudibleWarningCmd2365449982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HydBrkePressSupplyStateCircuit22365449982 {
    NotAvailable,
    ErrorIndicator,
    SupplyIsReliable,
    SupplyIsNotReliable,
    XValue(u64),
}

impl From<u64> for HydBrkePressSupplyStateCircuit22365449982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => HydBrkePressSupplyStateCircuit22365449982::NotAvailable,
            2 => HydBrkePressSupplyStateCircuit22365449982::ErrorIndicator,
            1 => HydBrkePressSupplyStateCircuit22365449982::SupplyIsReliable,
            0 => HydBrkePressSupplyStateCircuit22365449982::SupplyIsNotReliable,
            value => HydBrkePressSupplyStateCircuit22365449982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HydBrkePressSupplyStateCircuit12365449982 {
    NotAvailable,
    ErrorIndicator,
    SupplyIsReliable,
    SupplyIsNotReliable,
    XValue(u64),
}

impl From<u64> for HydBrkePressSupplyStateCircuit12365449982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => HydBrkePressSupplyStateCircuit12365449982::NotAvailable,
            2 => HydBrkePressSupplyStateCircuit12365449982::ErrorIndicator,
            1 => HydBrkePressSupplyStateCircuit12365449982::SupplyIsReliable,
            0 => HydBrkePressSupplyStateCircuit12365449982::SupplyIsNotReliable,
            value => HydBrkePressSupplyStateCircuit12365449982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HydBrkPressWarningStateCircuit22365449982 {
    NotAvailable,
    ErrorIndicator,
    PressLevelBelowWarningLevel,
    PressLevelSufficient,
    XValue(u64),
}

impl From<u64> for HydBrkPressWarningStateCircuit22365449982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => HydBrkPressWarningStateCircuit22365449982::NotAvailable,
            2 => HydBrkPressWarningStateCircuit22365449982::ErrorIndicator,
            1 => HydBrkPressWarningStateCircuit22365449982::PressLevelBelowWarningLevel,
            0 => HydBrkPressWarningStateCircuit22365449982::PressLevelSufficient,
            value => HydBrkPressWarningStateCircuit22365449982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HydBrkPressWarningStateCircuit12365449982 {
    NotAvailable,
    ErrorIndicator,
    PressLevelBelowWarningLevel,
    PressLevelSufficient,
    XValue(u64),
}

impl From<u64> for HydBrkPressWarningStateCircuit12365449982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => HydBrkPressWarningStateCircuit12365449982::NotAvailable,
            2 => HydBrkPressWarningStateCircuit12365449982::ErrorIndicator,
            1 => HydBrkPressWarningStateCircuit12365449982::PressLevelBelowWarningLevel,
            0 => HydBrkPressWarningStateCircuit12365449982::PressLevelSufficient,
            value => HydBrkPressWarningStateCircuit12365449982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnggmntSttusTransInputShaftPto12566759678 {
    NotAvailable,
    Error,
    DriveIsEngaged,
    DriveNotEngaged,
    XValue(u64),
}

impl From<u64> for EnggmntSttusTransInputShaftPto12566759678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnggmntSttusTransInputShaftPto12566759678::NotAvailable,
            2 => EnggmntSttusTransInputShaftPto12566759678::Error,
            1 => EnggmntSttusTransInputShaftPto12566759678::DriveIsEngaged,
            0 => EnggmntSttusTransInputShaftPto12566759678::DriveNotEngaged,
            value => EnggmntSttusTransInputShaftPto12566759678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnggmntSttusTransInputShaftPto22566759678 {
    NotAvailable,
    Error,
    DriveIsEngaged,
    DriveNotEngaged,
    XValue(u64),
}

impl From<u64> for EnggmntSttusTransInputShaftPto22566759678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnggmntSttusTransInputShaftPto22566759678::NotAvailable,
            2 => EnggmntSttusTransInputShaftPto22566759678::Error,
            1 => EnggmntSttusTransInputShaftPto22566759678::DriveIsEngaged,
            0 => EnggmntSttusTransInputShaftPto22566759678::DriveNotEngaged,
            value => EnggmntSttusTransInputShaftPto22566759678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnggmntSttusTransOutputShaftPto2566759678 {
    NotAvailable,
    Error,
    DriveIsEngaged,
    DriveNotEngaged,
    XValue(u64),
}

impl From<u64> for EnggmntSttusTransOutputShaftPto2566759678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnggmntSttusTransOutputShaftPto2566759678::NotAvailable,
            2 => EnggmntSttusTransOutputShaftPto2566759678::Error,
            1 => EnggmntSttusTransOutputShaftPto2566759678::DriveIsEngaged,
            0 => EnggmntSttusTransOutputShaftPto2566759678::DriveNotEngaged,
            value => EnggmntSttusTransOutputShaftPto2566759678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnggmntSttsTrnsfrCsOtptShaftPto2566759678 {
    NotAvailable,
    Error,
    DriveIsEngaged,
    DriveNotEngaged,
    XValue(u64),
}

impl From<u64> for EnggmntSttsTrnsfrCsOtptShaftPto2566759678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnggmntSttsTrnsfrCsOtptShaftPto2566759678::NotAvailable,
            2 => EnggmntSttsTrnsfrCsOtptShaftPto2566759678::Error,
            1 => EnggmntSttsTrnsfrCsOtptShaftPto2566759678::DriveIsEngaged,
            0 => EnggmntSttsTrnsfrCsOtptShaftPto2566759678::DriveNotEngaged,
            value => EnggmntSttsTrnsfrCsOtptShaftPto2566759678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnggmntCnsntTransInputShaftPto12566759678 {
    NotAvailable,
    Error,
    CnsentGivenPtoDriveMayBeEngaged,
    CnsntNtGvnPtoDrvShldNtBeEngaged,
    XValue(u64),
}

impl From<u64> for EnggmntCnsntTransInputShaftPto12566759678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnggmntCnsntTransInputShaftPto12566759678::NotAvailable,
            2 => EnggmntCnsntTransInputShaftPto12566759678::Error,
            1 => EnggmntCnsntTransInputShaftPto12566759678::CnsentGivenPtoDriveMayBeEngaged,
            0 => EnggmntCnsntTransInputShaftPto12566759678::CnsntNtGvnPtoDrvShldNtBeEngaged,
            value => EnggmntCnsntTransInputShaftPto12566759678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnggmntCnsntTransInputShaftPto22566759678 {
    NotAvailable,
    Error,
    CnsentGivenPtoDriveMayBeEngaged,
    CnsntNtGvnPtoDrvShldNtBeEngaged,
    XValue(u64),
}

impl From<u64> for EnggmntCnsntTransInputShaftPto22566759678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnggmntCnsntTransInputShaftPto22566759678::NotAvailable,
            2 => EnggmntCnsntTransInputShaftPto22566759678::Error,
            1 => EnggmntCnsntTransInputShaftPto22566759678::CnsentGivenPtoDriveMayBeEngaged,
            0 => EnggmntCnsntTransInputShaftPto22566759678::CnsntNtGvnPtoDrvShldNtBeEngaged,
            value => EnggmntCnsntTransInputShaftPto22566759678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnggmntCnsntTransOutputShaftPto2566759678 {
    NotAvailable,
    Error,
    CnsentGivenPtoDriveMayBeEngaged,
    CnsntNtGvnPtoDrvShldNtBeEngaged,
    XValue(u64),
}

impl From<u64> for EnggmntCnsntTransOutputShaftPto2566759678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnggmntCnsntTransOutputShaftPto2566759678::NotAvailable,
            2 => EnggmntCnsntTransOutputShaftPto2566759678::Error,
            1 => EnggmntCnsntTransOutputShaftPto2566759678::CnsentGivenPtoDriveMayBeEngaged,
            0 => EnggmntCnsntTransOutputShaftPto2566759678::CnsntNtGvnPtoDrvShldNtBeEngaged,
            value => EnggmntCnsntTransOutputShaftPto2566759678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnggmntCnsntTrnsfrCsOtptShftPto2566759678 {
    NotAvailable,
    Error,
    CnsentGivenPtoDriveMayBeEngaged,
    CnsntNtGvnPtoDrvShldNtBeEngaged,
    XValue(u64),
}

impl From<u64> for EnggmntCnsntTrnsfrCsOtptShftPto2566759678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnggmntCnsntTrnsfrCsOtptShftPto2566759678::NotAvailable,
            2 => EnggmntCnsntTrnsfrCsOtptShftPto2566759678::Error,
            1 => EnggmntCnsntTrnsfrCsOtptShftPto2566759678::CnsentGivenPtoDriveMayBeEngaged,
            0 => EnggmntCnsntTrnsfrCsOtptShftPto2566759678::CnsntNtGvnPtoDrvShldNtBeEngaged,
            value => EnggmntCnsntTrnsfrCsOtptShftPto2566759678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableSwitchTransInputShaftPto12566759678 {
    NotAvailable,
    Error,
    EnblSwtchOffPtoOperationDesired,
    EnblSwtchOffPtoOprtonNotDesired,
    XValue(u64),
}

impl From<u64> for EnableSwitchTransInputShaftPto12566759678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableSwitchTransInputShaftPto12566759678::NotAvailable,
            2 => EnableSwitchTransInputShaftPto12566759678::Error,
            1 => EnableSwitchTransInputShaftPto12566759678::EnblSwtchOffPtoOperationDesired,
            0 => EnableSwitchTransInputShaftPto12566759678::EnblSwtchOffPtoOprtonNotDesired,
            value => EnableSwitchTransInputShaftPto12566759678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableSwitchTransInputShaftPto22566759678 {
    NotAvailable,
    Error,
    EnblSwtchOffPtoOperationDesired,
    EnblSwtchOffPtoOprtonNotDesired,
    XValue(u64),
}

impl From<u64> for EnableSwitchTransInputShaftPto22566759678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableSwitchTransInputShaftPto22566759678::NotAvailable,
            2 => EnableSwitchTransInputShaftPto22566759678::Error,
            1 => EnableSwitchTransInputShaftPto22566759678::EnblSwtchOffPtoOperationDesired,
            0 => EnableSwitchTransInputShaftPto22566759678::EnblSwtchOffPtoOprtonNotDesired,
            value => EnableSwitchTransInputShaftPto22566759678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableSwitchTransOutputShaftPto2566759678 {
    NotAvailable,
    Error,
    EnblSwtchOffPtoOperationDesired,
    EnblSwtchOffPtoOprtonNotDesired,
    XValue(u64),
}

impl From<u64> for EnableSwitchTransOutputShaftPto2566759678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableSwitchTransOutputShaftPto2566759678::NotAvailable,
            2 => EnableSwitchTransOutputShaftPto2566759678::Error,
            1 => EnableSwitchTransOutputShaftPto2566759678::EnblSwtchOffPtoOperationDesired,
            0 => EnableSwitchTransOutputShaftPto2566759678::EnblSwtchOffPtoOprtonNotDesired,
            value => EnableSwitchTransOutputShaftPto2566759678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnblSwtchTrnsfrCsOutputShaftPto2566759678 {
    NotAvailable,
    Error,
    EnblSwtchOffPtoOperationDesired,
    EnblSwtchOffPtoOprtonNotDesired,
    XValue(u64),
}

impl From<u64> for EnblSwtchTrnsfrCsOutputShaftPto2566759678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnblSwtchTrnsfrCsOutputShaftPto2566759678::NotAvailable,
            2 => EnblSwtchTrnsfrCsOutputShaftPto2566759678::Error,
            1 => EnblSwtchTrnsfrCsOutputShaftPto2566759678::EnblSwtchOffPtoOperationDesired,
            0 => EnblSwtchTrnsfrCsOutputShaftPto2566759678::EnblSwtchOffPtoOprtonNotDesired,
            value => EnblSwtchTrnsfrCsOutputShaftPto2566759678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngTurboCompressorCtrl2432541694 {
    RprsntsFllyOpnTypcllyTrbCmprssr,
    XValue(u64),
}

impl From<u64> for EngTurboCompressorCtrl2432541694 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            4 => EngTurboCompressorCtrl2432541694::RprsntsFllyOpnTypcllyTrbCmprssr,
            value => EngTurboCompressorCtrl2432541694::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableStatusOfDoor102566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u64),
}

impl From<u64> for EnableStatusOfDoor102566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableStatusOfDoor102566759934::NotAvailable,
            2 => EnableStatusOfDoor102566759934::Error,
            1 => EnableStatusOfDoor102566759934::DoorEnabled,
            0 => EnableStatusOfDoor102566759934::DoorDisabled,
            value => EnableStatusOfDoor102566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OpenStatusOfDoor102566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u64),
}

impl From<u64> for OpenStatusOfDoor102566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OpenStatusOfDoor102566759934::NotAvailable,
            2 => OpenStatusOfDoor102566759934::Error,
            1 => OpenStatusOfDoor102566759934::DoorOpened,
            0 => OpenStatusOfDoor102566759934::DoorClosed,
            value => OpenStatusOfDoor102566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LockStatusOfDoor102566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u64),
}

impl From<u64> for LockStatusOfDoor102566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LockStatusOfDoor102566759934::NotAvailable,
            2 => LockStatusOfDoor102566759934::Error,
            1 => LockStatusOfDoor102566759934::Locked,
            0 => LockStatusOfDoor102566759934::Unlocked,
            value => LockStatusOfDoor102566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableStatusOfDoor92566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u64),
}

impl From<u64> for EnableStatusOfDoor92566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableStatusOfDoor92566759934::NotAvailable,
            2 => EnableStatusOfDoor92566759934::Error,
            1 => EnableStatusOfDoor92566759934::DoorEnabled,
            0 => EnableStatusOfDoor92566759934::DoorDisabled,
            value => EnableStatusOfDoor92566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OpenStatusOfDoor92566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u64),
}

impl From<u64> for OpenStatusOfDoor92566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OpenStatusOfDoor92566759934::NotAvailable,
            2 => OpenStatusOfDoor92566759934::Error,
            1 => OpenStatusOfDoor92566759934::DoorOpened,
            0 => OpenStatusOfDoor92566759934::DoorClosed,
            value => OpenStatusOfDoor92566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LockStatusOfDoor92566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u64),
}

impl From<u64> for LockStatusOfDoor92566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LockStatusOfDoor92566759934::NotAvailable,
            2 => LockStatusOfDoor92566759934::Error,
            1 => LockStatusOfDoor92566759934::Locked,
            0 => LockStatusOfDoor92566759934::Unlocked,
            value => LockStatusOfDoor92566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableStatusOfDoor82566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u64),
}

impl From<u64> for EnableStatusOfDoor82566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableStatusOfDoor82566759934::NotAvailable,
            2 => EnableStatusOfDoor82566759934::Error,
            1 => EnableStatusOfDoor82566759934::DoorEnabled,
            0 => EnableStatusOfDoor82566759934::DoorDisabled,
            value => EnableStatusOfDoor82566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OpenStatusOfDoor82566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u64),
}

impl From<u64> for OpenStatusOfDoor82566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OpenStatusOfDoor82566759934::NotAvailable,
            2 => OpenStatusOfDoor82566759934::Error,
            1 => OpenStatusOfDoor82566759934::DoorOpened,
            0 => OpenStatusOfDoor82566759934::DoorClosed,
            value => OpenStatusOfDoor82566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LockStatusOfDoor82566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u64),
}

impl From<u64> for LockStatusOfDoor82566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LockStatusOfDoor82566759934::NotAvailable,
            2 => LockStatusOfDoor82566759934::Error,
            1 => LockStatusOfDoor82566759934::Locked,
            0 => LockStatusOfDoor82566759934::Unlocked,
            value => LockStatusOfDoor82566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableStatusOfDoor72566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u64),
}

impl From<u64> for EnableStatusOfDoor72566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableStatusOfDoor72566759934::NotAvailable,
            2 => EnableStatusOfDoor72566759934::Error,
            1 => EnableStatusOfDoor72566759934::DoorEnabled,
            0 => EnableStatusOfDoor72566759934::DoorDisabled,
            value => EnableStatusOfDoor72566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OpenStatusOfDoor72566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u64),
}

impl From<u64> for OpenStatusOfDoor72566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OpenStatusOfDoor72566759934::NotAvailable,
            2 => OpenStatusOfDoor72566759934::Error,
            1 => OpenStatusOfDoor72566759934::DoorOpened,
            0 => OpenStatusOfDoor72566759934::DoorClosed,
            value => OpenStatusOfDoor72566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LockStatusOfDoor72566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u64),
}

impl From<u64> for LockStatusOfDoor72566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LockStatusOfDoor72566759934::NotAvailable,
            2 => LockStatusOfDoor72566759934::Error,
            1 => LockStatusOfDoor72566759934::Locked,
            0 => LockStatusOfDoor72566759934::Unlocked,
            value => LockStatusOfDoor72566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableStatusOfDoor62566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u64),
}

impl From<u64> for EnableStatusOfDoor62566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableStatusOfDoor62566759934::NotAvailable,
            2 => EnableStatusOfDoor62566759934::Error,
            1 => EnableStatusOfDoor62566759934::DoorEnabled,
            0 => EnableStatusOfDoor62566759934::DoorDisabled,
            value => EnableStatusOfDoor62566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OpenStatusOfDoor62566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u64),
}

impl From<u64> for OpenStatusOfDoor62566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OpenStatusOfDoor62566759934::NotAvailable,
            2 => OpenStatusOfDoor62566759934::Error,
            1 => OpenStatusOfDoor62566759934::DoorOpened,
            0 => OpenStatusOfDoor62566759934::DoorClosed,
            value => OpenStatusOfDoor62566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LockStatusOfDoor62566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u64),
}

impl From<u64> for LockStatusOfDoor62566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LockStatusOfDoor62566759934::NotAvailable,
            2 => LockStatusOfDoor62566759934::Error,
            1 => LockStatusOfDoor62566759934::Locked,
            0 => LockStatusOfDoor62566759934::Unlocked,
            value => LockStatusOfDoor62566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableStatusOfDoor52566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u64),
}

impl From<u64> for EnableStatusOfDoor52566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableStatusOfDoor52566759934::NotAvailable,
            2 => EnableStatusOfDoor52566759934::Error,
            1 => EnableStatusOfDoor52566759934::DoorEnabled,
            0 => EnableStatusOfDoor52566759934::DoorDisabled,
            value => EnableStatusOfDoor52566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OpenStatusOfDoor52566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u64),
}

impl From<u64> for OpenStatusOfDoor52566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OpenStatusOfDoor52566759934::NotAvailable,
            2 => OpenStatusOfDoor52566759934::Error,
            1 => OpenStatusOfDoor52566759934::DoorOpened,
            0 => OpenStatusOfDoor52566759934::DoorClosed,
            value => OpenStatusOfDoor52566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LockStatusOfDoor52566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u64),
}

impl From<u64> for LockStatusOfDoor52566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LockStatusOfDoor52566759934::NotAvailable,
            2 => LockStatusOfDoor52566759934::Error,
            1 => LockStatusOfDoor52566759934::Locked,
            0 => LockStatusOfDoor52566759934::Unlocked,
            value => LockStatusOfDoor52566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableStatusOfDoor42566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u64),
}

impl From<u64> for EnableStatusOfDoor42566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableStatusOfDoor42566759934::NotAvailable,
            2 => EnableStatusOfDoor42566759934::Error,
            1 => EnableStatusOfDoor42566759934::DoorEnabled,
            0 => EnableStatusOfDoor42566759934::DoorDisabled,
            value => EnableStatusOfDoor42566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OpenStatusOfDoor42566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u64),
}

impl From<u64> for OpenStatusOfDoor42566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OpenStatusOfDoor42566759934::NotAvailable,
            2 => OpenStatusOfDoor42566759934::Error,
            1 => OpenStatusOfDoor42566759934::DoorOpened,
            0 => OpenStatusOfDoor42566759934::DoorClosed,
            value => OpenStatusOfDoor42566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LockStatusOfDoor42566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u64),
}

impl From<u64> for LockStatusOfDoor42566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LockStatusOfDoor42566759934::NotAvailable,
            2 => LockStatusOfDoor42566759934::Error,
            1 => LockStatusOfDoor42566759934::Locked,
            0 => LockStatusOfDoor42566759934::Unlocked,
            value => LockStatusOfDoor42566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableStatusOfDoor32566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u64),
}

impl From<u64> for EnableStatusOfDoor32566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableStatusOfDoor32566759934::NotAvailable,
            2 => EnableStatusOfDoor32566759934::Error,
            1 => EnableStatusOfDoor32566759934::DoorEnabled,
            0 => EnableStatusOfDoor32566759934::DoorDisabled,
            value => EnableStatusOfDoor32566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OpenStatusOfDoor32566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u64),
}

impl From<u64> for OpenStatusOfDoor32566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OpenStatusOfDoor32566759934::NotAvailable,
            2 => OpenStatusOfDoor32566759934::Error,
            1 => OpenStatusOfDoor32566759934::DoorOpened,
            0 => OpenStatusOfDoor32566759934::DoorClosed,
            value => OpenStatusOfDoor32566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LockStatusOfDoor32566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u64),
}

impl From<u64> for LockStatusOfDoor32566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LockStatusOfDoor32566759934::NotAvailable,
            2 => LockStatusOfDoor32566759934::Error,
            1 => LockStatusOfDoor32566759934::Locked,
            0 => LockStatusOfDoor32566759934::Unlocked,
            value => LockStatusOfDoor32566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableStatusOfDoor22566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u64),
}

impl From<u64> for EnableStatusOfDoor22566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableStatusOfDoor22566759934::NotAvailable,
            2 => EnableStatusOfDoor22566759934::Error,
            1 => EnableStatusOfDoor22566759934::DoorEnabled,
            0 => EnableStatusOfDoor22566759934::DoorDisabled,
            value => EnableStatusOfDoor22566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OpenStatusOfDoor22566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u64),
}

impl From<u64> for OpenStatusOfDoor22566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OpenStatusOfDoor22566759934::NotAvailable,
            2 => OpenStatusOfDoor22566759934::Error,
            1 => OpenStatusOfDoor22566759934::DoorOpened,
            0 => OpenStatusOfDoor22566759934::DoorClosed,
            value => OpenStatusOfDoor22566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LockStatusOfDoor22566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u64),
}

impl From<u64> for LockStatusOfDoor22566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LockStatusOfDoor22566759934::NotAvailable,
            2 => LockStatusOfDoor22566759934::Error,
            1 => LockStatusOfDoor22566759934::Locked,
            0 => LockStatusOfDoor22566759934::Unlocked,
            value => LockStatusOfDoor22566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EnableStatusOfDoor12566759934 {
    NotAvailable,
    Error,
    DoorEnabled,
    DoorDisabled,
    XValue(u64),
}

impl From<u64> for EnableStatusOfDoor12566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EnableStatusOfDoor12566759934::NotAvailable,
            2 => EnableStatusOfDoor12566759934::Error,
            1 => EnableStatusOfDoor12566759934::DoorEnabled,
            0 => EnableStatusOfDoor12566759934::DoorDisabled,
            value => EnableStatusOfDoor12566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OpenStatusOfDoor12566759934 {
    NotAvailable,
    Error,
    DoorOpened,
    DoorClosed,
    XValue(u64),
}

impl From<u64> for OpenStatusOfDoor12566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OpenStatusOfDoor12566759934::NotAvailable,
            2 => OpenStatusOfDoor12566759934::Error,
            1 => OpenStatusOfDoor12566759934::DoorOpened,
            0 => OpenStatusOfDoor12566759934::DoorClosed,
            value => OpenStatusOfDoor12566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LockStatusOfDoor12566759934 {
    NotAvailable,
    Error,
    Locked,
    Unlocked,
    XValue(u64),
}

impl From<u64> for LockStatusOfDoor12566759934 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LockStatusOfDoor12566759934::NotAvailable,
            2 => LockStatusOfDoor12566759934::Error,
            1 => LockStatusOfDoor12566759934::Locked,
            0 => LockStatusOfDoor12566759934::Unlocked,
            value => LockStatusOfDoor12566759934::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CatalystReagentType2566757374 {
    NotAvailable,
    ErrrDtctdWthUrRgntTypeDetection,
    NtAblTDtrmneCatalystReagentType,
    To1100ReservedForSaeAssignment,
    CatalystReagentIsProper,
    CatalystReagentIsDiesel,
    CatalystReagentIsWater,
    CatalystReagentIsUrea,
    XValue(u64),
}

impl From<u64> for CatalystReagentType2566757374 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => CatalystReagentType2566757374::NotAvailable,
            14 => CatalystReagentType2566757374::ErrrDtctdWthUrRgntTypeDetection,
            13 => CatalystReagentType2566757374::NtAblTDtrmneCatalystReagentType,
            4 => CatalystReagentType2566757374::To1100ReservedForSaeAssignment,
            3 => CatalystReagentType2566757374::CatalystReagentIsProper,
            2 => CatalystReagentType2566757374::CatalystReagentIsDiesel,
            1 => CatalystReagentType2566757374::CatalystReagentIsWater,
            0 => CatalystReagentType2566757374::CatalystReagentIsUrea,
            value => CatalystReagentType2566757374::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtratment2FuelEnableActuator2566758654 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftrtratment2FuelEnableActuator2566758654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtratment2FuelEnableActuator2566758654::NotAvailable,
            2 => Aftrtratment2FuelEnableActuator2566758654::ReservedForSaeAssignment,
            1 => Aftrtratment2FuelEnableActuator2566758654::Active,
            0 => Aftrtratment2FuelEnableActuator2566758654::NotActive,
            value => Aftrtratment2FuelEnableActuator2566758654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtratment2RegenerationStatus2566758654 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftrtratment2RegenerationStatus2566758654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtratment2RegenerationStatus2566758654::NotAvailable,
            2 => Aftrtratment2RegenerationStatus2566758654::ReservedForSaeAssignment,
            1 => Aftrtratment2RegenerationStatus2566758654::Active,
            0 => Aftrtratment2RegenerationStatus2566758654::NotActive,
            value => Aftrtratment2RegenerationStatus2566758654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftertreatment2Ignt2566758654 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftertreatment2Ignt2566758654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftertreatment2Ignt2566758654::NotAvailable,
            2 => Aftertreatment2Ignt2566758654::ReservedForSaeAssignment,
            1 => Aftertreatment2Ignt2566758654::Active,
            0 => Aftertreatment2Ignt2566758654::NotActive,
            value => Aftertreatment2Ignt2566758654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtratment1FuelEnableActuator2566758910 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftrtratment1FuelEnableActuator2566758910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtratment1FuelEnableActuator2566758910::NotAvailable,
            2 => Aftrtratment1FuelEnableActuator2566758910::ReservedForSaeAssignment,
            1 => Aftrtratment1FuelEnableActuator2566758910::Active,
            0 => Aftrtratment1FuelEnableActuator2566758910::NotActive,
            value => Aftrtratment1FuelEnableActuator2566758910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtratment1RegenerationStatus2566758910 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftrtratment1RegenerationStatus2566758910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtratment1RegenerationStatus2566758910::NotAvailable,
            2 => Aftrtratment1RegenerationStatus2566758910::ReservedForSaeAssignment,
            1 => Aftrtratment1RegenerationStatus2566758910::Active,
            0 => Aftrtratment1RegenerationStatus2566758910::NotActive,
            value => Aftrtratment1RegenerationStatus2566758910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftertreatment1Ignt2566758910 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftertreatment1Ignt2566758910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftertreatment1Ignt2566758910::NotAvailable,
            2 => Aftertreatment1Ignt2566758910::ReservedForSaeAssignment,
            1 => Aftertreatment1Ignt2566758910::Active,
            0 => Aftertreatment1Ignt2566758910::NotActive,
            value => Aftertreatment1Ignt2566758910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtreatment2AirEnableActuator2566758142 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftrtreatment2AirEnableActuator2566758142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtreatment2AirEnableActuator2566758142::NotAvailable,
            2 => Aftrtreatment2AirEnableActuator2566758142::ReservedForSaeAssignment,
            1 => Aftrtreatment2AirEnableActuator2566758142::Active,
            0 => Aftrtreatment2AirEnableActuator2566758142::NotActive,
            value => Aftrtreatment2AirEnableActuator2566758142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftertreatment2PurgeAirActuator2566758142 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftertreatment2PurgeAirActuator2566758142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftertreatment2PurgeAirActuator2566758142::NotAvailable,
            2 => Aftertreatment2PurgeAirActuator2566758142::ReservedForSaeAssignment,
            1 => Aftertreatment2PurgeAirActuator2566758142::Active,
            0 => Aftertreatment2PurgeAirActuator2566758142::NotActive,
            value => Aftertreatment2PurgeAirActuator2566758142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt2AtmzationAirActuator2566758142 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt2AtmzationAirActuator2566758142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt2AtmzationAirActuator2566758142::NotAvailable,
            2 => Aftrtrtmnt2AtmzationAirActuator2566758142::ReservedForSaeAssignment,
            1 => Aftrtrtmnt2AtmzationAirActuator2566758142::Active,
            0 => Aftrtrtmnt2AtmzationAirActuator2566758142::NotActive,
            value => Aftrtrtmnt2AtmzationAirActuator2566758142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftertreatment2AirSystemRelay2566758142 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftertreatment2AirSystemRelay2566758142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftertreatment2AirSystemRelay2566758142::NotAvailable,
            2 => Aftertreatment2AirSystemRelay2566758142::ReservedForSaeAssignment,
            1 => Aftertreatment2AirSystemRelay2566758142::Active,
            0 => Aftertreatment2AirSystemRelay2566758142::NotActive,
            value => Aftertreatment2AirSystemRelay2566758142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtreatment1AirEnableActuator2566758398 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftrtreatment1AirEnableActuator2566758398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtreatment1AirEnableActuator2566758398::NotAvailable,
            2 => Aftrtreatment1AirEnableActuator2566758398::ReservedForSaeAssignment,
            1 => Aftrtreatment1AirEnableActuator2566758398::Active,
            0 => Aftrtreatment1AirEnableActuator2566758398::NotActive,
            value => Aftrtreatment1AirEnableActuator2566758398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftertreatment1PurgeAirActuator2566758398 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftertreatment1PurgeAirActuator2566758398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftertreatment1PurgeAirActuator2566758398::NotAvailable,
            2 => Aftertreatment1PurgeAirActuator2566758398::ReservedForSaeAssignment,
            1 => Aftertreatment1PurgeAirActuator2566758398::Active,
            0 => Aftertreatment1PurgeAirActuator2566758398::NotActive,
            value => Aftertreatment1PurgeAirActuator2566758398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt1AtmzationAirActuator2566758398 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt1AtmzationAirActuator2566758398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt1AtmzationAirActuator2566758398::NotAvailable,
            2 => Aftrtrtmnt1AtmzationAirActuator2566758398::ReservedForSaeAssignment,
            1 => Aftrtrtmnt1AtmzationAirActuator2566758398::Active,
            0 => Aftrtrtmnt1AtmzationAirActuator2566758398::NotActive,
            value => Aftrtrtmnt1AtmzationAirActuator2566758398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftertreatment1AirSystemRelay2566758398 {
    NotAvailable,
    ReservedForSaeAssignment,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for Aftertreatment1AirSystemRelay2566758398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftertreatment1AirSystemRelay2566758398::NotAvailable,
            2 => Aftertreatment1AirSystemRelay2566758398::ReservedForSaeAssignment,
            1 => Aftertreatment1AirSystemRelay2566758398::Active,
            0 => Aftertreatment1AirSystemRelay2566758398::NotActive,
            value => Aftertreatment1AirSystemRelay2566758398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl9CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl9CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl9CombustionStatus2364544766::NotAvailable,
            2 => EngCyl9CombustionStatus2364544766::Error,
            1 => EngCyl9CombustionStatus2364544766::CombustionExists,
            0 => EngCyl9CombustionStatus2364544766::NoCombustion,
            value => EngCyl9CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl8CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl8CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl8CombustionStatus2364544766::NotAvailable,
            2 => EngCyl8CombustionStatus2364544766::Error,
            1 => EngCyl8CombustionStatus2364544766::CombustionExists,
            0 => EngCyl8CombustionStatus2364544766::NoCombustion,
            value => EngCyl8CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl7CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl7CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl7CombustionStatus2364544766::NotAvailable,
            2 => EngCyl7CombustionStatus2364544766::Error,
            1 => EngCyl7CombustionStatus2364544766::CombustionExists,
            0 => EngCyl7CombustionStatus2364544766::NoCombustion,
            value => EngCyl7CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl6CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl6CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl6CombustionStatus2364544766::NotAvailable,
            2 => EngCyl6CombustionStatus2364544766::Error,
            1 => EngCyl6CombustionStatus2364544766::CombustionExists,
            0 => EngCyl6CombustionStatus2364544766::NoCombustion,
            value => EngCyl6CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl5CombustionStatus2364544766 {
    CombustionExists,
    NoCombustion,
    NotAvailable,
    Error,
    XValue(u64),
}

impl From<u64> for EngCyl5CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EngCyl5CombustionStatus2364544766::CombustionExists,
            0 => EngCyl5CombustionStatus2364544766::NoCombustion,
            3 => EngCyl5CombustionStatus2364544766::NotAvailable,
            2 => EngCyl5CombustionStatus2364544766::Error,
            value => EngCyl5CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl4CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl4CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl4CombustionStatus2364544766::NotAvailable,
            2 => EngCyl4CombustionStatus2364544766::Error,
            1 => EngCyl4CombustionStatus2364544766::CombustionExists,
            0 => EngCyl4CombustionStatus2364544766::NoCombustion,
            value => EngCyl4CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl3CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl3CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl3CombustionStatus2364544766::NotAvailable,
            2 => EngCyl3CombustionStatus2364544766::Error,
            1 => EngCyl3CombustionStatus2364544766::CombustionExists,
            0 => EngCyl3CombustionStatus2364544766::NoCombustion,
            value => EngCyl3CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl2CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl2CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl2CombustionStatus2364544766::NotAvailable,
            2 => EngCyl2CombustionStatus2364544766::Error,
            1 => EngCyl2CombustionStatus2364544766::CombustionExists,
            0 => EngCyl2CombustionStatus2364544766::NoCombustion,
            value => EngCyl2CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl24CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl24CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl24CombustionStatus2364544766::NotAvailable,
            2 => EngCyl24CombustionStatus2364544766::Error,
            1 => EngCyl24CombustionStatus2364544766::CombustionExists,
            0 => EngCyl24CombustionStatus2364544766::NoCombustion,
            value => EngCyl24CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl23CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl23CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl23CombustionStatus2364544766::NotAvailable,
            2 => EngCyl23CombustionStatus2364544766::Error,
            1 => EngCyl23CombustionStatus2364544766::CombustionExists,
            0 => EngCyl23CombustionStatus2364544766::NoCombustion,
            value => EngCyl23CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl22CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl22CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl22CombustionStatus2364544766::NotAvailable,
            2 => EngCyl22CombustionStatus2364544766::Error,
            1 => EngCyl22CombustionStatus2364544766::CombustionExists,
            0 => EngCyl22CombustionStatus2364544766::NoCombustion,
            value => EngCyl22CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl21CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl21CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl21CombustionStatus2364544766::NotAvailable,
            2 => EngCyl21CombustionStatus2364544766::Error,
            1 => EngCyl21CombustionStatus2364544766::CombustionExists,
            0 => EngCyl21CombustionStatus2364544766::NoCombustion,
            value => EngCyl21CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl20CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl20CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl20CombustionStatus2364544766::NotAvailable,
            2 => EngCyl20CombustionStatus2364544766::Error,
            1 => EngCyl20CombustionStatus2364544766::CombustionExists,
            0 => EngCyl20CombustionStatus2364544766::NoCombustion,
            value => EngCyl20CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl1CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl1CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl1CombustionStatus2364544766::NotAvailable,
            2 => EngCyl1CombustionStatus2364544766::Error,
            1 => EngCyl1CombustionStatus2364544766::CombustionExists,
            0 => EngCyl1CombustionStatus2364544766::NoCombustion,
            value => EngCyl1CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl19CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl19CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl19CombustionStatus2364544766::NotAvailable,
            2 => EngCyl19CombustionStatus2364544766::Error,
            1 => EngCyl19CombustionStatus2364544766::CombustionExists,
            0 => EngCyl19CombustionStatus2364544766::NoCombustion,
            value => EngCyl19CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl18CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl18CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl18CombustionStatus2364544766::NotAvailable,
            2 => EngCyl18CombustionStatus2364544766::Error,
            1 => EngCyl18CombustionStatus2364544766::CombustionExists,
            0 => EngCyl18CombustionStatus2364544766::NoCombustion,
            value => EngCyl18CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl17CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl17CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl17CombustionStatus2364544766::NotAvailable,
            2 => EngCyl17CombustionStatus2364544766::Error,
            1 => EngCyl17CombustionStatus2364544766::CombustionExists,
            0 => EngCyl17CombustionStatus2364544766::NoCombustion,
            value => EngCyl17CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl16CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl16CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl16CombustionStatus2364544766::NotAvailable,
            2 => EngCyl16CombustionStatus2364544766::Error,
            1 => EngCyl16CombustionStatus2364544766::CombustionExists,
            0 => EngCyl16CombustionStatus2364544766::NoCombustion,
            value => EngCyl16CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl15CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl15CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl15CombustionStatus2364544766::NotAvailable,
            2 => EngCyl15CombustionStatus2364544766::Error,
            1 => EngCyl15CombustionStatus2364544766::CombustionExists,
            0 => EngCyl15CombustionStatus2364544766::NoCombustion,
            value => EngCyl15CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl14CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl14CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl14CombustionStatus2364544766::NotAvailable,
            2 => EngCyl14CombustionStatus2364544766::Error,
            1 => EngCyl14CombustionStatus2364544766::CombustionExists,
            0 => EngCyl14CombustionStatus2364544766::NoCombustion,
            value => EngCyl14CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl13CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl13CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl13CombustionStatus2364544766::NotAvailable,
            2 => EngCyl13CombustionStatus2364544766::Error,
            1 => EngCyl13CombustionStatus2364544766::CombustionExists,
            0 => EngCyl13CombustionStatus2364544766::NoCombustion,
            value => EngCyl13CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl12CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl12CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl12CombustionStatus2364544766::NotAvailable,
            2 => EngCyl12CombustionStatus2364544766::Error,
            1 => EngCyl12CombustionStatus2364544766::CombustionExists,
            0 => EngCyl12CombustionStatus2364544766::NoCombustion,
            value => EngCyl12CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl11CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl11CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl11CombustionStatus2364544766::NotAvailable,
            2 => EngCyl11CombustionStatus2364544766::Error,
            1 => EngCyl11CombustionStatus2364544766::CombustionExists,
            0 => EngCyl11CombustionStatus2364544766::NoCombustion,
            value => EngCyl11CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCyl10CombustionStatus2364544766 {
    NotAvailable,
    Error,
    CombustionExists,
    NoCombustion,
    XValue(u64),
}

impl From<u64> for EngCyl10CombustionStatus2364544766 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCyl10CombustionStatus2364544766::NotAvailable,
            2 => EngCyl10CombustionStatus2364544766::Error,
            1 => EngCyl10CombustionStatus2364544766::CombustionExists,
            0 => EngCyl10CombustionStatus2364544766::NoCombustion,
            value => EngCyl10CombustionStatus2364544766::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RqGenOverallPowerFactorLagging2364544510 {
    NotAvailable,
    Error,
    Lagging,
    Leading,
    XValue(u64),
}

impl From<u64> for RqGenOverallPowerFactorLagging2364544510 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RqGenOverallPowerFactorLagging2364544510::NotAvailable,
            2 => RqGenOverallPowerFactorLagging2364544510::Error,
            1 => RqGenOverallPowerFactorLagging2364544510::Lagging,
            0 => RqGenOverallPowerFactorLagging2364544510::Leading,
            value => RqGenOverallPowerFactorLagging2364544510::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BladeRotationAngleFigureOfMerit2364544254 {
    AngleNotAvailable,
    AngleFailed,
    AngleDegraded,
    AngleFullyFunctional,
    XValue(u64),
}

impl From<u64> for BladeRotationAngleFigureOfMerit2364544254 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => BladeRotationAngleFigureOfMerit2364544254::AngleNotAvailable,
            2 => BladeRotationAngleFigureOfMerit2364544254::AngleFailed,
            1 => BladeRotationAngleFigureOfMerit2364544254::AngleDegraded,
            0 => BladeRotationAngleFigureOfMerit2364544254::AngleFullyFunctional,
            value => BladeRotationAngleFigureOfMerit2364544254::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RelBladeHeightFigureOfMerit2364544254 {
    HeightNotAvailable,
    HeightFailed,
    HeightDegraded,
    HeightFullyFunctional,
    XValue(u64),
}

impl From<u64> for RelBladeHeightFigureOfMerit2364544254 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RelBladeHeightFigureOfMerit2364544254::HeightNotAvailable,
            2 => RelBladeHeightFigureOfMerit2364544254::HeightFailed,
            1 => RelBladeHeightFigureOfMerit2364544254::HeightDegraded,
            0 => RelBladeHeightFigureOfMerit2364544254::HeightFullyFunctional,
            value => RelBladeHeightFigureOfMerit2364544254::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleType2349006590 {
    DollyAxle,
    TowingOrTowedVehicle,
    XValue(u64),
}

impl From<u64> for VehicleType2349006590 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleType2349006590::DollyAxle,
            0 => VehicleType2349006590::TowingOrTowedVehicle,
            value => VehicleType2349006590::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BrakeLightSwitch2349006590 {
    SwitchOn,
    SwitchOff,
    XValue(u64),
}

impl From<u64> for BrakeLightSwitch2349006590 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => BrakeLightSwitch2349006590::SwitchOn,
            0 => BrakeLightSwitch2349006590::SwitchOff,
            value => BrakeLightSwitch2349006590::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AsrEngineControlActive2349006590 {
    NotAvailable,
    Reserved,
    AsrEngineControlActive,
    AsrEngnCntrlPassiveButInstalled,
    XValue(u64),
}

impl From<u64> for AsrEngineControlActive2349006590 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AsrEngineControlActive2349006590::NotAvailable,
            2 => AsrEngineControlActive2349006590::Reserved,
            1 => AsrEngineControlActive2349006590::AsrEngineControlActive,
            0 => AsrEngineControlActive2349006590::AsrEngnCntrlPassiveButInstalled,
            value => AsrEngineControlActive2349006590::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AsrBreakControlActive2349006590 {
    Active,
    PassiveButInstalled,
    XValue(u64),
}

impl From<u64> for AsrBreakControlActive2349006590 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => AsrBreakControlActive2349006590::Active,
            0 => AsrBreakControlActive2349006590::PassiveButInstalled,
            value => AsrBreakControlActive2349006590::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleRetarderCtrlActive2349006590 {
    Active,
    Passive,
    XValue(u64),
}

impl From<u64> for VehicleRetarderCtrlActive2349006590 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleRetarderCtrlActive2349006590::Active,
            0 => VehicleRetarderCtrlActive2349006590::Passive,
            value => VehicleRetarderCtrlActive2349006590::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleAbsActive2349006590 {
    Active,
    PassivButInstalled,
    XValue(u64),
}

impl From<u64> for VehicleAbsActive2349006590 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleAbsActive2349006590::Active,
            0 => VehicleAbsActive2349006590::PassivButInstalled,
            value => VehicleAbsActive2349006590::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PneumaticControlLine2566834686 {
    TowingVehWithPnCtrlLine,
    TowingVehWithoutPnCtrlLine,
    XValue(u64),
}

impl From<u64> for PneumaticControlLine2566834686 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => PneumaticControlLine2566834686::TowingVehWithPnCtrlLine,
            0 => PneumaticControlLine2566834686::TowingVehWithoutPnCtrlLine,
            value => PneumaticControlLine2566834686::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AbsOffroadRequest2566834686 {
    AbsOffRoadSwitchOn,
    AbsOffRoadSwitchOff,
    XValue(u64),
}

impl From<u64> for AbsOffroadRequest2566834686 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => AbsOffroadRequest2566834686::AbsOffRoadSwitchOn,
            0 => AbsOffroadRequest2566834686::AbsOffRoadSwitchOff,
            value => AbsOffroadRequest2566834686::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TwoElCircuitsBrakeDemand2566834686 {
    TwoElCircuitBrakeAvailable,
    OneElCircuitBrakeAvailable,
    XValue(u64),
}

impl From<u64> for TwoElCircuitsBrakeDemand2566834686 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TwoElCircuitsBrakeDemand2566834686::TwoElCircuitBrakeAvailable,
            0 => TwoElCircuitsBrakeDemand2566834686::OneElCircuitBrakeAvailable,
            value => TwoElCircuitsBrakeDemand2566834686::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleRetarderCtrlActive2566834686 {
    Active,
    Passive,
    XValue(u64),
}

impl From<u64> for VehicleRetarderCtrlActive2566834686 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleRetarderCtrlActive2566834686::Active,
            0 => VehicleRetarderCtrlActive2566834686::Passive,
            value => VehicleRetarderCtrlActive2566834686::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SupplyLineBrakingRequest2550398718 {
    SupplyLineBrakingRequest,
    NoSupplyLineBrakingRequest,
    XValue(u64),
}

impl From<u64> for SupplyLineBrakingRequest2550398718 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SupplyLineBrakingRequest2550398718::SupplyLineBrakingRequest,
            0 => SupplyLineBrakingRequest2550398718::NoSupplyLineBrakingRequest,
            value => SupplyLineBrakingRequest2550398718::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VdcActive2550398718 {
    Active,
    PassiveButInstalled,
    XValue(u64),
}

impl From<u64> for VdcActive2550398718 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VdcActive2550398718::Active,
            0 => VdcActive2550398718::PassiveButInstalled,
            value => VdcActive2550398718::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AutomTowedVehBreakActive2550398718 {
    Active,
    Passive,
    XValue(u64),
}

impl From<u64> for AutomTowedVehBreakActive2550398718 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => AutomTowedVehBreakActive2550398718::Active,
            0 => AutomTowedVehBreakActive2550398718::Passive,
            value => AutomTowedVehBreakActive2550398718::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleServiceBrakeActive2550398718 {
    Active,
    Passive,
    XValue(u64),
}

impl From<u64> for VehicleServiceBrakeActive2550398718 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleServiceBrakeActive2550398718::Active,
            0 => VehicleServiceBrakeActive2550398718::Passive,
            value => VehicleServiceBrakeActive2550398718::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleRetarderCtrlActive2550398718 {
    Active,
    Passive,
    XValue(u64),
}

impl From<u64> for VehicleRetarderCtrlActive2550398718 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleRetarderCtrlActive2550398718::Active,
            0 => VehicleRetarderCtrlActive2550398718::Passive,
            value => VehicleRetarderCtrlActive2550398718::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleAbsActive2550398718 {
    Active,
    PassivButInstalled,
    XValue(u64),
}

impl From<u64> for VehicleAbsActive2550398718 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleAbsActive2550398718::Active,
            0 => VehicleAbsActive2550398718::PassivButInstalled,
            value => VehicleAbsActive2550398718::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SupplyLineBrakingRequest2566833406 {
    SupplyLineBrakingRequest,
    NoSupplyLineBrakingRequest,
    XValue(u64),
}

impl From<u64> for SupplyLineBrakingRequest2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SupplyLineBrakingRequest2566833406::SupplyLineBrakingRequest,
            0 => SupplyLineBrakingRequest2566833406::NoSupplyLineBrakingRequest,
            value => SupplyLineBrakingRequest2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LoadingRampApproachAssist2566833406 {
    AssistanceActive,
    AssistanceNotActive,
    XValue(u64),
}

impl From<u64> for LoadingRampApproachAssist2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => LoadingRampApproachAssist2566833406::AssistanceActive,
            0 => LoadingRampApproachAssist2566833406::AssistanceNotActive,
            value => LoadingRampApproachAssist2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SpringBrakeEngaged2566833406 {
    VehicleSpringBrakeIsEngaged,
    VehicleSpringBrakeIsReleased,
    XValue(u64),
}

impl From<u64> for SpringBrakeEngaged2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SpringBrakeEngaged2566833406::VehicleSpringBrakeIsEngaged,
            0 => SpringBrakeEngaged2566833406::VehicleSpringBrakeIsReleased,
            value => SpringBrakeEngaged2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ElectrLoadPropFunc2566833406 {
    VehicleWithElLoadProportion,
    VehicleWithoutElLoadProport,
    XValue(u64),
}

impl From<u64> for ElectrLoadPropFunc2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => ElectrLoadPropFunc2566833406::VehicleWithElLoadProportion,
            0 => ElectrLoadPropFunc2566833406::VehicleWithoutElLoadProport,
            value => ElectrLoadPropFunc2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SpringBrakeInstalled2566833406 {
    VehicleWithSpringBrakes,
    VehicleWithoutSpringBrakes,
    XValue(u64),
}

impl From<u64> for SpringBrakeInstalled2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SpringBrakeInstalled2566833406::VehicleWithSpringBrakes,
            0 => SpringBrakeInstalled2566833406::VehicleWithoutSpringBrakes,
            value => SpringBrakeInstalled2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleType2566833406 {
    DollyAxle,
    TowingOrTowedVehicle,
    XValue(u64),
}

impl From<u64> for VehicleType2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleType2566833406::DollyAxle,
            0 => VehicleType2566833406::TowingOrTowedVehicle,
            value => VehicleType2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ElecSupplyOfNonBrakingSys2566833406 {
    SupplySwitchedOn,
    SupplySwitchedOff,
    XValue(u64),
}

impl From<u64> for ElecSupplyOfNonBrakingSys2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => ElecSupplyOfNonBrakingSys2566833406::SupplySwitchedOn,
            0 => ElecSupplyOfNonBrakingSys2566833406::SupplySwitchedOff,
            value => ElecSupplyOfNonBrakingSys2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AmberWarningSignalReq2566833406 {
    TowedVehicleFailureIndicated,
    NoTowedVehicleFailureIndicat,
    XValue(u64),
}

impl From<u64> for AmberWarningSignalReq2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => AmberWarningSignalReq2566833406::TowedVehicleFailureIndicated,
            0 => AmberWarningSignalReq2566833406::NoTowedVehicleFailureIndicat,
            value => AmberWarningSignalReq2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RedWarningSignalRequest2566833406 {
    TowedVehicleFailureIndicated,
    NoTowedVehicleFailureIndicat,
    XValue(u64),
}

impl From<u64> for RedWarningSignalRequest2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => RedWarningSignalRequest2566833406::TowedVehicleFailureIndicated,
            0 => RedWarningSignalRequest2566833406::NoTowedVehicleFailureIndicat,
            value => RedWarningSignalRequest2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleElectrSupplySuff2566833406 {
    VehicleElSupplySufficient,
    VehicleElSupplyInsufficient,
    XValue(u64),
}

impl From<u64> for VehicleElectrSupplySuff2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleElectrSupplySuff2566833406::VehicleElSupplySufficient,
            0 => VehicleElectrSupplySuff2566833406::VehicleElSupplyInsufficient,
            value => VehicleElectrSupplySuff2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AutomTowedVehBreakActive2566833406 {
    Active,
    Passive,
    XValue(u64),
}

impl From<u64> for AutomTowedVehBreakActive2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => AutomTowedVehBreakActive2566833406::Active,
            0 => AutomTowedVehBreakActive2566833406::Passive,
            value => AutomTowedVehBreakActive2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleServiceBrakeActive2566833406 {
    Active,
    Passive,
    XValue(u64),
}

impl From<u64> for VehicleServiceBrakeActive2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleServiceBrakeActive2566833406::Active,
            0 => VehicleServiceBrakeActive2566833406::Passive,
            value => VehicleServiceBrakeActive2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleRetarderCtrlActive2566833406 {
    Active,
    Passive,
    XValue(u64),
}

impl From<u64> for VehicleRetarderCtrlActive2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleRetarderCtrlActive2566833406::Active,
            0 => VehicleRetarderCtrlActive2566833406::Passive,
            value => VehicleRetarderCtrlActive2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleAbsActive2566833406 {
    Active,
    PassivButInstalled,
    XValue(u64),
}

impl From<u64> for VehicleAbsActive2566833406 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleAbsActive2566833406::Active,
            0 => VehicleAbsActive2566833406::PassivButInstalled,
            value => VehicleAbsActive2566833406::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TyreWheelIdentTemp22365507326 {
    AxlePosition15,
    AxlePosition14,
    AxlePosition13,
    AxlePosition12,
    AxlePosition11,
    AxlePosition10,
    AxlePosition9,
    AxlePosition8,
    AxlePosition7,
    AxlePosition6,
    AxlePosition5,
    AxlePosition4,
    AxlePosition3,
    AxlePosition2,
    AxlePosition1,
    AxlePositionNotIdentified,
    XValue(u64),
}

impl From<u64> for TyreWheelIdentTemp22365507326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => TyreWheelIdentTemp22365507326::AxlePosition15,
            14 => TyreWheelIdentTemp22365507326::AxlePosition14,
            13 => TyreWheelIdentTemp22365507326::AxlePosition13,
            12 => TyreWheelIdentTemp22365507326::AxlePosition12,
            11 => TyreWheelIdentTemp22365507326::AxlePosition11,
            10 => TyreWheelIdentTemp22365507326::AxlePosition10,
            9 => TyreWheelIdentTemp22365507326::AxlePosition9,
            8 => TyreWheelIdentTemp22365507326::AxlePosition8,
            7 => TyreWheelIdentTemp22365507326::AxlePosition7,
            6 => TyreWheelIdentTemp22365507326::AxlePosition6,
            5 => TyreWheelIdentTemp22365507326::AxlePosition5,
            4 => TyreWheelIdentTemp22365507326::AxlePosition4,
            3 => TyreWheelIdentTemp22365507326::AxlePosition3,
            2 => TyreWheelIdentTemp22365507326::AxlePosition2,
            1 => TyreWheelIdentTemp22365507326::AxlePosition1,
            0 => TyreWheelIdentTemp22365507326::AxlePositionNotIdentified,
            value => TyreWheelIdentTemp22365507326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TyreWheelIdentTemp12365507326 {
    WheelPosition15,
    WheelPosition14,
    WheelPosition13,
    WheelPosition12,
    WheelPosition11,
    WheelPosition10,
    WheelPosition9,
    WheelPosition8,
    WheelPosition7,
    WheelPosition6,
    WheelPosition5,
    WheelPosition4,
    WheelPosition3,
    WheelPosition2,
    WheelPosition1,
    WheelPositionNotIdentified,
    XValue(u64),
}

impl From<u64> for TyreWheelIdentTemp12365507326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => TyreWheelIdentTemp12365507326::WheelPosition15,
            14 => TyreWheelIdentTemp12365507326::WheelPosition14,
            13 => TyreWheelIdentTemp12365507326::WheelPosition13,
            12 => TyreWheelIdentTemp12365507326::WheelPosition12,
            11 => TyreWheelIdentTemp12365507326::WheelPosition11,
            10 => TyreWheelIdentTemp12365507326::WheelPosition10,
            9 => TyreWheelIdentTemp12365507326::WheelPosition9,
            8 => TyreWheelIdentTemp12365507326::WheelPosition8,
            7 => TyreWheelIdentTemp12365507326::WheelPosition7,
            6 => TyreWheelIdentTemp12365507326::WheelPosition6,
            5 => TyreWheelIdentTemp12365507326::WheelPosition5,
            4 => TyreWheelIdentTemp12365507326::WheelPosition4,
            3 => TyreWheelIdentTemp12365507326::WheelPosition3,
            2 => TyreWheelIdentTemp12365507326::WheelPosition2,
            1 => TyreWheelIdentTemp12365507326::WheelPosition1,
            0 => TyreWheelIdentTemp12365507326::WheelPositionNotIdentified,
            value => TyreWheelIdentTemp12365507326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TyreWheelIdentPressure22365507326 {
    AxlePosition15,
    AxlePosition14,
    AxlePosition13,
    AxlePosition12,
    AxlePosition11,
    AxlePosition10,
    AxlePosition9,
    AxlePosition8,
    AxlePosition7,
    AxlePosition6,
    AxlePosition5,
    AxlePosition4,
    AxlePosition3,
    AxlePosition2,
    AxlePosition1,
    AxlePositionNotIdentified,
    XValue(u64),
}

impl From<u64> for TyreWheelIdentPressure22365507326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => TyreWheelIdentPressure22365507326::AxlePosition15,
            14 => TyreWheelIdentPressure22365507326::AxlePosition14,
            13 => TyreWheelIdentPressure22365507326::AxlePosition13,
            12 => TyreWheelIdentPressure22365507326::AxlePosition12,
            11 => TyreWheelIdentPressure22365507326::AxlePosition11,
            10 => TyreWheelIdentPressure22365507326::AxlePosition10,
            9 => TyreWheelIdentPressure22365507326::AxlePosition9,
            8 => TyreWheelIdentPressure22365507326::AxlePosition8,
            7 => TyreWheelIdentPressure22365507326::AxlePosition7,
            6 => TyreWheelIdentPressure22365507326::AxlePosition6,
            5 => TyreWheelIdentPressure22365507326::AxlePosition5,
            4 => TyreWheelIdentPressure22365507326::AxlePosition4,
            3 => TyreWheelIdentPressure22365507326::AxlePosition3,
            2 => TyreWheelIdentPressure22365507326::AxlePosition2,
            1 => TyreWheelIdentPressure22365507326::AxlePosition1,
            0 => TyreWheelIdentPressure22365507326::AxlePositionNotIdentified,
            value => TyreWheelIdentPressure22365507326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TyreWheelIdentPressure12365507326 {
    WheelPosition15,
    WheelPosition14,
    WheelPosition13,
    WheelPosition12,
    WheelPosition11,
    WheelPosition10,
    WheelPosition9,
    WheelPosition8,
    WheelPosition7,
    WheelPosition6,
    WheelPosition5,
    WheelPosition4,
    WheelPosition3,
    WheelPosition2,
    WheelPosition1,
    WheelPositionNotIdentified,
    XValue(u64),
}

impl From<u64> for TyreWheelIdentPressure12365507326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => TyreWheelIdentPressure12365507326::WheelPosition15,
            14 => TyreWheelIdentPressure12365507326::WheelPosition14,
            13 => TyreWheelIdentPressure12365507326::WheelPosition13,
            12 => TyreWheelIdentPressure12365507326::WheelPosition12,
            11 => TyreWheelIdentPressure12365507326::WheelPosition11,
            10 => TyreWheelIdentPressure12365507326::WheelPosition10,
            9 => TyreWheelIdentPressure12365507326::WheelPosition9,
            8 => TyreWheelIdentPressure12365507326::WheelPosition8,
            7 => TyreWheelIdentPressure12365507326::WheelPosition7,
            6 => TyreWheelIdentPressure12365507326::WheelPosition6,
            5 => TyreWheelIdentPressure12365507326::WheelPosition5,
            4 => TyreWheelIdentPressure12365507326::WheelPosition4,
            3 => TyreWheelIdentPressure12365507326::WheelPosition3,
            2 => TyreWheelIdentPressure12365507326::WheelPosition2,
            1 => TyreWheelIdentPressure12365507326::WheelPosition1,
            0 => TyreWheelIdentPressure12365507326::WheelPositionNotIdentified,
            value => TyreWheelIdentPressure12365507326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TyreWheelIdentLining22365507326 {
    AxlePosition15,
    AxlePosition14,
    AxlePosition13,
    AxlePosition12,
    AxlePosition11,
    AxlePosition10,
    AxlePosition9,
    AxlePosition8,
    AxlePosition7,
    AxlePosition6,
    AxlePosition5,
    AxlePosition4,
    AxlePosition3,
    AxlePosition2,
    AxlePosition1,
    AxlePositionNotIdentified,
    XValue(u64),
}

impl From<u64> for TyreWheelIdentLining22365507326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => TyreWheelIdentLining22365507326::AxlePosition15,
            14 => TyreWheelIdentLining22365507326::AxlePosition14,
            13 => TyreWheelIdentLining22365507326::AxlePosition13,
            12 => TyreWheelIdentLining22365507326::AxlePosition12,
            11 => TyreWheelIdentLining22365507326::AxlePosition11,
            10 => TyreWheelIdentLining22365507326::AxlePosition10,
            9 => TyreWheelIdentLining22365507326::AxlePosition9,
            8 => TyreWheelIdentLining22365507326::AxlePosition8,
            7 => TyreWheelIdentLining22365507326::AxlePosition7,
            6 => TyreWheelIdentLining22365507326::AxlePosition6,
            5 => TyreWheelIdentLining22365507326::AxlePosition5,
            4 => TyreWheelIdentLining22365507326::AxlePosition4,
            3 => TyreWheelIdentLining22365507326::AxlePosition3,
            2 => TyreWheelIdentLining22365507326::AxlePosition2,
            1 => TyreWheelIdentLining22365507326::AxlePosition1,
            0 => TyreWheelIdentLining22365507326::AxlePositionNotIdentified,
            value => TyreWheelIdentLining22365507326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TyreWheelIdentLining12365507326 {
    WheelPosition15,
    WheelPosition14,
    WheelPosition13,
    WheelPosition12,
    WheelPosition11,
    WheelPosition10,
    WheelPosition9,
    WheelPosition8,
    WheelPosition7,
    WheelPosition6,
    WheelPosition5,
    WheelPosition4,
    WheelPosition3,
    WheelPosition2,
    WheelPosition1,
    WheelPositionNotIdentified,
    XValue(u64),
}

impl From<u64> for TyreWheelIdentLining12365507326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => TyreWheelIdentLining12365507326::WheelPosition15,
            14 => TyreWheelIdentLining12365507326::WheelPosition14,
            13 => TyreWheelIdentLining12365507326::WheelPosition13,
            12 => TyreWheelIdentLining12365507326::WheelPosition12,
            11 => TyreWheelIdentLining12365507326::WheelPosition11,
            10 => TyreWheelIdentLining12365507326::WheelPosition10,
            9 => TyreWheelIdentLining12365507326::WheelPosition9,
            8 => TyreWheelIdentLining12365507326::WheelPosition8,
            7 => TyreWheelIdentLining12365507326::WheelPosition7,
            6 => TyreWheelIdentLining12365507326::WheelPosition6,
            5 => TyreWheelIdentLining12365507326::WheelPosition5,
            4 => TyreWheelIdentLining12365507326::WheelPosition4,
            3 => TyreWheelIdentLining12365507326::WheelPosition3,
            2 => TyreWheelIdentLining12365507326::WheelPosition2,
            1 => TyreWheelIdentLining12365507326::WheelPosition1,
            0 => TyreWheelIdentLining12365507326::WheelPositionNotIdentified,
            value => TyreWheelIdentLining12365507326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehiclePneumSupplySuff2365507326 {
    PneumaticSupplySufficient,
    PneumaticSupplyInsufficient,
    XValue(u64),
}

impl From<u64> for VehiclePneumSupplySuff2365507326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehiclePneumSupplySuff2365507326::PneumaticSupplySufficient,
            0 => VehiclePneumSupplySuff2365507326::PneumaticSupplyInsufficient,
            value => VehiclePneumSupplySuff2365507326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BrakeTemperatureStatus2365507326 {
    BrakeTemperatureNormal,
    BrakeTemperatureOutOfRange,
    XValue(u64),
}

impl From<u64> for BrakeTemperatureStatus2365507326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => BrakeTemperatureStatus2365507326::BrakeTemperatureNormal,
            0 => BrakeTemperatureStatus2365507326::BrakeTemperatureOutOfRange,
            value => BrakeTemperatureStatus2365507326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BrakeLiningSufficient2365507326 {
    BrakeLiningsSufficient,
    BrakeLiningsInsufficient,
    XValue(u64),
}

impl From<u64> for BrakeLiningSufficient2365507326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => BrakeLiningSufficient2365507326::BrakeLiningsSufficient,
            0 => BrakeLiningSufficient2365507326::BrakeLiningsInsufficient,
            value => BrakeLiningSufficient2365507326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TyrePressureSufficient2365507326 {
    TyrePressureSufficient,
    TyrePressureInsufficient,
    XValue(u64),
}

impl From<u64> for TyrePressureSufficient2365507326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TyrePressureSufficient2365507326::TyrePressureSufficient,
            0 => TyrePressureSufficient2365507326::TyrePressureInsufficient,
            value => TyrePressureSufficient2365507326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OddRequest2565013246 {
    TakeNoAction,
    OddOn,
    OddOff,
    XValue(u64),
}

impl From<u64> for OddRequest2565013246 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OddRequest2565013246::TakeNoAction,
            1 => OddRequest2565013246::OddOn,
            0 => OddRequest2565013246::OddOff,
            value => OddRequest2565013246::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AntiTheftDeviceReq2565013246 {
    TakeNoAction,
    AntiTheftDeviceOn,
    AntiTheftDeviceOff,
    XValue(u64),
}

impl From<u64> for AntiTheftDeviceReq2565013246 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AntiTheftDeviceReq2565013246::TakeNoAction,
            1 => AntiTheftDeviceReq2565013246::AntiTheftDeviceOn,
            0 => AntiTheftDeviceReq2565013246::AntiTheftDeviceOff,
            value => AntiTheftDeviceReq2565013246::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleType2565013246 {
    DollyAxle,
    TowingOrTowedVehicle,
    XValue(u64),
}

impl From<u64> for VehicleType2565013246 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleType2565013246::DollyAxle,
            0 => VehicleType2565013246::TowingOrTowedVehicle,
            value => VehicleType2565013246::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngineTorqueMode2365480958 {
    NotAvailable,
    RemoteAccelerator,
    BrakingSystem,
    HighSpeedGovernor,
    TorqueLimiting,
    AbsControl,
    TransmissionControl,
    AsrControl,
    RoadSpeedGovernor,
    PtoGovernor,
    CruiseControl,
    AcceleratorPedalOperatorSelec,
    LowIdleGovernorNoRequestDe,
    XValue(u64),
}

impl From<u64> for EngineTorqueMode2365480958 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngineTorqueMode2365480958::NotAvailable,
            11 => EngineTorqueMode2365480958::RemoteAccelerator,
            10 => EngineTorqueMode2365480958::BrakingSystem,
            9 => EngineTorqueMode2365480958::HighSpeedGovernor,
            8 => EngineTorqueMode2365480958::TorqueLimiting,
            7 => EngineTorqueMode2365480958::AbsControl,
            6 => EngineTorqueMode2365480958::TransmissionControl,
            5 => EngineTorqueMode2365480958::AsrControl,
            4 => EngineTorqueMode2365480958::RoadSpeedGovernor,
            3 => EngineTorqueMode2365480958::PtoGovernor,
            2 => EngineTorqueMode2365480958::CruiseControl,
            1 => EngineTorqueMode2365480958::AcceleratorPedalOperatorSelec,
            0 => EngineTorqueMode2365480958::LowIdleGovernorNoRequestDe,
            value => EngineTorqueMode2365480958::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngineRunning2365480958 {
    EngineRunning,
    EngineNotRunning,
    XValue(u64),
}

impl From<u64> for EngineRunning2365480958 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EngineRunning2365480958::EngineRunning,
            0 => EngineRunning2365480958::EngineNotRunning,
            value => EngineRunning2365480958::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngineControlAllowed2365480958 {
    EngineControlAllowed,
    EngineControlNotAllowed,
    XValue(u64),
}

impl From<u64> for EngineControlAllowed2365480958 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EngineControlAllowed2365480958::EngineControlAllowed,
            0 => EngineControlAllowed2365480958::EngineControlNotAllowed,
            value => EngineControlAllowed2365480958::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ClutchIndptdPtoFeedback2566808062 {
    Engaged,
    NotEngaged,
    XValue(u64),
}

impl From<u64> for ClutchIndptdPtoFeedback2566808062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => ClutchIndptdPtoFeedback2566808062::Engaged,
            0 => ClutchIndptdPtoFeedback2566808062::NotEngaged,
            value => ClutchIndptdPtoFeedback2566808062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AccelPedalLowIdleSwitch2566808062 {
    InLowIdleCondition,
    NotInLowIdleCondition,
    XValue(u64),
}

impl From<u64> for AccelPedalLowIdleSwitch2566808062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => AccelPedalLowIdleSwitch2566808062::InLowIdleCondition,
            0 => AccelPedalLowIdleSwitch2566808062::NotInLowIdleCondition,
            value => AccelPedalLowIdleSwitch2566808062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum StarterActive2566808062 {
    StarterActive,
    StarterNotActive,
    XValue(u64),
}

impl From<u64> for StarterActive2566808062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => StarterActive2566808062::StarterActive,
            0 => StarterActive2566808062::StarterNotActive,
            value => StarterActive2566808062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TorqueConvtOilTempWarning2566808062 {
    Warning,
    Prewarning,
    NoWarning,
    XValue(u64),
}

impl From<u64> for TorqueConvtOilTempWarning2566808062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => TorqueConvtOilTempWarning2566808062::Warning,
            1 => TorqueConvtOilTempWarning2566808062::Prewarning,
            0 => TorqueConvtOilTempWarning2566808062::NoWarning,
            value => TorqueConvtOilTempWarning2566808062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PtoControlAllowed2566808062 {
    PtoControlAllowed,
    PtoControlNotAllowed,
    XValue(u64),
}

impl From<u64> for PtoControlAllowed2566808062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => PtoControlAllowed2566808062::PtoControlAllowed,
            0 => PtoControlAllowed2566808062::PtoControlNotAllowed,
            value => PtoControlAllowed2566808062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SecEngineMtdPtoFeedback2566808062 {
    LimitsActivated,
    LimitsNotActivated,
    XValue(u64),
}

impl From<u64> for SecEngineMtdPtoFeedback2566808062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SecEngineMtdPtoFeedback2566808062::LimitsActivated,
            0 => SecEngineMtdPtoFeedback2566808062::LimitsNotActivated,
            value => SecEngineMtdPtoFeedback2566808062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FirstEngineMtdPtoFeedback2566808062 {
    LimitsActivated,
    LimitsNotActivated,
    XValue(u64),
}

impl From<u64> for FirstEngineMtdPtoFeedback2566808062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => FirstEngineMtdPtoFeedback2566808062::LimitsActivated,
            0 => FirstEngineMtdPtoFeedback2566808062::LimitsNotActivated,
            value => FirstEngineMtdPtoFeedback2566808062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SecClutchDptdPtoFeedback2566808062 {
    Engaged,
    NotEngaged,
    XValue(u64),
}

impl From<u64> for SecClutchDptdPtoFeedback2566808062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SecClutchDptdPtoFeedback2566808062::Engaged,
            0 => SecClutchDptdPtoFeedback2566808062::NotEngaged,
            value => SecClutchDptdPtoFeedback2566808062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FirstClutchDpdtPtoFeedback2566808062 {
    Engaged,
    NotEngaged,
    XValue(u64),
}

impl From<u64> for FirstClutchDpdtPtoFeedback2566808062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => FirstClutchDpdtPtoFeedback2566808062::Engaged,
            0 => FirstClutchDpdtPtoFeedback2566808062::NotEngaged,
            value => FirstClutchDpdtPtoFeedback2566808062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FuelLevelWarning2566808574 {
    FuelLevelWarningOn,
    FuelLevelWarningOff,
    XValue(u64),
}

impl From<u64> for FuelLevelWarning2566808574 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => FuelLevelWarning2566808574::FuelLevelWarningOn,
            0 => FuelLevelWarning2566808574::FuelLevelWarningOff,
            value => FuelLevelWarning2566808574::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngineOilPressureWarning2566808574 {
    Warning,
    NoWarning,
    XValue(u64),
}

impl From<u64> for EngineOilPressureWarning2566808574 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EngineOilPressureWarning2566808574::Warning,
            0 => EngineOilPressureWarning2566808574::NoWarning,
            value => EngineOilPressureWarning2566808574::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngineCoolantTempWarning2566808574 {
    Warning,
    Prewarning,
    NoWarning,
    XValue(u64),
}

impl From<u64> for EngineCoolantTempWarning2566808574 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => EngineCoolantTempWarning2566808574::Warning,
            1 => EngineCoolantTempWarning2566808574::Prewarning,
            0 => EngineCoolantTempWarning2566808574::NoWarning,
            value => EngineCoolantTempWarning2566808574::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleType2564947710 {
    DollyAxle,
    TowingOrTowedVehicle,
    XValue(u64),
}

impl From<u64> for VehicleType2564947710 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => VehicleType2564947710::DollyAxle,
            0 => VehicleType2564947710::TowingOrTowedVehicle,
            value => VehicleType2564947710::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AntiTheftDeviceStatus2566834430 {
    AntiTheftDeviceOn,
    AntiTheftDeviceOff,
    XValue(u64),
}

impl From<u64> for AntiTheftDeviceStatus2566834430 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => AntiTheftDeviceStatus2566834430::AntiTheftDeviceOn,
            0 => AntiTheftDeviceStatus2566834430::AntiTheftDeviceOff,
            value => AntiTheftDeviceStatus2566834430::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OddStatus2566834430 {
    OddActive,
    OddInactive,
    XValue(u64),
}

impl From<u64> for OddStatus2566834430 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => OddStatus2566834430::OddActive,
            0 => OddStatus2566834430::OddInactive,
            value => OddStatus2566834430::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SecEngineMtdPtoSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u64),
}

impl From<u64> for SecEngineMtdPtoSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SecEngineMtdPtoSwitch2566808318::SwitchedOn,
            0 => SecEngineMtdPtoSwitch2566808318::SwitchedOff,
            value => SecEngineMtdPtoSwitch2566808318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SecClutchDpdtPtoSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u64),
}

impl From<u64> for SecClutchDpdtPtoSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SecClutchDpdtPtoSwitch2566808318::SwitchedOn,
            0 => SecClutchDpdtPtoSwitch2566808318::SwitchedOff,
            value => SecClutchDpdtPtoSwitch2566808318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FirstClutchDpdtPtoSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u64),
}

impl From<u64> for FirstClutchDpdtPtoSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => FirstClutchDpdtPtoSwitch2566808318::SwitchedOn,
            0 => FirstClutchDpdtPtoSwitch2566808318::SwitchedOff,
            value => FirstClutchDpdtPtoSwitch2566808318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OperatingPanelActive2566808318 {
    OperatingPanelActive,
    OperatingPanelNotActive,
    XValue(u64),
}

impl From<u64> for OperatingPanelActive2566808318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => OperatingPanelActive2566808318::OperatingPanelActive,
            0 => OperatingPanelActive2566808318::OperatingPanelNotActive,
            value => OperatingPanelActive2566808318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RefusePackerStepSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u64),
}

impl From<u64> for RefusePackerStepSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => RefusePackerStepSwitch2566808318::SwitchedOn,
            0 => RefusePackerStepSwitch2566808318::SwitchedOff,
            value => RefusePackerStepSwitch2566808318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngineStopSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u64),
}

impl From<u64> for EngineStopSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EngineStopSwitch2566808318::SwitchedOn,
            0 => EngineStopSwitch2566808318::SwitchedOff,
            value => EngineStopSwitch2566808318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngineStartSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u64),
}

impl From<u64> for EngineStartSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EngineStartSwitch2566808318::SwitchedOn,
            0 => EngineStartSwitch2566808318::SwitchedOff,
            value => EngineStartSwitch2566808318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum StarterLockoutSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u64),
}

impl From<u64> for StarterLockoutSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => StarterLockoutSwitch2566808318::SwitchedOn,
            0 => StarterLockoutSwitch2566808318::SwitchedOff,
            value => StarterLockoutSwitch2566808318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FirstEngineMtdPtoSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u64),
}

impl From<u64> for FirstEngineMtdPtoSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => FirstEngineMtdPtoSwitch2566808318::SwitchedOn,
            0 => FirstEngineMtdPtoSwitch2566808318::SwitchedOff,
            value => FirstEngineMtdPtoSwitch2566808318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ClutchIndpdtPtoSwitch2566808318 {
    SwitchedOn,
    SwitchedOff,
    XValue(u64),
}

impl From<u64> for ClutchIndpdtPtoSwitch2566808318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => ClutchIndpdtPtoSwitch2566808318::SwitchedOn,
            0 => ClutchIndpdtPtoSwitch2566808318::SwitchedOff,
            value => ClutchIndpdtPtoSwitch2566808318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerLeftSideMarkerLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerLeftSideMarkerLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerLeftSideMarkerLight2566808830::LampSLit,
            0 => TrailerLeftSideMarkerLight2566808830::LampSNotLit,
            value => TrailerLeftSideMarkerLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerLeftReversingLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerLeftReversingLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerLeftReversingLight2566808830::LampSLit,
            0 => TrailerLeftReversingLight2566808830::LampSNotLit,
            value => TrailerLeftReversingLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerLeftRearWidIndLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerLeftRearWidIndLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerLeftRearWidIndLight2566808830::LampSLit,
            0 => TrailerLeftRearWidIndLight2566808830::LampSNotLit,
            value => TrailerLeftRearWidIndLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerLeftRearRegPltLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerLeftRearRegPltLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerLeftRearRegPltLight2566808830::LampSLit,
            0 => TrailerLeftRearRegPltLight2566808830::LampSNotLit,
            value => TrailerLeftRearRegPltLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerLeftRearLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerLeftRearLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerLeftRearLight2566808830::LampSLit,
            0 => TrailerLeftRearLight2566808830::LampSNotLit,
            value => TrailerLeftRearLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerLeftRearFogLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerLeftRearFogLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerLeftRearFogLight2566808830::LampSLit,
            0 => TrailerLeftRearFogLight2566808830::LampSNotLit,
            value => TrailerLeftRearFogLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerLeftDirIndLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerLeftDirIndLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerLeftDirIndLight2566808830::LampSLit,
            0 => TrailerLeftDirIndLight2566808830::LampSNotLit,
            value => TrailerLeftDirIndLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerLeftCrnMarkerLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerLeftCrnMarkerLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerLeftCrnMarkerLight2566808830::LampSLit,
            0 => TrailerLeftCrnMarkerLight2566808830::LampSNotLit,
            value => TrailerLeftCrnMarkerLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerInteriorLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerInteriorLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerInteriorLight2566808830::LampSLit,
            0 => TrailerInteriorLight2566808830::LampSNotLit,
            value => TrailerInteriorLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerWorkLamp2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerWorkLamp2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerWorkLamp2566808830::LampSLit,
            0 => TrailerWorkLamp2566808830::LampSNotLit,
            value => TrailerWorkLamp2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerRotatingIdentLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerRotatingIdentLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerRotatingIdentLight2566808830::LampSLit,
            0 => TrailerRotatingIdentLight2566808830::LampSNotLit,
            value => TrailerRotatingIdentLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerRightStopLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerRightStopLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerRightStopLight2566808830::LampSLit,
            0 => TrailerRightStopLight2566808830::LampSNotLit,
            value => TrailerRightStopLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerRightSideMrkLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerRightSideMrkLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerRightSideMrkLight2566808830::LampSLit,
            0 => TrailerRightSideMrkLight2566808830::LampSNotLit,
            value => TrailerRightSideMrkLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerRightReversingLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerRightReversingLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerRightReversingLight2566808830::LampSLit,
            0 => TrailerRightReversingLight2566808830::LampSNotLit,
            value => TrailerRightReversingLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailRightRearWidIndLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailRightRearWidIndLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailRightRearWidIndLight2566808830::LampSLit,
            0 => TrailRightRearWidIndLight2566808830::LampSNotLit,
            value => TrailRightRearWidIndLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerRightRearRegPltLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerRightRearRegPltLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerRightRearRegPltLight2566808830::LampSLit,
            0 => TrailerRightRearRegPltLight2566808830::LampSNotLit,
            value => TrailerRightRearRegPltLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerRightRearLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerRightRearLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerRightRearLight2566808830::LampSLit,
            0 => TrailerRightRearLight2566808830::LampSNotLit,
            value => TrailerRightRearLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerRightRearFogLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerRightRearFogLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerRightRearFogLight2566808830::LampSLit,
            0 => TrailerRightRearFogLight2566808830::LampSNotLit,
            value => TrailerRightRearFogLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerRightDirIndLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerRightDirIndLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerRightDirIndLight2566808830::LampSLit,
            0 => TrailerRightDirIndLight2566808830::LampSNotLit,
            value => TrailerRightDirIndLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerRightCrnMarkerLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerRightCrnMarkerLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerRightCrnMarkerLight2566808830::LampSLit,
            0 => TrailerRightCrnMarkerLight2566808830::LampSNotLit,
            value => TrailerRightCrnMarkerLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerRearWarningLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerRearWarningLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerRearWarningLight2566808830::LampSLit,
            0 => TrailerRearWarningLight2566808830::LampSNotLit,
            value => TrailerRearWarningLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerLeftStopLight2566808830 {
    LampSLit,
    LampSNotLit,
    XValue(u64),
}

impl From<u64> for TrailerLeftStopLight2566808830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TrailerLeftStopLight2566808830::LampSLit,
            0 => TrailerLeftStopLight2566808830::LampSNotLit,
            value => TrailerLeftStopLight2566808830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlowStatus2564554494 {
    Overflow,
    Wait,
    ContinueToSend,
    XValue(u64),
}

impl From<u64> for FlowStatus2564554494 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => FlowStatus2564554494::Overflow,
            1 => FlowStatus2564554494::Wait,
            0 => FlowStatus2564554494::ContinueToSend,
            value => FlowStatus2564554494::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ProtocolCtrlInformation2564554494 {
    FlowControl,
    ConsecutiveFrame,
    FirstFrame,
    SingleFrame,
    XValue(u64),
}

impl From<u64> for ProtocolCtrlInformation2564554494 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ProtocolCtrlInformation2564554494::FlowControl,
            2 => ProtocolCtrlInformation2564554494::ConsecutiveFrame,
            1 => ProtocolCtrlInformation2564554494::FirstFrame,
            0 => ProtocolCtrlInformation2564554494::SingleFrame,
            value => ProtocolCtrlInformation2564554494::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlowStatus2564488958 {
    Overflow,
    Wait,
    ContinueToSend,
    XValue(u64),
}

impl From<u64> for FlowStatus2564488958 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => FlowStatus2564488958::Overflow,
            1 => FlowStatus2564488958::Wait,
            0 => FlowStatus2564488958::ContinueToSend,
            value => FlowStatus2564488958::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ProtocolCtrlInformation2564488958 {
    FlowControl,
    ConsecutiveFrame,
    FirstFrame,
    SingleFrame,
    XValue(u64),
}

impl From<u64> for ProtocolCtrlInformation2564488958 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ProtocolCtrlInformation2564488958::FlowControl,
            2 => ProtocolCtrlInformation2564488958::ConsecutiveFrame,
            1 => ProtocolCtrlInformation2564488958::FirstFrame,
            0 => ProtocolCtrlInformation2564488958::SingleFrame,
            value => ProtocolCtrlInformation2564488958::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ControlByte2565734142 {
    MfdbCreateEntry,
    MfdbSetMode,
    MfdbClear,
    MfdbDelete,
    MfdbAdd,
    MfdbResponse,
    MfdbRequest,
    XValue(u64),
}

impl From<u64> for ControlByte2565734142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            6 => ControlByte2565734142::MfdbCreateEntry,
            5 => ControlByte2565734142::MfdbSetMode,
            4 => ControlByte2565734142::MfdbClear,
            3 => ControlByte2565734142::MfdbDelete,
            2 => ControlByte2565734142::MfdbAdd,
            1 => ControlByte2565734142::MfdbResponse,
            0 => ControlByte2565734142::MfdbRequest,
            value => ControlByte2565734142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FilterMode2565734142 {
    PassSpecificPgNs,
    BlockSpecificPgNs,
    XValue(u64),
}

impl From<u64> for FilterMode2565734142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => FilterMode2565734142::PassSpecificPgNs,
            0 => FilterMode2565734142::BlockSpecificPgNs,
            value => FilterMode2565734142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum StopLevelChangeReq2565144318 {
    TakeNoAction,
    StopRequest,
    NoStopRequest,
    XValue(u64),
}

impl From<u64> for StopLevelChangeReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => StopLevelChangeReq2565144318::TakeNoAction,
            1 => StopLevelChangeReq2565144318::StopRequest,
            0 => StopLevelChangeReq2565144318::NoStopRequest,
            value => StopLevelChangeReq2565144318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RampLevelStorageReq2565144318 {
    TakeNoAction,
    StoreRampLevel2,
    StoreRampLevel1,
    XValue(u64),
}

impl From<u64> for RampLevelStorageReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RampLevelStorageReq2565144318::TakeNoAction,
            1 => RampLevelStorageReq2565144318::StoreRampLevel2,
            0 => RampLevelStorageReq2565144318::StoreRampLevel1,
            value => RampLevelStorageReq2565144318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LevelControlReq2565144318 {
    TakeNoAction,
    EnableLevelControl,
    DisableLevelControl,
    XValue(u64),
}

impl From<u64> for LevelControlReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LevelControlReq2565144318::TakeNoAction,
            1 => LevelControlReq2565144318::EnableLevelControl,
            0 => LevelControlReq2565144318::DisableLevelControl,
            value => LevelControlReq2565144318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RampLevelReq2565144318 {
    TakeNoAction,
    RampLevel2,
    RampLevel1,
    XValue(u64),
}

impl From<u64> for RampLevelReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RampLevelReq2565144318::TakeNoAction,
            1 => RampLevelReq2565144318::RampLevel2,
            0 => RampLevelReq2565144318::RampLevel1,
            value => RampLevelReq2565144318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SteeringAxleLockingReq2565144318 {
    TakeNoAction,
    LockSteeringAxle,
    UnlockSteeringAxle,
    XValue(u64),
}

impl From<u64> for SteeringAxleLockingReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SteeringAxleLockingReq2565144318::TakeNoAction,
            1 => SteeringAxleLockingReq2565144318::LockSteeringAxle,
            0 => SteeringAxleLockingReq2565144318::UnlockSteeringAxle,
            value => SteeringAxleLockingReq2565144318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LiftAxle2PositionReq2565144318 {
    TakeNoAction,
    PositionUpTagAxleUnladen,
    PositionDownTagAxleLaden,
    XValue(u64),
}

impl From<u64> for LiftAxle2PositionReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LiftAxle2PositionReq2565144318::TakeNoAction,
            1 => LiftAxle2PositionReq2565144318::PositionUpTagAxleUnladen,
            0 => LiftAxle2PositionReq2565144318::PositionDownTagAxleLaden,
            value => LiftAxle2PositionReq2565144318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LiftAxle1PositionReq2565144318 {
    DonXtCareTakeNoAction,
    Reserved,
    PositionUpTagAxleUnladen,
    PositionDownTagAxleLaden,
    XValue(u64),
}

impl From<u64> for LiftAxle1PositionReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LiftAxle1PositionReq2565144318::DonXtCareTakeNoAction,
            2 => LiftAxle1PositionReq2565144318::Reserved,
            1 => LiftAxle1PositionReq2565144318::PositionUpTagAxleUnladen,
            0 => LiftAxle1PositionReq2565144318::PositionDownTagAxleLaden,
            value => LiftAxle1PositionReq2565144318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractionHelpReq2565144318 {
    TakeNoAction,
    TractionHelpRequest,
    NoTractionHelpRequest,
    XValue(u64),
}

impl From<u64> for TractionHelpReq2565144318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TractionHelpReq2565144318::TakeNoAction,
            1 => TractionHelpReq2565144318::TractionHelpRequest,
            0 => TractionHelpReq2565144318::NoTractionHelpRequest,
            value => TractionHelpReq2565144318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LevelChangeReqRearAxle2565144318 {
    TakeNoAction,
    VehicleBodyDownLowering,
    VehicleBodyUpLifting,
    XValue(u64),
}

impl From<u64> for LevelChangeReqRearAxle2565144318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => LevelChangeReqRearAxle2565144318::TakeNoAction,
            1 => LevelChangeReqRearAxle2565144318::VehicleBodyDownLowering,
            0 => LevelChangeReqRearAxle2565144318::VehicleBodyUpLifting,
            value => LevelChangeReqRearAxle2565144318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LevelChangeReqFrontAxle2565144318 {
    TakeNoAction,
    VehicleBodyDownLowering,
    VehicleBodyUpLifting,
    XValue(u64),
}

impl From<u64> for LevelChangeReqFrontAxle2565144318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => LevelChangeReqFrontAxle2565144318::TakeNoAction,
            1 => LevelChangeReqFrontAxle2565144318::VehicleBodyDownLowering,
            0 => LevelChangeReqFrontAxle2565144318::VehicleBodyUpLifting,
            value => LevelChangeReqFrontAxle2565144318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RideHeightRequest2565144318 {
    TakeNoAction,
    NormalLevel2,
    NormalLevel1,
    XValue(u64),
}

impl From<u64> for RideHeightRequest2565144318 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => RideHeightRequest2565144318::TakeNoAction,
            1 => RideHeightRequest2565144318::NormalLevel2,
            0 => RideHeightRequest2565144318::NormalLevel1,
            value => RideHeightRequest2565144318::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LevelControl2565209854 {
    LevelControlEnabled,
    LevelControlDisabled,
    XValue(u64),
}

impl From<u64> for LevelControl2565209854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => LevelControl2565209854::LevelControlEnabled,
            0 => LevelControl2565209854::LevelControlDisabled,
            value => LevelControl2565209854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RampLevel2565209854 {
    BodyAtRequestedRampLevel,
    BodyNotAtRequestedRampLevel,
    XValue(u64),
}

impl From<u64> for RampLevel2565209854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => RampLevel2565209854::BodyAtRequestedRampLevel,
            0 => RampLevel2565209854::BodyNotAtRequestedRampLevel,
            value => RampLevel2565209854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum NormalLevel2565209854 {
    NotAvailable,
    NormalLevel2,
    NormalLevel1,
    XValue(u64),
}

impl From<u64> for NormalLevel2565209854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => NormalLevel2565209854::NotAvailable,
            1 => NormalLevel2565209854::NormalLevel2,
            0 => NormalLevel2565209854::NormalLevel1,
            value => NormalLevel2565209854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum StopLevelChangeAcknowledge2565209854 {
    LevelChangeStopped,
    NoStopRequest,
    XValue(u64),
}

impl From<u64> for StopLevelChangeAcknowledge2565209854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => StopLevelChangeAcknowledge2565209854::LevelChangeStopped,
            0 => StopLevelChangeAcknowledge2565209854::NoStopRequest,
            value => StopLevelChangeAcknowledge2565209854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LevelChangeRearAxle2565209854 {
    BodyLiftingLoweringActive,
    BodyLiftingLoweringNotActive,
    XValue(u64),
}

impl From<u64> for LevelChangeRearAxle2565209854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => LevelChangeRearAxle2565209854::BodyLiftingLoweringActive,
            0 => LevelChangeRearAxle2565209854::BodyLiftingLoweringNotActive,
            value => LevelChangeRearAxle2565209854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LevelChangeFrontAxle2565209854 {
    BodyLiftingLoweringActive,
    BodyLiftingLoweringNotActive,
    XValue(u64),
}

impl From<u64> for LevelChangeFrontAxle2565209854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => LevelChangeFrontAxle2565209854::BodyLiftingLoweringActive,
            0 => LevelChangeFrontAxle2565209854::BodyLiftingLoweringNotActive,
            value => LevelChangeFrontAxle2565209854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RampLevelStorage2565209854 {
    NewRampLevelStored,
    NoNewStorageRequest,
    XValue(u64),
}

impl From<u64> for RampLevelStorage2565209854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => RampLevelStorage2565209854::NewRampLevelStored,
            0 => RampLevelStorage2565209854::NoNewStorageRequest,
            value => RampLevelStorage2565209854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SteeringAxleLocking2565209854 {
    SteeringAxleLocked,
    SteeringAxleUnlocked,
    XValue(u64),
}

impl From<u64> for SteeringAxleLocking2565209854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SteeringAxleLocking2565209854::SteeringAxleLocked,
            0 => SteeringAxleLocking2565209854::SteeringAxleUnlocked,
            value => SteeringAxleLocking2565209854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LiftAxle2Pos2565209854 {
    NotAvailable,
    Error,
    LiftAxlePosUpTagAxleUnladen,
    LiftAxlePosDownTagAxleLaden,
    XValue(u64),
}

impl From<u64> for LiftAxle2Pos2565209854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LiftAxle2Pos2565209854::NotAvailable,
            2 => LiftAxle2Pos2565209854::Error,
            1 => LiftAxle2Pos2565209854::LiftAxlePosUpTagAxleUnladen,
            0 => LiftAxle2Pos2565209854::LiftAxlePosDownTagAxleLaden,
            value => LiftAxle2Pos2565209854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LiftAxle1Pos2565209854 {
    NotAvailable,
    Error,
    LiftAxlePosUpTagAxleUnladen,
    LiftAxlePosDownTagAxleLaden,
    XValue(u64),
}

impl From<u64> for LiftAxle1Pos2565209854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LiftAxle1Pos2565209854::NotAvailable,
            2 => LiftAxle1Pos2565209854::Error,
            1 => LiftAxle1Pos2565209854::LiftAxlePosUpTagAxleUnladen,
            0 => LiftAxle1Pos2565209854::LiftAxlePosDownTagAxleLaden,
            value => LiftAxle1Pos2565209854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RampLevelPosition2565209854 {
    NotAvailable,
    RampLevel2,
    RampLevel1,
    XValue(u64),
}

impl From<u64> for RampLevelPosition2565209854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RampLevelPosition2565209854::NotAvailable,
            1 => RampLevelPosition2565209854::RampLevel2,
            0 => RampLevelPosition2565209854::RampLevel1,
            value => RampLevelPosition2565209854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractionHelp2565209854 {
    TractionHelpActive,
    TractionHelpInactive,
    XValue(u64),
}

impl From<u64> for TractionHelp2565209854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TractionHelp2565209854::TractionHelpActive,
            0 => TractionHelp2565209854::TractionHelpInactive,
            value => TractionHelp2565209854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LevelCtrlSysRideHeightLevel2565209854 {
    VehicleBodyAtRequestedLevel,
    VehicleBodyNotAtReqLevel,
    XValue(u64),
}

impl From<u64> for LevelCtrlSysRideHeightLevel2565209854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => LevelCtrlSysRideHeightLevel2565209854::VehicleBodyAtRequestedLevel,
            0 => LevelCtrlSysRideHeightLevel2565209854::VehicleBodyNotAtReqLevel,
            value => LevelCtrlSysRideHeightLevel2565209854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TyrePressThresholdDetect2566807294 {
    NotAvailable,
    ErrorIndicator,
    NotDefined,
    ExtremeUnderPressure,
    UnderPressure,
    NoWarningPressure,
    OverPressure,
    ExtremeOverPressure,
    XValue(u64),
}

impl From<u64> for TyrePressThresholdDetect2566807294 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TyrePressThresholdDetect2566807294::NotAvailable,
            6 => TyrePressThresholdDetect2566807294::ErrorIndicator,
            5 => TyrePressThresholdDetect2566807294::NotDefined,
            4 => TyrePressThresholdDetect2566807294::ExtremeUnderPressure,
            3 => TyrePressThresholdDetect2566807294::UnderPressure,
            2 => TyrePressThresholdDetect2566807294::NoWarningPressure,
            1 => TyrePressThresholdDetect2566807294::OverPressure,
            0 => TyrePressThresholdDetect2566807294::ExtremeOverPressure,
            value => TyrePressThresholdDetect2566807294::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TyreModulePowerSupply2566807294 {
    SufficientPowerSupply,
    InsufficientPowerSupply,
    XValue(u64),
}

impl From<u64> for TyreModulePowerSupply2566807294 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TyreModulePowerSupply2566807294::SufficientPowerSupply,
            0 => TyreModulePowerSupply2566807294::InsufficientPowerSupply,
            value => TyreModulePowerSupply2566807294::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TyreWheelIdentification22566807294 {
    AxlePosition15,
    AxlePosition14,
    AxlePosition13,
    AxlePosition12,
    AxlePosition11,
    AxlePosition10,
    AxlePosition9,
    AxlePosition8,
    AxlePosition7,
    AxlePosition6,
    AxlePosition5,
    AxlePosition4,
    AxlePosition3,
    AxlePosition2,
    AxlePosition1,
    AxlePositionNotIdentified,
    XValue(u64),
}

impl From<u64> for TyreWheelIdentification22566807294 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => TyreWheelIdentification22566807294::AxlePosition15,
            14 => TyreWheelIdentification22566807294::AxlePosition14,
            13 => TyreWheelIdentification22566807294::AxlePosition13,
            12 => TyreWheelIdentification22566807294::AxlePosition12,
            11 => TyreWheelIdentification22566807294::AxlePosition11,
            10 => TyreWheelIdentification22566807294::AxlePosition10,
            9 => TyreWheelIdentification22566807294::AxlePosition9,
            8 => TyreWheelIdentification22566807294::AxlePosition8,
            7 => TyreWheelIdentification22566807294::AxlePosition7,
            6 => TyreWheelIdentification22566807294::AxlePosition6,
            5 => TyreWheelIdentification22566807294::AxlePosition5,
            4 => TyreWheelIdentification22566807294::AxlePosition4,
            3 => TyreWheelIdentification22566807294::AxlePosition3,
            2 => TyreWheelIdentification22566807294::AxlePosition2,
            1 => TyreWheelIdentification22566807294::AxlePosition1,
            0 => TyreWheelIdentification22566807294::AxlePositionNotIdentified,
            value => TyreWheelIdentification22566807294::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TyreWheelIdentification12566807294 {
    WheelPosition15,
    WheelPosition14,
    WheelPosition13,
    WheelPosition12,
    WheelPosition11,
    WheelPosition10,
    WheelPosition9,
    WheelPosition8,
    WheelPosition7,
    WheelPosition6,
    WheelPosition5,
    WheelPosition4,
    WheelPosition3,
    WheelPosition2,
    WheelPosition1,
    WheelPositionNotIdentified,
    XValue(u64),
}

impl From<u64> for TyreWheelIdentification12566807294 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => TyreWheelIdentification12566807294::WheelPosition15,
            14 => TyreWheelIdentification12566807294::WheelPosition14,
            13 => TyreWheelIdentification12566807294::WheelPosition13,
            12 => TyreWheelIdentification12566807294::WheelPosition12,
            11 => TyreWheelIdentification12566807294::WheelPosition11,
            10 => TyreWheelIdentification12566807294::WheelPosition10,
            9 => TyreWheelIdentification12566807294::WheelPosition9,
            8 => TyreWheelIdentification12566807294::WheelPosition8,
            7 => TyreWheelIdentification12566807294::WheelPosition7,
            6 => TyreWheelIdentification12566807294::WheelPosition6,
            5 => TyreWheelIdentification12566807294::WheelPosition5,
            4 => TyreWheelIdentification12566807294::WheelPosition4,
            3 => TyreWheelIdentification12566807294::WheelPosition3,
            2 => TyreWheelIdentification12566807294::WheelPosition2,
            1 => TyreWheelIdentification12566807294::WheelPosition1,
            0 => TyreWheelIdentification12566807294::WheelPositionNotIdentified,
            value => TyreWheelIdentification12566807294::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MisfireMonitoringComplete2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(u64),
}

impl From<u64> for MisfireMonitoringComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => MisfireMonitoringComplete2566764798::EnabledForCycle,
            0 => MisfireMonitoringComplete2566764798::DisabledForRestOfCycle,
            value => MisfireMonitoringComplete2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MisfireMonitoringEnabled2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(u64),
}

impl From<u64> for MisfireMonitoringEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => MisfireMonitoringEnabled2566764798::EnabledForCycle,
            0 => MisfireMonitoringEnabled2566764798::DisabledForRestOfCycle,
            value => MisfireMonitoringEnabled2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FuelSystemMonitoringEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(u64),
}

impl From<u64> for FuelSystemMonitoringEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => FuelSystemMonitoringEnabled2566764798::NotCompleteCycle,
            0 => FuelSystemMonitoringEnabled2566764798::CompleteCycleOrNotSupported,
            value => FuelSystemMonitoringEnabled2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ComprehensiveComptMonComplete2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(u64),
}

impl From<u64> for ComprehensiveComptMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => ComprehensiveComptMonComplete2566764798::NotCompleteCycle,
            0 => ComprehensiveComptMonComplete2566764798::CompleteCycleOrNotSupported,
            value => ComprehensiveComptMonComplete2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ComprehensiveCompMonEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(u64),
}

impl From<u64> for ComprehensiveCompMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => ComprehensiveCompMonEnabled2566764798::NotCompleteCycle,
            0 => ComprehensiveCompMonEnabled2566764798::CompleteCycleOrNotSupported,
            value => ComprehensiveCompMonEnabled2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SecondAirSystemMonComplete2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(u64),
}

impl From<u64> for SecondAirSystemMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SecondAirSystemMonComplete2566764798::EnabledForCycle,
            0 => SecondAirSystemMonComplete2566764798::DisabledForRestOfCycle,
            value => SecondAirSystemMonComplete2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SecondAirSystemMonEnabled2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(u64),
}

impl From<u64> for SecondAirSystemMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SecondAirSystemMonEnabled2566764798::EnabledForCycle,
            0 => SecondAirSystemMonEnabled2566764798::DisabledForRestOfCycle,
            value => SecondAirSystemMonEnabled2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OxygenSensorMonComplete2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(u64),
}

impl From<u64> for OxygenSensorMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => OxygenSensorMonComplete2566764798::EnabledForCycle,
            0 => OxygenSensorMonComplete2566764798::DisabledForRestOfCycle,
            value => OxygenSensorMonComplete2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OxygenSensorMonEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(u64),
}

impl From<u64> for OxygenSensorMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => OxygenSensorMonEnabled2566764798::NotCompleteCycle,
            0 => OxygenSensorMonEnabled2566764798::CompleteCycleOrNotSupported,
            value => OxygenSensorMonEnabled2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OxygenSensorHeaterMonComplete2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(u64),
}

impl From<u64> for OxygenSensorHeaterMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => OxygenSensorHeaterMonComplete2566764798::EnabledForCycle,
            0 => OxygenSensorHeaterMonComplete2566764798::DisabledForRestOfCycle,
            value => OxygenSensorHeaterMonComplete2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OxygenSensorHeaterMonEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(u64),
}

impl From<u64> for OxygenSensorHeaterMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => OxygenSensorHeaterMonEnabled2566764798::NotCompleteCycle,
            0 => OxygenSensorHeaterMonEnabled2566764798::CompleteCycleOrNotSupported,
            value => OxygenSensorHeaterMonEnabled2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HeatedCatalystMonComplete2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(u64),
}

impl From<u64> for HeatedCatalystMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => HeatedCatalystMonComplete2566764798::EnabledForCycle,
            0 => HeatedCatalystMonComplete2566764798::DisabledForRestOfCycle,
            value => HeatedCatalystMonComplete2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HeatedCatalystMonEnabled2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(u64),
}

impl From<u64> for HeatedCatalystMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => HeatedCatalystMonEnabled2566764798::EnabledForCycle,
            0 => HeatedCatalystMonEnabled2566764798::DisabledForRestOfCycle,
            value => HeatedCatalystMonEnabled2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EvaporativeSystemMonComplete2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(u64),
}

impl From<u64> for EvaporativeSystemMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EvaporativeSystemMonComplete2566764798::NotCompleteCycle,
            0 => EvaporativeSystemMonComplete2566764798::CompleteCycleOrNotSupported,
            value => EvaporativeSystemMonComplete2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EvaporativeSystemMonEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(u64),
}

impl From<u64> for EvaporativeSystemMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EvaporativeSystemMonEnabled2566764798::NotCompleteCycle,
            0 => EvaporativeSystemMonEnabled2566764798::CompleteCycleOrNotSupported,
            value => EvaporativeSystemMonEnabled2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EgrSystemMonitoringComplete2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(u64),
}

impl From<u64> for EgrSystemMonitoringComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EgrSystemMonitoringComplete2566764798::NotCompleteCycle,
            0 => EgrSystemMonitoringComplete2566764798::CompleteCycleOrNotSupported,
            value => EgrSystemMonitoringComplete2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EgrSystemMonitoringEnabled2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(u64),
}

impl From<u64> for EgrSystemMonitoringEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EgrSystemMonitoringEnabled2566764798::EnabledForCycle,
            0 => EgrSystemMonitoringEnabled2566764798::DisabledForRestOfCycle,
            value => EgrSystemMonitoringEnabled2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ColdStartAidSystemMonComplete2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(u64),
}

impl From<u64> for ColdStartAidSystemMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => ColdStartAidSystemMonComplete2566764798::EnabledForCycle,
            0 => ColdStartAidSystemMonComplete2566764798::DisabledForRestOfCycle,
            value => ColdStartAidSystemMonComplete2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ColdStartAidSystemMonEnabled2566764798 {
    EnabledForCycle,
    DisabledForRestOfCycle,
    XValue(u64),
}

impl From<u64> for ColdStartAidSystemMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => ColdStartAidSystemMonEnabled2566764798::EnabledForCycle,
            0 => ColdStartAidSystemMonEnabled2566764798::DisabledForRestOfCycle,
            value => ColdStartAidSystemMonEnabled2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CatalystMonComplete2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(u64),
}

impl From<u64> for CatalystMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => CatalystMonComplete2566764798::NotCompleteCycle,
            0 => CatalystMonComplete2566764798::CompleteCycleOrNotSupported,
            value => CatalystMonComplete2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CatalystMonEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(u64),
}

impl From<u64> for CatalystMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => CatalystMonEnabled2566764798::NotCompleteCycle,
            0 => CatalystMonEnabled2566764798::CompleteCycleOrNotSupported,
            value => CatalystMonEnabled2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AcSystemRefrigerantMonComplete2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(u64),
}

impl From<u64> for AcSystemRefrigerantMonComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => AcSystemRefrigerantMonComplete2566764798::NotCompleteCycle,
            0 => AcSystemRefrigerantMonComplete2566764798::CompleteCycleOrNotSupported,
            value => AcSystemRefrigerantMonComplete2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AcSystemRefrigerantMonEnabled2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(u64),
}

impl From<u64> for AcSystemRefrigerantMonEnabled2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => AcSystemRefrigerantMonEnabled2566764798::NotCompleteCycle,
            0 => AcSystemRefrigerantMonEnabled2566764798::CompleteCycleOrNotSupported,
            value => AcSystemRefrigerantMonEnabled2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FuelSystemMonitoringComplete2566764798 {
    NotCompleteCycle,
    CompleteCycleOrNotSupported,
    XValue(u64),
}

impl From<u64> for FuelSystemMonitoringComplete2566764798 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => FuelSystemMonitoringComplete2566764798::NotCompleteCycle,
            0 => FuelSystemMonitoringComplete2566764798::CompleteCycleOrNotSupported,
            value => FuelSystemMonitoringComplete2566764798::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SecurityEntityType2564095742 {
    DataIsCertificate,
    DataIsSessionKey,
    DataIsLongKey,
    DataIsLongSeed,
    XValue(u64),
}

impl From<u64> for SecurityEntityType2564095742 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SecurityEntityType2564095742::DataIsCertificate,
            2 => SecurityEntityType2564095742::DataIsSessionKey,
            1 => SecurityEntityType2564095742::DataIsLongKey,
            0 => SecurityEntityType2564095742::DataIsLongSeed,
            value => SecurityEntityType2564095742::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum XbrCtrlMode2349137662 {
    NotDefined,
    AcclrtnCtrlWthMxMdExctXbrAcclrt,
    AcclrtnCtrlWthAddtnMdAddXbrAccl,
    OvrrdDsbldDsblAnyExstngCtrlCmdd,
    XValue(u64),
}

impl From<u64> for XbrCtrlMode2349137662 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => XbrCtrlMode2349137662::NotDefined,
            2 => XbrCtrlMode2349137662::AcclrtnCtrlWthMxMdExctXbrAcclrt,
            1 => XbrCtrlMode2349137662::AcclrtnCtrlWthAddtnMdAddXbrAccl,
            0 => XbrCtrlMode2349137662::OvrrdDsbldDsblAnyExstngCtrlCmdd,
            value => XbrCtrlMode2349137662::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum XbrPriority2349137662 {
    LwPrrtyUsdInOvrrdDsbldXbrCtrlMd,
    MdmPrrtyUsdFrAccSystmsThsMdDsNt,
    HighPriorityNotDefined,
    HghstPrrtyUsdFrEmrgncySttnsEgFr,
    XValue(u64),
}

impl From<u64> for XbrPriority2349137662 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => XbrPriority2349137662::LwPrrtyUsdInOvrrdDsbldXbrCtrlMd,
            2 => XbrPriority2349137662::MdmPrrtyUsdFrAccSystmsThsMdDsNt,
            1 => XbrPriority2349137662::HighPriorityNotDefined,
            0 => XbrPriority2349137662::HghstPrrtyUsdFrEmrgncySttnsEgFr,
            value => XbrPriority2349137662::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum XbrebiMode2349137662 {
    NotDefined,
    EndranceBrakeIntegrationAllowed,
    OnlyEnduranceBrakesAllowed,
    NEndrnceBrakeIntegrationAllowed,
    XValue(u64),
}

impl From<u64> for XbrebiMode2349137662 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => XbrebiMode2349137662::NotDefined,
            2 => XbrebiMode2349137662::EndranceBrakeIntegrationAllowed,
            1 => XbrebiMode2349137662::OnlyEnduranceBrakesAllowed,
            0 => XbrebiMode2349137662::NEndrnceBrakeIntegrationAllowed,
            value => XbrebiMode2349137662::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum WaterInFuelIndicator2566848510 {
    NotAvailable,
    Error,
    Yes,
    No,
    XValue(u64),
}

impl From<u64> for WaterInFuelIndicator2566848510 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => WaterInFuelIndicator2566848510::NotAvailable,
            2 => WaterInFuelIndicator2566848510::Error,
            1 => WaterInFuelIndicator2566848510::Yes,
            0 => WaterInFuelIndicator2566848510::No,
            value => WaterInFuelIndicator2566848510::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum WinchOilPressSwitch2566809854 {
    NotAvailable,
    ErrrSwtchStteCannotBeDetermined,
    OkOilPressIsAboveMin,
    NotokOilPressIsTooLow,
    XValue(u64),
}

impl From<u64> for WinchOilPressSwitch2566809854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => WinchOilPressSwitch2566809854::NotAvailable,
            2 => WinchOilPressSwitch2566809854::ErrrSwtchStteCannotBeDetermined,
            1 => WinchOilPressSwitch2566809854::OkOilPressIsAboveMin,
            0 => WinchOilPressSwitch2566809854::NotokOilPressIsTooLow,
            value => WinchOilPressSwitch2566809854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HydOilFilterRestrictionSwitch2566809854 {
    NotAvailable,
    Error,
    RestrictionExistsOnOilFilter,
    NoRestriction,
    XValue(u64),
}

impl From<u64> for HydOilFilterRestrictionSwitch2566809854 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => HydOilFilterRestrictionSwitch2566809854::NotAvailable,
            2 => HydOilFilterRestrictionSwitch2566809854::Error,
            1 => HydOilFilterRestrictionSwitch2566809854::RestrictionExistsOnOilFilter,
            0 => HydOilFilterRestrictionSwitch2566809854::NoRestriction,
            value => HydOilFilterRestrictionSwitch2566809854::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SteerWheelAngleSensorType2565868030 {
    NotAvailable,
    Reserved,
    AbsMeasuringPrinciple,
    RelativeMeasuringPrinciple,
    XValue(u64),
}

impl From<u64> for SteerWheelAngleSensorType2565868030 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SteerWheelAngleSensorType2565868030::NotAvailable,
            2 => SteerWheelAngleSensorType2565868030::Reserved,
            1 => SteerWheelAngleSensorType2565868030::AbsMeasuringPrinciple,
            0 => SteerWheelAngleSensorType2565868030::RelativeMeasuringPrinciple,
            value => SteerWheelAngleSensorType2565868030::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum YcBrakeCtrlActive2566803454 {
    DontCareTakeNoAction,
    Reserved,
    YcBrakeCtrlActive,
    YcBrakeCtrlPassiveButInstalled,
    XValue(u64),
}

impl From<u64> for YcBrakeCtrlActive2566803454 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => YcBrakeCtrlActive2566803454::DontCareTakeNoAction,
            2 => YcBrakeCtrlActive2566803454::Reserved,
            1 => YcBrakeCtrlActive2566803454::YcBrakeCtrlActive,
            0 => YcBrakeCtrlActive2566803454::YcBrakeCtrlPassiveButInstalled,
            value => YcBrakeCtrlActive2566803454::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum YcEngCtrlActive2566803454 {
    DontCareTakeNoAction,
    Reserved,
    YcEngCtrlActive,
    YcEngCtrlPassiveButInstalled,
    XValue(u64),
}

impl From<u64> for YcEngCtrlActive2566803454 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => YcEngCtrlActive2566803454::DontCareTakeNoAction,
            2 => YcEngCtrlActive2566803454::Reserved,
            1 => YcEngCtrlActive2566803454::YcEngCtrlActive,
            0 => YcEngCtrlActive2566803454::YcEngCtrlPassiveButInstalled,
            value => YcEngCtrlActive2566803454::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RopBrakeCtrlActive2566803454 {
    DontCareTakeNoAction,
    Reserved,
    RopBrakeCtrlActive,
    RopBrakeCtrlPassiveButInstalled,
    XValue(u64),
}

impl From<u64> for RopBrakeCtrlActive2566803454 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RopBrakeCtrlActive2566803454::DontCareTakeNoAction,
            2 => RopBrakeCtrlActive2566803454::Reserved,
            1 => RopBrakeCtrlActive2566803454::RopBrakeCtrlActive,
            0 => RopBrakeCtrlActive2566803454::RopBrakeCtrlPassiveButInstalled,
            value => RopBrakeCtrlActive2566803454::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RopEngCtrlActive2566803454 {
    DontCareTakeNoAction,
    Reserved,
    RopEngCtrlActive,
    RopEngCtrlPassiveButInstalled,
    XValue(u64),
}

impl From<u64> for RopEngCtrlActive2566803454 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RopEngCtrlActive2566803454::DontCareTakeNoAction,
            2 => RopEngCtrlActive2566803454::Reserved,
            1 => RopEngCtrlActive2566803454::RopEngCtrlActive,
            0 => RopEngCtrlActive2566803454::RopEngCtrlPassiveButInstalled,
            value => RopEngCtrlActive2566803454::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VdcBrakeLightRq2566803454 {
    DontCareTakeNoAction,
    Reserved,
    TurnBrakeLightOn,
    TurnBrakeLightNotOn,
    XValue(u64),
}

impl From<u64> for VdcBrakeLightRq2566803454 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => VdcBrakeLightRq2566803454::DontCareTakeNoAction,
            2 => VdcBrakeLightRq2566803454::Reserved,
            1 => VdcBrakeLightRq2566803454::TurnBrakeLightOn,
            0 => VdcBrakeLightRq2566803454::TurnBrakeLightNotOn,
            value => VdcBrakeLightRq2566803454::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VdcFullyOperational2566803454 {
    DontCareTakeNoAction,
    Reserved,
    FullyOperational,
    NotFullyOperational,
    XValue(u64),
}

impl From<u64> for VdcFullyOperational2566803454 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => VdcFullyOperational2566803454::DontCareTakeNoAction,
            2 => VdcFullyOperational2566803454::Reserved,
            1 => VdcFullyOperational2566803454::FullyOperational,
            0 => VdcFullyOperational2566803454::NotFullyOperational,
            value => VdcFullyOperational2566803454::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VdcInformationSignal2566803454 {
    DontCareTakeNoAction,
    Reserved,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for VdcInformationSignal2566803454 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => VdcInformationSignal2566803454::DontCareTakeNoAction,
            2 => VdcInformationSignal2566803454::Reserved,
            1 => VdcInformationSignal2566803454::On,
            0 => VdcInformationSignal2566803454::Off,
            value => VdcInformationSignal2566803454::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ControlPurpose2348875518 {
    TemporaryPowerTrainControl,
    EngineProtection,
    RoadSpeedGovernor,
    PtoGovernor,
    CruiseControl,
    AcceleratorPedal,
    XValue(u64),
}

impl From<u64> for ControlPurpose2348875518 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            5 => ControlPurpose2348875518::TemporaryPowerTrainControl,
            4 => ControlPurpose2348875518::EngineProtection,
            3 => ControlPurpose2348875518::RoadSpeedGovernor,
            2 => ControlPurpose2348875518::PtoGovernor,
            1 => ControlPurpose2348875518::CruiseControl,
            0 => ControlPurpose2348875518::AcceleratorPedal,
            value => ControlPurpose2348875518::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransmissionRate2348875518 {
    UseStandardRate,
    X25ms,
    X50ms,
    X100ms,
    X250ms,
    X500ms,
    X750ms,
    X1000ms,
    XValue(u64),
}

impl From<u64> for TransmissionRate2348875518 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TransmissionRate2348875518::UseStandardRate,
            6 => TransmissionRate2348875518::X25ms,
            5 => TransmissionRate2348875518::X50ms,
            4 => TransmissionRate2348875518::X100ms,
            3 => TransmissionRate2348875518::X250ms,
            2 => TransmissionRate2348875518::X500ms,
            1 => TransmissionRate2348875518::X750ms,
            0 => TransmissionRate2348875518::X1000ms,
            value => TransmissionRate2348875518::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OverrideCtrlModePriority2348875518 {
    LowPriority,
    MdmPrrtyUsdFrPwrtrnCtrlOprtnsWh,
    HighPriority,
    HghstPrrtyUsdFrSttnsThtRqrImmdt,
    XValue(u64),
}

impl From<u64> for OverrideCtrlModePriority2348875518 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OverrideCtrlModePriority2348875518::LowPriority,
            2 => OverrideCtrlModePriority2348875518::MdmPrrtyUsdFrPwrtrnCtrlOprtnsWh,
            1 => OverrideCtrlModePriority2348875518::HighPriority,
            0 => OverrideCtrlModePriority2348875518::HghstPrrtyUsdFrSttnsThtRqrImmdt,
            value => OverrideCtrlModePriority2348875518::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngRqedSpeedCtrlConditions2348875518 {
    ThsCtrlCndtnHsBnOptmzdTMnmzRpmO,
    StbltyOptmzdFrDrvlnEnggdAndOrI,
    StbltyOptmzdFrDrvlnDsnggdAndNnl,
    ThsSpdGvrnrGnSlctnIsAdjstdTPrvd,
    XValue(u64),
}

impl From<u64> for EngRqedSpeedCtrlConditions2348875518 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => EngRqedSpeedCtrlConditions2348875518::ThsCtrlCndtnHsBnOptmzdTMnmzRpmO,
            3 => EngRqedSpeedCtrlConditions2348875518::StbltyOptmzdFrDrvlnEnggdAndOrI,
            1 => EngRqedSpeedCtrlConditions2348875518::StbltyOptmzdFrDrvlnDsnggdAndNnl,
            0 => EngRqedSpeedCtrlConditions2348875518::ThsSpdGvrnrGnSlctnIsAdjstdTPrvd,
            value => EngRqedSpeedCtrlConditions2348875518::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngOverrideCtrlMode2348875518 {
    SpdTrqLmtCtrlLmtSpdAndOrTrqBs,
    TrqCtrlCntrlTrqTInclddDsrdTrqVl,
    SpdCtrlGvrnSpdTInclddDsrdSpdVle,
    OvrrdDsbldDsblAnyExstngCtrlCmdd,
    XValue(u64),
}

impl From<u64> for EngOverrideCtrlMode2348875518 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngOverrideCtrlMode2348875518::SpdTrqLmtCtrlLmtSpdAndOrTrqBs,
            2 => EngOverrideCtrlMode2348875518::TrqCtrlCntrlTrqTInclddDsrdTrqVl,
            1 => EngOverrideCtrlMode2348875518::SpdCtrlGvrnSpdTInclddDsrdSpdVle,
            0 => EngOverrideCtrlMode2348875518::OvrrdDsbldDsblAnyExstngCtrlCmdd,
            value => EngOverrideCtrlMode2348875518::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransitRunStatus2566766846 {
    NotAvailable,
    ErrorCondition,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransitRunStatus2566766846 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransitRunStatus2566766846::NotAvailable,
            2 => TransitRunStatus2566766846::ErrorCondition,
            1 => TransitRunStatus2566766846::On,
            0 => TransitRunStatus2566766846::Off,
            value => TransitRunStatus2566766846::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleUseStatus2566766846 {
    NotAvailable,
    ErrorCondition,
    UnauthorizedUse,
    NormalUse,
    XValue(u64),
}

impl From<u64> for VehicleUseStatus2566766846 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => VehicleUseStatus2566766846::NotAvailable,
            2 => VehicleUseStatus2566766846::ErrorCondition,
            1 => VehicleUseStatus2566766846::UnauthorizedUse,
            0 => VehicleUseStatus2566766846::NormalUse,
            value => VehicleUseStatus2566766846::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SilentAlarmStatus2566766846 {
    NotAvailable,
    ErrorCondition,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for SilentAlarmStatus2566766846 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SilentAlarmStatus2566766846::NotAvailable,
            2 => SilentAlarmStatus2566766846::ErrorCondition,
            1 => SilentAlarmStatus2566766846::On,
            0 => SilentAlarmStatus2566766846::Off,
            value => SilentAlarmStatus2566766846::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TypeOfPassengerCount2566766846 {
    BoardingPassenger,
    AbsPassengerCount,
    ExitingPassengerSecondPassengerStream,
    BoardingPassengerSecondPassengerStream,
    ExitingPassenger,
    XValue(u64),
}

impl From<u64> for TypeOfPassengerCount2566766846 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TypeOfPassengerCount2566766846::BoardingPassenger,
            0 => TypeOfPassengerCount2566766846::AbsPassengerCount,
            4 => TypeOfPassengerCount2566766846::ExitingPassengerSecondPassengerStream,
            3 => TypeOfPassengerCount2566766846::BoardingPassengerSecondPassengerStream,
            2 => TypeOfPassengerCount2566766846::ExitingPassenger,
            value => TypeOfPassengerCount2566766846::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FareboxAlarmIdentifier2566765310 {
    X1111111agencyDefined,
    X1100000reservedToBeAssigned,
    MaintenanceAccessOutOfService,
    MntnncAccssInSrvcCnsdrdAnAlrmCn,
    PaperCurrencyJamCleared,
    PaperCurrencyJam,
    PassTransferJamCleared,
    PassTransferJam,
    FareboxResetToAutomaticMode,
    FareboxSetInManualBypass,
    CoinDejamOperated,
    CardPassBoxFull,
    CardPassBoxLessThan75Full,
    CardPassBox75Full,
    CurrencyBoxFull,
    CurrencyBoxLessThan75Full,
    CurrencyBox75Full,
    CoinboxFull,
    Coinbox75Full,
    InsufficientFareAccepted,
    CshbxOpndInSrvcCnsdrdAnAlrmCndt,
    CashboxDoorTimeout,
    CashboxRestored,
    CashboxRemoved,
    ProbeCompleted,
    ProbeStarted,
    VoltageRestored,
    VoltageDropout,
    XValue(u64),
}

impl From<u64> for FareboxAlarmIdentifier2566765310 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            97 => FareboxAlarmIdentifier2566765310::X1111111agencyDefined,
            26 => FareboxAlarmIdentifier2566765310::X1100000reservedToBeAssigned,
            25 => FareboxAlarmIdentifier2566765310::MaintenanceAccessOutOfService,
            24 => FareboxAlarmIdentifier2566765310::MntnncAccssInSrvcCnsdrdAnAlrmCn,
            23 => FareboxAlarmIdentifier2566765310::PaperCurrencyJamCleared,
            22 => FareboxAlarmIdentifier2566765310::PaperCurrencyJam,
            21 => FareboxAlarmIdentifier2566765310::PassTransferJamCleared,
            20 => FareboxAlarmIdentifier2566765310::PassTransferJam,
            19 => FareboxAlarmIdentifier2566765310::FareboxResetToAutomaticMode,
            18 => FareboxAlarmIdentifier2566765310::FareboxSetInManualBypass,
            17 => FareboxAlarmIdentifier2566765310::CoinDejamOperated,
            16 => FareboxAlarmIdentifier2566765310::CardPassBoxFull,
            15 => FareboxAlarmIdentifier2566765310::CardPassBoxLessThan75Full,
            14 => FareboxAlarmIdentifier2566765310::CardPassBox75Full,
            13 => FareboxAlarmIdentifier2566765310::CurrencyBoxFull,
            12 => FareboxAlarmIdentifier2566765310::CurrencyBoxLessThan75Full,
            11 => FareboxAlarmIdentifier2566765310::CurrencyBox75Full,
            10 => FareboxAlarmIdentifier2566765310::CoinboxFull,
            9 => FareboxAlarmIdentifier2566765310::Coinbox75Full,
            8 => FareboxAlarmIdentifier2566765310::InsufficientFareAccepted,
            7 => FareboxAlarmIdentifier2566765310::CshbxOpndInSrvcCnsdrdAnAlrmCndt,
            6 => FareboxAlarmIdentifier2566765310::CashboxDoorTimeout,
            5 => FareboxAlarmIdentifier2566765310::CashboxRestored,
            4 => FareboxAlarmIdentifier2566765310::CashboxRemoved,
            3 => FareboxAlarmIdentifier2566765310::ProbeCompleted,
            2 => FareboxAlarmIdentifier2566765310::ProbeStarted,
            1 => FareboxAlarmIdentifier2566765310::VoltageRestored,
            0 => FareboxAlarmIdentifier2566765310::VoltageDropout,
            value => FareboxAlarmIdentifier2566765310::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FareboxEmergencyStatus2566765310 {
    NotAvailable,
    ErrorCondition,
    EmergencyCondition,
    NonemergencyCondition,
    XValue(u64),
}

impl From<u64> for FareboxEmergencyStatus2566765310 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FareboxEmergencyStatus2566765310::NotAvailable,
            2 => FareboxEmergencyStatus2566765310::ErrorCondition,
            1 => FareboxEmergencyStatus2566765310::EmergencyCondition,
            0 => FareboxEmergencyStatus2566765310::NonemergencyCondition,
            value => FareboxEmergencyStatus2566765310::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransferType2566765566 {
    X11111agencyDefined,
    Out,
    In,
    West,
    East,
    South,
    North,
    XValue(u64),
}

impl From<u64> for TransferType2566765566 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            6 => TransferType2566765566::X11111agencyDefined,
            5 => TransferType2566765566::Out,
            4 => TransferType2566765566::In,
            3 => TransferType2566765566::West,
            2 => TransferType2566765566::East,
            1 => TransferType2566765566::South,
            0 => TransferType2566765566::North,
            value => TransferType2566765566::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TypeOfService2566765566 {
    X111agencyDefined,
    ExpressService,
    LocalService,
    XValue(u64),
}

impl From<u64> for TypeOfService2566765566 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => TypeOfService2566765566::X111agencyDefined,
            1 => TypeOfService2566765566::ExpressService,
            0 => TypeOfService2566765566::LocalService,
            value => TypeOfService2566765566::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PaymentDetails2566765566 {
    X1111agencyDefined,
    X1010reservedForAssignment,
    Card,
    Pass,
    Ticket,
    Token,
    Cash,
    NotAnUpgrade,
    XValue(u64),
}

impl From<u64> for PaymentDetails2566765566 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            11 => PaymentDetails2566765566::X1111agencyDefined,
            6 => PaymentDetails2566765566::X1010reservedForAssignment,
            5 => PaymentDetails2566765566::Card,
            4 => PaymentDetails2566765566::Pass,
            3 => PaymentDetails2566765566::Ticket,
            2 => PaymentDetails2566765566::Token,
            1 => PaymentDetails2566765566::Cash,
            0 => PaymentDetails2566765566::NotAnUpgrade,
            value => PaymentDetails2566765566::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TypeOfFare2566765566 {
    X1111agencyDefined,
    X1010reservedForAssignment,
    PassB,
    PassA,
    TicketB,
    TicketA,
    TokenB,
    TokenA,
    CashNoDetail,
    XValue(u64),
}

impl From<u64> for TypeOfFare2566765566 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            11 => TypeOfFare2566765566::X1111agencyDefined,
            7 => TypeOfFare2566765566::X1010reservedForAssignment,
            6 => TypeOfFare2566765566::PassB,
            5 => TypeOfFare2566765566::PassA,
            4 => TypeOfFare2566765566::TicketB,
            3 => TypeOfFare2566765566::TicketA,
            2 => TypeOfFare2566765566::TokenB,
            1 => TypeOfFare2566765566::TokenA,
            0 => TypeOfFare2566765566::CashNoDetail,
            value => TypeOfFare2566765566::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransactionType2566765566 {
    X1111agencyDefined,
    X1011reservedForAssignment,
    Free,
    Transfer,
    Permit,
    Card,
    Pass,
    Ticket,
    Token,
    Cash,
    XValue(u64),
}

impl From<u64> for TransactionType2566765566 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            12 => TransactionType2566765566::X1111agencyDefined,
            8 => TransactionType2566765566::X1011reservedForAssignment,
            7 => TransactionType2566765566::Free,
            6 => TransactionType2566765566::Transfer,
            5 => TransactionType2566765566::Permit,
            4 => TransactionType2566765566::Card,
            3 => TransactionType2566765566::Pass,
            2 => TransactionType2566765566::Ticket,
            1 => TransactionType2566765566::Token,
            0 => TransactionType2566765566::Cash,
            value => TransactionType2566765566::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DriversFareboxSecurityCode2566765822 {
    X65535securityCode,
    FareboxIsInReportingStatus,
    XValue(u64),
}

impl From<u64> for DriversFareboxSecurityCode2566765822 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => DriversFareboxSecurityCode2566765822::X65535securityCode,
            0 => DriversFareboxSecurityCode2566765822::FareboxIsInReportingStatus,
            value => DriversFareboxSecurityCode2566765822::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TripDirection2566765822 {
    X1111agencyDefined,
    Out,
    In,
    West,
    East,
    South,
    North,
    XValue(u64),
}

impl From<u64> for TripDirection2566765822 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            6 => TripDirection2566765822::X1111agencyDefined,
            5 => TripDirection2566765822::Out,
            4 => TripDirection2566765822::In,
            3 => TripDirection2566765822::West,
            2 => TripDirection2566765822::East,
            1 => TripDirection2566765822::South,
            0 => TripDirection2566765822::North,
            value => TripDirection2566765822::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TripStatus2566765822 {
    LayoverEnd,
    LayoverStart,
    TripEnd,
    TripStart,
    Undefined,
    XValue(u64),
}

impl From<u64> for TripStatus2566765822 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            6 => TripStatus2566765822::LayoverEnd,
            5 => TripStatus2566765822::LayoverStart,
            2 => TripStatus2566765822::TripEnd,
            1 => TripStatus2566765822::TripStart,
            7 => TripStatus2566765822::Undefined,
            value => TripStatus2566765822::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FareboxServiceStatus2566765822 {
    NotAvailable,
    ErrorCondition,
    FareboxInService,
    FareboxOutOfService,
    XValue(u64),
}

impl From<u64> for FareboxServiceStatus2566765822 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FareboxServiceStatus2566765822::NotAvailable,
            2 => FareboxServiceStatus2566765822::ErrorCondition,
            1 => FareboxServiceStatus2566765822::FareboxInService,
            0 => FareboxServiceStatus2566765822::FareboxOutOfService,
            value => FareboxServiceStatus2566765822::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum StrobeActivationCtrlStatus2566766078 {
    NotAvailable,
    ErrorCondition,
    ActivateStrobe,
    DeactivateStrobe,
    XValue(u64),
}

impl From<u64> for StrobeActivationCtrlStatus2566766078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => StrobeActivationCtrlStatus2566766078::NotAvailable,
            2 => StrobeActivationCtrlStatus2566766078::ErrorCondition,
            1 => StrobeActivationCtrlStatus2566766078::ActivateStrobe,
            0 => StrobeActivationCtrlStatus2566766078::DeactivateStrobe,
            value => StrobeActivationCtrlStatus2566766078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransitDoorEnable2566766078 {
    NotAvailable,
    ErrorCondition,
    TrnstDrSttsWllOvrrdStrbActvtion,
    IgnoreTransitDoorStatus,
    XValue(u64),
}

impl From<u64> for TransitDoorEnable2566766078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransitDoorEnable2566766078::NotAvailable,
            2 => TransitDoorEnable2566766078::ErrorCondition,
            1 => TransitDoorEnable2566766078::TrnstDrSttsWllOvrrdStrbActvtion,
            0 => TransitDoorEnable2566766078::IgnoreTransitDoorStatus,
            value => TransitDoorEnable2566766078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PriorityOfRespSentByEmitter2566766078 {
    NotAvailable,
    ErrorCondition,
    To1101Reserved,
    PrrtyStByHardwareToHighPriority,
    PrrtyStByHrdwareToProbePriority,
    PrrtySetByHardwareToLowPriority,
    To1000Reserved,
    HighPriority,
    ProbePriority,
    LowPriority,
    Reserved,
    XValue(u64),
}

impl From<u64> for PriorityOfRespSentByEmitter2566766078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => PriorityOfRespSentByEmitter2566766078::NotAvailable,
            14 => PriorityOfRespSentByEmitter2566766078::ErrorCondition,
            12 => PriorityOfRespSentByEmitter2566766078::To1101Reserved,
            11 => PriorityOfRespSentByEmitter2566766078::PrrtyStByHardwareToHighPriority,
            10 => PriorityOfRespSentByEmitter2566766078::PrrtyStByHrdwareToProbePriority,
            9 => PriorityOfRespSentByEmitter2566766078::PrrtySetByHardwareToLowPriority,
            4 => PriorityOfRespSentByEmitter2566766078::To1000Reserved,
            3 => PriorityOfRespSentByEmitter2566766078::HighPriority,
            2 => PriorityOfRespSentByEmitter2566766078::ProbePriority,
            1 => PriorityOfRespSentByEmitter2566766078::LowPriority,
            0 => PriorityOfRespSentByEmitter2566766078::Reserved,
            value => PriorityOfRespSentByEmitter2566766078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum IntersectionPreemptionRqResp2566766078 {
    NotAvailable,
    ErrorCondition,
    MessageIsARespFromEmitter,
    MessageIsARqDirectedToEmitter,
    XValue(u64),
}

impl From<u64> for IntersectionPreemptionRqResp2566766078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => IntersectionPreemptionRqResp2566766078::NotAvailable,
            2 => IntersectionPreemptionRqResp2566766078::ErrorCondition,
            1 => IntersectionPreemptionRqResp2566766078::MessageIsARespFromEmitter,
            0 => IntersectionPreemptionRqResp2566766078::MessageIsARqDirectedToEmitter,
            value => IntersectionPreemptionRqResp2566766078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransitRouteIdUsage2566766078 {
    NotAvailable,
    ErrorCondition,
    TrnstRtIdUsedForInterleavedData,
    TrnstRtIdNtUsdFrInterleavedData,
    XValue(u64),
}

impl From<u64> for TransitRouteIdUsage2566766078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransitRouteIdUsage2566766078::NotAvailable,
            2 => TransitRouteIdUsage2566766078::ErrorCondition,
            1 => TransitRouteIdUsage2566766078::TrnstRtIdUsedForInterleavedData,
            0 => TransitRouteIdUsage2566766078::TrnstRtIdNtUsdFrInterleavedData,
            value => TransitRouteIdUsage2566766078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RangeCodeEnable2566766078 {
    NotAvailable,
    ErrorCondition,
    RangeCodeUsedForInterleavedData,
    RngCdeNotUsedForInterleavedData,
    XValue(u64),
}

impl From<u64> for RangeCodeEnable2566766078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RangeCodeEnable2566766078::NotAvailable,
            2 => RangeCodeEnable2566766078::ErrorCondition,
            1 => RangeCodeEnable2566766078::RangeCodeUsedForInterleavedData,
            0 => RangeCodeEnable2566766078::RngCdeNotUsedForInterleavedData,
            value => RangeCodeEnable2566766078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PcuSupplySolenoidStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for PcuSupplySolenoidStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PcuSupplySolenoidStatus2633922814::NotAvailable,
            2 => PcuSupplySolenoidStatus2633922814::Error,
            1 => PcuSupplySolenoidStatus2633922814::On,
            0 => PcuSupplySolenoidStatus2633922814::Off,
            value => PcuSupplySolenoidStatus2633922814::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PcuCtrlSolenoidStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for PcuCtrlSolenoidStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PcuCtrlSolenoidStatus2633922814::NotAvailable,
            2 => PcuCtrlSolenoidStatus2633922814::Error,
            1 => PcuCtrlSolenoidStatus2633922814::On,
            0 => PcuCtrlSolenoidStatus2633922814::Off,
            value => PcuCtrlSolenoidStatus2633922814::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PcuDeflateSolenoidStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for PcuDeflateSolenoidStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PcuDeflateSolenoidStatus2633922814::NotAvailable,
            2 => PcuDeflateSolenoidStatus2633922814::Error,
            1 => PcuDeflateSolenoidStatus2633922814::On,
            0 => PcuDeflateSolenoidStatus2633922814::Off,
            value => PcuDeflateSolenoidStatus2633922814::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TirePressSupplySwitchStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TirePressSupplySwitchStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TirePressSupplySwitchStatus2633922814::NotAvailable,
            2 => TirePressSupplySwitchStatus2633922814::Error,
            1 => TirePressSupplySwitchStatus2633922814::On,
            0 => TirePressSupplySwitchStatus2633922814::Off,
            value => TirePressSupplySwitchStatus2633922814::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PcuSteerSolenoidStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for PcuSteerSolenoidStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PcuSteerSolenoidStatus2633922814::NotAvailable,
            2 => PcuSteerSolenoidStatus2633922814::Error,
            1 => PcuSteerSolenoidStatus2633922814::On,
            0 => PcuSteerSolenoidStatus2633922814::Off,
            value => PcuSteerSolenoidStatus2633922814::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PcuDriveSolenoidStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for PcuDriveSolenoidStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PcuDriveSolenoidStatus2633922814::NotAvailable,
            2 => PcuDriveSolenoidStatus2633922814::Error,
            1 => PcuDriveSolenoidStatus2633922814::On,
            0 => PcuDriveSolenoidStatus2633922814::Off,
            value => PcuDriveSolenoidStatus2633922814::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DriveChannelMode2633922814 {
    NotAvailable,
    ErrorCondition,
    X1101reserved,
    PressCheck,
    DfltWtSystmWllDfltWhnCndtnsAllw,
    InfltWtSystmWllInfltWhnCndtnsAl,
    Confirm,
    Deflate,
    Inflate,
    Maintain,
    XValue(u64),
}

impl From<u64> for DriveChannelMode2633922814 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => DriveChannelMode2633922814::NotAvailable,
            14 => DriveChannelMode2633922814::ErrorCondition,
            7 => DriveChannelMode2633922814::X1101reserved,
            6 => DriveChannelMode2633922814::PressCheck,
            5 => DriveChannelMode2633922814::DfltWtSystmWllDfltWhnCndtnsAllw,
            4 => DriveChannelMode2633922814::InfltWtSystmWllInfltWhnCndtnsAl,
            3 => DriveChannelMode2633922814::Confirm,
            2 => DriveChannelMode2633922814::Deflate,
            1 => DriveChannelMode2633922814::Inflate,
            0 => DriveChannelMode2633922814::Maintain,
            value => DriveChannelMode2633922814::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerTagChannelMode2633922814 {
    NotAvailable,
    ErrorCondition,
    X1101reserved,
    PressCheck,
    DfltWtSystmWllDfltWhnCndtnsAllw,
    InfltWtSystmWllInfltWhnCndtnsAl,
    Confirm,
    Deflate,
    Inflate,
    Maintain,
    XValue(u64),
}

impl From<u64> for TrailerTagChannelMode2633922814 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => TrailerTagChannelMode2633922814::NotAvailable,
            14 => TrailerTagChannelMode2633922814::ErrorCondition,
            7 => TrailerTagChannelMode2633922814::X1101reserved,
            6 => TrailerTagChannelMode2633922814::PressCheck,
            5 => TrailerTagChannelMode2633922814::DfltWtSystmWllDfltWhnCndtnsAllw,
            4 => TrailerTagChannelMode2633922814::InfltWtSystmWllInfltWhnCndtnsAl,
            3 => TrailerTagChannelMode2633922814::Confirm,
            2 => TrailerTagChannelMode2633922814::Deflate,
            1 => TrailerTagChannelMode2633922814::Inflate,
            0 => TrailerTagChannelMode2633922814::Maintain,
            value => TrailerTagChannelMode2633922814::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SteerChannelMode2633922814 {
    NotAvailable,
    ErrorCondition,
    X1101reserved,
    PressCheck,
    DfltWtSystmWllDfltWhnCndtnsAllw,
    InfltWtSystmWllInfltWhnCndtnsAl,
    Confirm,
    Deflate,
    Inflate,
    Maintain,
    XValue(u64),
}

impl From<u64> for SteerChannelMode2633922814 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => SteerChannelMode2633922814::NotAvailable,
            14 => SteerChannelMode2633922814::ErrorCondition,
            7 => SteerChannelMode2633922814::X1101reserved,
            6 => SteerChannelMode2633922814::PressCheck,
            5 => SteerChannelMode2633922814::DfltWtSystmWllDfltWhnCndtnsAllw,
            4 => SteerChannelMode2633922814::InfltWtSystmWllInfltWhnCndtnsAl,
            3 => SteerChannelMode2633922814::Confirm,
            2 => SteerChannelMode2633922814::Deflate,
            1 => SteerChannelMode2633922814::Inflate,
            0 => SteerChannelMode2633922814::Maintain,
            value => SteerChannelMode2633922814::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PcuTrailerTagPushSolenoidStatus2633922814 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for PcuTrailerTagPushSolenoidStatus2633922814 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => PcuTrailerTagPushSolenoidStatus2633922814::NotAvailable,
            2 => PcuTrailerTagPushSolenoidStatus2633922814::Error,
            1 => PcuTrailerTagPushSolenoidStatus2633922814::On,
            0 => PcuTrailerTagPushSolenoidStatus2633922814::Off,
            value => PcuTrailerTagPushSolenoidStatus2633922814::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TirePressThresholdDetection2566845694 {
    NotAvailable,
    ErrorIndicator,
    NotDefined,
    ExtrmUndrPrssTrPrssrIsAtALvlWhr,
    UndrPrssTrPrssrIsLwrThnThPrssrD,
    NWrnngPrssTrPrssrIsWthnThThrshl,
    OvrPrssTrPrssrIsHghrThnThPrssrD,
    ExtrmOvrPrssTrPrssrIsAtALvlWhrT,
    XValue(u64),
}

impl From<u64> for TirePressThresholdDetection2566845694 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TirePressThresholdDetection2566845694::NotAvailable,
            6 => TirePressThresholdDetection2566845694::ErrorIndicator,
            5 => TirePressThresholdDetection2566845694::NotDefined,
            4 => TirePressThresholdDetection2566845694::ExtrmUndrPrssTrPrssrIsAtALvlWhr,
            3 => TirePressThresholdDetection2566845694::UndrPrssTrPrssrIsLwrThnThPrssrD,
            2 => TirePressThresholdDetection2566845694::NWrnngPrssTrPrssrIsWthnThThrshl,
            1 => TirePressThresholdDetection2566845694::OvrPrssTrPrssrIsHghrThnThPrssrD,
            0 => TirePressThresholdDetection2566845694::ExtrmOvrPrssTrPrssrIsAtALvlWhrT,
            value => TirePressThresholdDetection2566845694::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CtiWheelEndElectricalFault2566845694 {
    NotSupported,
    Error,
    NotDefined,
    Ok,
    XValue(u64),
}

impl From<u64> for CtiWheelEndElectricalFault2566845694 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CtiWheelEndElectricalFault2566845694::NotSupported,
            2 => CtiWheelEndElectricalFault2566845694::Error,
            1 => CtiWheelEndElectricalFault2566845694::NotDefined,
            0 => CtiWheelEndElectricalFault2566845694::Ok,
            value => CtiWheelEndElectricalFault2566845694::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CtiTireStatus2566845694 {
    NotSupported,
    Error,
    TireLeakDetected,
    Ok,
    XValue(u64),
}

impl From<u64> for CtiTireStatus2566845694 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CtiTireStatus2566845694::NotSupported,
            2 => CtiTireStatus2566845694::Error,
            1 => CtiTireStatus2566845694::TireLeakDetected,
            0 => CtiTireStatus2566845694::Ok,
            value => CtiTireStatus2566845694::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CtiWheelSensorStatus2566845694 {
    NotSupported,
    NotDefined,
    On,
    OffIsolatedFromCtiPressCtrl,
    XValue(u64),
}

impl From<u64> for CtiWheelSensorStatus2566845694 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CtiWheelSensorStatus2566845694::NotSupported,
            2 => CtiWheelSensorStatus2566845694::NotDefined,
            1 => CtiWheelSensorStatus2566845694::On,
            0 => CtiWheelSensorStatus2566845694::OffIsolatedFromCtiPressCtrl,
            value => CtiWheelSensorStatus2566845694::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DirectionIndicator2365484286 {
    NotAvailable,
    Error,
    Reverse,
    Forward,
    XValue(u64),
}

impl From<u64> for DirectionIndicator2365484286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => DirectionIndicator2365484286::NotAvailable,
            2 => DirectionIndicator2365484286::Error,
            1 => DirectionIndicator2365484286::Reverse,
            0 => DirectionIndicator2365484286::Forward,
            value => DirectionIndicator2365484286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TachographPerformance2365484286 {
    NotAvailable,
    Error,
    PerformanceAnalysis,
    NormalPerformance,
    XValue(u64),
}

impl From<u64> for TachographPerformance2365484286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TachographPerformance2365484286::NotAvailable,
            2 => TachographPerformance2365484286::Error,
            1 => TachographPerformance2365484286::PerformanceAnalysis,
            0 => TachographPerformance2365484286::NormalPerformance,
            value => TachographPerformance2365484286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HandlingInformation2365484286 {
    NotAvailable,
    Error,
    HandlingInformation,
    NoHandlingInformation,
    XValue(u64),
}

impl From<u64> for HandlingInformation2365484286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => HandlingInformation2365484286::NotAvailable,
            2 => HandlingInformation2365484286::Error,
            1 => HandlingInformation2365484286::HandlingInformation,
            0 => HandlingInformation2365484286::NoHandlingInformation,
            value => HandlingInformation2365484286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SystemEvent2365484286 {
    NotAvailable,
    Error,
    TachographEvent,
    NoTachographEvent,
    XValue(u64),
}

impl From<u64> for SystemEvent2365484286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SystemEvent2365484286::NotAvailable,
            2 => SystemEvent2365484286::Error,
            1 => SystemEvent2365484286::TachographEvent,
            0 => SystemEvent2365484286::NoTachographEvent,
            value => SystemEvent2365484286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DriverCardDriver22365484286 {
    NotAvailable,
    Error,
    DriverCardPresent,
    DriverCardNotPresent,
    XValue(u64),
}

impl From<u64> for DriverCardDriver22365484286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => DriverCardDriver22365484286::NotAvailable,
            2 => DriverCardDriver22365484286::Error,
            1 => DriverCardDriver22365484286::DriverCardPresent,
            0 => DriverCardDriver22365484286::DriverCardNotPresent,
            value => DriverCardDriver22365484286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Driver2TimeRelatedStates2365484286 {
    NotAvailable,
    Error,
    Other,
    X1100reserved,
    Limit616HReached,
    Limit515MinBefore16H,
    Limit49HReached,
    Limit315MinBefore9H,
    Limit24HReached,
    Limit115MinBefore4H,
    NormalNoLimitsReached,
    XValue(u64),
}

impl From<u64> for Driver2TimeRelatedStates2365484286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => Driver2TimeRelatedStates2365484286::NotAvailable,
            14 => Driver2TimeRelatedStates2365484286::Error,
            13 => Driver2TimeRelatedStates2365484286::Other,
            7 => Driver2TimeRelatedStates2365484286::X1100reserved,
            6 => Driver2TimeRelatedStates2365484286::Limit616HReached,
            5 => Driver2TimeRelatedStates2365484286::Limit515MinBefore16H,
            4 => Driver2TimeRelatedStates2365484286::Limit49HReached,
            3 => Driver2TimeRelatedStates2365484286::Limit315MinBefore9H,
            2 => Driver2TimeRelatedStates2365484286::Limit24HReached,
            1 => Driver2TimeRelatedStates2365484286::Limit115MinBefore4H,
            0 => Driver2TimeRelatedStates2365484286::NormalNoLimitsReached,
            value => Driver2TimeRelatedStates2365484286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Overspeed2365484286 {
    NotAvailable,
    Error,
    Overspeed,
    NoOverspeed,
    XValue(u64),
}

impl From<u64> for Overspeed2365484286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Overspeed2365484286::NotAvailable,
            2 => Overspeed2365484286::Error,
            1 => Overspeed2365484286::Overspeed,
            0 => Overspeed2365484286::NoOverspeed,
            value => Overspeed2365484286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DriverCardDriver12365484286 {
    NotAvailable,
    Error,
    DriverCardPresent,
    DriverCardNotPresent,
    XValue(u64),
}

impl From<u64> for DriverCardDriver12365484286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => DriverCardDriver12365484286::NotAvailable,
            2 => DriverCardDriver12365484286::Error,
            1 => DriverCardDriver12365484286::DriverCardPresent,
            0 => DriverCardDriver12365484286::DriverCardNotPresent,
            value => DriverCardDriver12365484286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Driver1TimeRelatedStates2365484286 {
    NotAvailable,
    Error,
    Other,
    X1100reserved,
    Limit616HReached,
    Limit515MinBefore16H,
    Limit49HReached,
    Limit315MinBefore9H,
    Limit24HReached,
    Limit115MinBefore4H,
    NormalNoLimitsReached,
    XValue(u64),
}

impl From<u64> for Driver1TimeRelatedStates2365484286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => Driver1TimeRelatedStates2365484286::NotAvailable,
            14 => Driver1TimeRelatedStates2365484286::Error,
            13 => Driver1TimeRelatedStates2365484286::Other,
            7 => Driver1TimeRelatedStates2365484286::X1100reserved,
            6 => Driver1TimeRelatedStates2365484286::Limit616HReached,
            5 => Driver1TimeRelatedStates2365484286::Limit515MinBefore16H,
            4 => Driver1TimeRelatedStates2365484286::Limit49HReached,
            3 => Driver1TimeRelatedStates2365484286::Limit315MinBefore9H,
            2 => Driver1TimeRelatedStates2365484286::Limit24HReached,
            1 => Driver1TimeRelatedStates2365484286::Limit115MinBefore4H,
            0 => Driver1TimeRelatedStates2365484286::NormalNoLimitsReached,
            value => Driver1TimeRelatedStates2365484286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DriveRecognize2365484286 {
    NotAvailable,
    Error,
    VehicleMotionDetected,
    VehicleMotionNotDetected,
    XValue(u64),
}

impl From<u64> for DriveRecognize2365484286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => DriveRecognize2365484286::NotAvailable,
            2 => DriveRecognize2365484286::Error,
            1 => DriveRecognize2365484286::VehicleMotionDetected,
            0 => DriveRecognize2365484286::VehicleMotionNotDetected,
            value => DriveRecognize2365484286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Driver2WorkingState2365484286 {
    NotAvailable,
    Error,
    X101reserved,
    DriveBehindWheel,
    WrkLdngUnldingWorkingInAnOffice,
    DriverAvailableShortBreak,
    RestSleeping,
    XValue(u64),
}

impl From<u64> for Driver2WorkingState2365484286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => Driver2WorkingState2365484286::NotAvailable,
            6 => Driver2WorkingState2365484286::Error,
            4 => Driver2WorkingState2365484286::X101reserved,
            3 => Driver2WorkingState2365484286::DriveBehindWheel,
            2 => Driver2WorkingState2365484286::WrkLdngUnldingWorkingInAnOffice,
            1 => Driver2WorkingState2365484286::DriverAvailableShortBreak,
            0 => Driver2WorkingState2365484286::RestSleeping,
            value => Driver2WorkingState2365484286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Driver1WorkingState2365484286 {
    NotAvailable,
    Error,
    X101reserved,
    DriveBehindWheel,
    WrkLdngUnldingWorkingInAnOffice,
    DriverAvailableShortBreak,
    RestSleeping,
    XValue(u64),
}

impl From<u64> for Driver1WorkingState2365484286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => Driver1WorkingState2365484286::NotAvailable,
            6 => Driver1WorkingState2365484286::Error,
            4 => Driver1WorkingState2365484286::X101reserved,
            3 => Driver1WorkingState2365484286::DriveBehindWheel,
            2 => Driver1WorkingState2365484286::WrkLdngUnldingWorkingInAnOffice,
            1 => Driver1WorkingState2365484286::DriverAvailableShortBreak,
            0 => Driver1WorkingState2365484286::RestSleeping,
            value => Driver1WorkingState2365484286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrnsShftSlctorDisplayModeSwitch2348941054 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TrnsShftSlctorDisplayModeSwitch2348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrnsShftSlctorDisplayModeSwitch2348941054::NotAvailable,
            2 => TrnsShftSlctorDisplayModeSwitch2348941054::Error,
            1 => TrnsShftSlctorDisplayModeSwitch2348941054::On,
            0 => TrnsShftSlctorDisplayModeSwitch2348941054::Off,
            value => TrnsShftSlctorDisplayModeSwitch2348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransMode42348941054 {
    TakeNoAction,
    Reserved,
    Enable,
    Disable,
    XValue(u64),
}

impl From<u64> for TransMode42348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransMode42348941054::TakeNoAction,
            2 => TransMode42348941054::Reserved,
            1 => TransMode42348941054::Enable,
            0 => TransMode42348941054::Disable,
            value => TransMode42348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransMode32348941054 {
    TakeNoAction,
    Reserved,
    Enable,
    Disable,
    XValue(u64),
}

impl From<u64> for TransMode32348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransMode32348941054::TakeNoAction,
            2 => TransMode32348941054::Reserved,
            1 => TransMode32348941054::Enable,
            0 => TransMode32348941054::Disable,
            value => TransMode32348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransMode22348941054 {
    TakeNoAction,
    Reserved,
    Enable,
    Disable,
    XValue(u64),
}

impl From<u64> for TransMode22348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransMode22348941054::TakeNoAction,
            2 => TransMode22348941054::Reserved,
            1 => TransMode22348941054::Enable,
            0 => TransMode22348941054::Disable,
            value => TransMode22348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransMode12348941054 {
    TakeNoAction,
    Reserved,
    Enable,
    Disable,
    XValue(u64),
}

impl From<u64> for TransMode12348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransMode12348941054::TakeNoAction,
            2 => TransMode12348941054::Reserved,
            1 => TransMode12348941054::Enable,
            0 => TransMode12348941054::Disable,
            value => TransMode12348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DisengageDiffLockRqCentralRear2348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u64),
}

impl From<u64> for DisengageDiffLockRqCentralRear2348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => DisengageDiffLockRqCentralRear2348941054::Reserved,
            3 => DisengageDiffLockRqCentralRear2348941054::TakeNoAction,
            1 => DisengageDiffLockRqCentralRear2348941054::DisengageDiffLock,
            0 => DisengageDiffLockRqCentralRear2348941054::EngageDiffLock,
            value => DisengageDiffLockRqCentralRear2348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DisengageDiffLockRqCentralFront2348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u64),
}

impl From<u64> for DisengageDiffLockRqCentralFront2348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => DisengageDiffLockRqCentralFront2348941054::Reserved,
            3 => DisengageDiffLockRqCentralFront2348941054::TakeNoAction,
            1 => DisengageDiffLockRqCentralFront2348941054::DisengageDiffLock,
            0 => DisengageDiffLockRqCentralFront2348941054::EngageDiffLock,
            value => DisengageDiffLockRqCentralFront2348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DisengageDiffLockRqCentral2348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u64),
}

impl From<u64> for DisengageDiffLockRqCentral2348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => DisengageDiffLockRqCentral2348941054::Reserved,
            3 => DisengageDiffLockRqCentral2348941054::TakeNoAction,
            1 => DisengageDiffLockRqCentral2348941054::DisengageDiffLock,
            0 => DisengageDiffLockRqCentral2348941054::EngageDiffLock,
            value => DisengageDiffLockRqCentral2348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DisengageDiffLockRqRearAxle22348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u64),
}

impl From<u64> for DisengageDiffLockRqRearAxle22348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => DisengageDiffLockRqRearAxle22348941054::Reserved,
            3 => DisengageDiffLockRqRearAxle22348941054::TakeNoAction,
            1 => DisengageDiffLockRqRearAxle22348941054::DisengageDiffLock,
            0 => DisengageDiffLockRqRearAxle22348941054::EngageDiffLock,
            value => DisengageDiffLockRqRearAxle22348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DisengageDiffLockRqRearAxle12348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u64),
}

impl From<u64> for DisengageDiffLockRqRearAxle12348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => DisengageDiffLockRqRearAxle12348941054::Reserved,
            3 => DisengageDiffLockRqRearAxle12348941054::TakeNoAction,
            1 => DisengageDiffLockRqRearAxle12348941054::DisengageDiffLock,
            0 => DisengageDiffLockRqRearAxle12348941054::EngageDiffLock,
            value => DisengageDiffLockRqRearAxle12348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DisengageDiffLockRqFrontAxle22348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u64),
}

impl From<u64> for DisengageDiffLockRqFrontAxle22348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => DisengageDiffLockRqFrontAxle22348941054::Reserved,
            3 => DisengageDiffLockRqFrontAxle22348941054::TakeNoAction,
            1 => DisengageDiffLockRqFrontAxle22348941054::DisengageDiffLock,
            0 => DisengageDiffLockRqFrontAxle22348941054::EngageDiffLock,
            value => DisengageDiffLockRqFrontAxle22348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DisengageDiffLockRqFrontAxle12348941054 {
    Reserved,
    TakeNoAction,
    DisengageDiffLock,
    EngageDiffLock,
    XValue(u64),
}

impl From<u64> for DisengageDiffLockRqFrontAxle12348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => DisengageDiffLockRqFrontAxle12348941054::Reserved,
            3 => DisengageDiffLockRqFrontAxle12348941054::TakeNoAction,
            1 => DisengageDiffLockRqFrontAxle12348941054::DisengageDiffLock,
            0 => DisengageDiffLockRqFrontAxle12348941054::EngageDiffLock,
            value => DisengageDiffLockRqFrontAxle12348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransRqedGear2348941054 {
    Reserved,
    NeutralSelectorPos,
    ReverseSelectorPos,
    PsUnknownAndOrNoButtonsPressed,
    PrssOfMmntryBttnTRslctCrrentPos,
    BtwnRvrsAndPrkShiftSelectorPoss,
    BtwnNtrlAndRvrsShftSelectorPoss,
    BtwnDrvAndNtrlShiftSelectorPoss,
    BtwnD1AndDriveShiftSelectorPoss,
    BetweenD2AndD1ShiftSelectorPoss,
    BetweenD3AndD2ShiftSelectorPoss,
    BetweenD4AndD3ShiftSelectorPoss,
    BetweenD5AndD4ShiftSelectorPoss,
    BetweenD6AndD5ShiftSelectorPoss,
    BetweenD7AndD6ShiftSelectorPoss,
    BtwnTwoForwardShiftSelectorPoss,
    BtwnTwoReverseShiftSelectorPoss,
    BetweenTwoShiftSelectorPoss,
    D77thFrwrdSlctrPsRfrncdFrmDrive,
    D66thFrwrdSlctrPsRfrncdFrmDrive,
    D55thFrwrdSlctrPsRfrncdFrmDrive,
    D44thFrwrdSlctrPsRfrncdFrmDrive,
    D33rdFrwrdSlctrPsRfrncdFrmDrive,
    D22ndFrwrdSlctrPsRfrncdFrmDrive,
    D11stFrwrdSlctrPsRfrncdFrmDrive,
    Downshift2GearsFromCurrentPos,
    Downshift1GearFromCurrentPos,
    Upshift2GearsFromCurrentPos,
    Upshift1GearFromCurrentPos,
    ForwardLowPos,
    ParkPos,
    ForwardDrivePos,
    HoldCurrentGear,
    XValue(u64),
}

impl From<u64> for TransRqedGear2348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            61 => TransRqedGear2348941054::Reserved,
            222 => TransRqedGear2348941054::NeutralSelectorPos,
            223 => TransRqedGear2348941054::ReverseSelectorPos,
            224 => TransRqedGear2348941054::PsUnknownAndOrNoButtonsPressed,
            225 => TransRqedGear2348941054::PrssOfMmntryBttnTRslctCrrentPos,
            226 => TransRqedGear2348941054::BtwnRvrsAndPrkShiftSelectorPoss,
            227 => TransRqedGear2348941054::BtwnNtrlAndRvrsShftSelectorPoss,
            228 => TransRqedGear2348941054::BtwnDrvAndNtrlShiftSelectorPoss,
            229 => TransRqedGear2348941054::BtwnD1AndDriveShiftSelectorPoss,
            230 => TransRqedGear2348941054::BetweenD2AndD1ShiftSelectorPoss,
            231 => TransRqedGear2348941054::BetweenD3AndD2ShiftSelectorPoss,
            232 => TransRqedGear2348941054::BetweenD4AndD3ShiftSelectorPoss,
            233 => TransRqedGear2348941054::BetweenD5AndD4ShiftSelectorPoss,
            234 => TransRqedGear2348941054::BetweenD6AndD5ShiftSelectorPoss,
            235 => TransRqedGear2348941054::BetweenD7AndD6ShiftSelectorPoss,
            236 => TransRqedGear2348941054::BtwnTwoForwardShiftSelectorPoss,
            237 => TransRqedGear2348941054::BtwnTwoReverseShiftSelectorPoss,
            238 => TransRqedGear2348941054::BetweenTwoShiftSelectorPoss,
            239 => TransRqedGear2348941054::D77thFrwrdSlctrPsRfrncdFrmDrive,
            240 => TransRqedGear2348941054::D66thFrwrdSlctrPsRfrncdFrmDrive,
            241 => TransRqedGear2348941054::D55thFrwrdSlctrPsRfrncdFrmDrive,
            242 => TransRqedGear2348941054::D44thFrwrdSlctrPsRfrncdFrmDrive,
            243 => TransRqedGear2348941054::D33rdFrwrdSlctrPsRfrncdFrmDrive,
            244 => TransRqedGear2348941054::D22ndFrwrdSlctrPsRfrncdFrmDrive,
            245 => TransRqedGear2348941054::D11stFrwrdSlctrPsRfrncdFrmDrive,
            246 => TransRqedGear2348941054::Downshift2GearsFromCurrentPos,
            247 => TransRqedGear2348941054::Downshift1GearFromCurrentPos,
            248 => TransRqedGear2348941054::Upshift2GearsFromCurrentPos,
            249 => TransRqedGear2348941054::Upshift1GearFromCurrentPos,
            250 => TransRqedGear2348941054::ForwardLowPos,
            251 => TransRqedGear2348941054::ParkPos,
            252 => TransRqedGear2348941054::ForwardDrivePos,
            253 => TransRqedGear2348941054::HoldCurrentGear,
            value => TransRqedGear2348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DisengageDrivelineRq2348941054 {
    Reserved,
    TakeNoAction,
    DisengageDriveline,
    AllowDrivelineEngagement,
    XValue(u64),
}

impl From<u64> for DisengageDrivelineRq2348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => DisengageDrivelineRq2348941054::Reserved,
            3 => DisengageDrivelineRq2348941054::TakeNoAction,
            1 => DisengageDrivelineRq2348941054::DisengageDriveline,
            0 => DisengageDrivelineRq2348941054::AllowDrivelineEngagement,
            value => DisengageDrivelineRq2348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TorqueConverterLockupDisableRq2348941054 {
    Reserved,
    TakeNoAction,
    DisableTorqueConvertorLockup,
    AllowTorqueConvertorLockup,
    XValue(u64),
}

impl From<u64> for TorqueConverterLockupDisableRq2348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => TorqueConverterLockupDisableRq2348941054::Reserved,
            3 => TorqueConverterLockupDisableRq2348941054::TakeNoAction,
            1 => TorqueConverterLockupDisableRq2348941054::DisableTorqueConvertorLockup,
            0 => TorqueConverterLockupDisableRq2348941054::AllowTorqueConvertorLockup,
            value => TorqueConverterLockupDisableRq2348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransGearShiftInhibitRq2348941054 {
    Reserved,
    TakeNoAction,
    GearShiftsAreInhibited,
    GearShiftsAreAllowed,
    XValue(u64),
}

impl From<u64> for TransGearShiftInhibitRq2348941054 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => TransGearShiftInhibitRq2348941054::Reserved,
            3 => TransGearShiftInhibitRq2348941054::TakeNoAction,
            1 => TransGearShiftInhibitRq2348941054::GearShiftsAreInhibited,
            0 => TransGearShiftInhibitRq2348941054::GearShiftsAreAllowed,
            value => TransGearShiftInhibitRq2348941054::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngOverspeedTest2566841598 {
    NotAvailable,
    Reserved,
    EngOverspeedTestActive,
    EngOverspeedTestNotActive,
    XValue(u64),
}

impl From<u64> for EngOverspeedTest2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngOverspeedTest2566841598::NotAvailable,
            2 => EngOverspeedTest2566841598::Reserved,
            1 => EngOverspeedTest2566841598::EngOverspeedTestActive,
            0 => EngOverspeedTest2566841598::EngOverspeedTestNotActive,
            value => EngOverspeedTest2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAirShutoffCmdStatus2566841598 {
    ArShtffDsbldNtAttmptngTShtffEng,
    NotAvailable,
    Reserved,
    ArShtffEnbldAttmptngTShtffEngAr,
    XValue(u64),
}

impl From<u64> for EngAirShutoffCmdStatus2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            0 => EngAirShutoffCmdStatus2566841598::ArShtffDsbldNtAttmptngTShtffEng,
            3 => EngAirShutoffCmdStatus2566841598::NotAvailable,
            2 => EngAirShutoffCmdStatus2566841598::Reserved,
            1 => EngAirShutoffCmdStatus2566841598::ArShtffEnbldAttmptngTShtffEngAr,
            value => EngAirShutoffCmdStatus2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAlarmOutputCmdStatus2566841598 {
    NotAvailable,
    Reserved,
    EngAlarmOutputCmdActive,
    EngAlarmOutputCmdNotActive,
    XValue(u64),
}

impl From<u64> for EngAlarmOutputCmdStatus2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngAlarmOutputCmdStatus2566841598::NotAvailable,
            2 => EngAlarmOutputCmdStatus2566841598::Reserved,
            1 => EngAlarmOutputCmdStatus2566841598::EngAlarmOutputCmdActive,
            0 => EngAlarmOutputCmdStatus2566841598::EngAlarmOutputCmdNotActive,
            value => EngAlarmOutputCmdStatus2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAlarmAcknowledge2566841598 {
    NotAvailable,
    Error,
    EngAlarmAcknowledgeActive,
    EngAlarmAcknowledgeNotActive,
    XValue(u64),
}

impl From<u64> for EngAlarmAcknowledge2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngAlarmAcknowledge2566841598::NotAvailable,
            2 => EngAlarmAcknowledge2566841598::Error,
            1 => EngAlarmAcknowledge2566841598::EngAlarmAcknowledgeActive,
            0 => EngAlarmAcknowledge2566841598::EngAlarmAcknowledgeNotActive,
            value => EngAlarmAcknowledge2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngProtectionSystemConfig2566841598 {
    NotAvailable,
    Error,
    EnabledInCalib,
    DisabledInCalib,
    XValue(u64),
}

impl From<u64> for EngProtectionSystemConfig2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngProtectionSystemConfig2566841598::NotAvailable,
            2 => EngProtectionSystemConfig2566841598::Error,
            1 => EngProtectionSystemConfig2566841598::EnabledInCalib,
            0 => EngProtectionSystemConfig2566841598::DisabledInCalib,
            value => EngProtectionSystemConfig2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngProtectionSystemTimerState2566841598 {
    NotAvailable,
    Error,
    Active,
    Inactive,
    XValue(u64),
}

impl From<u64> for EngProtectionSystemTimerState2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngProtectionSystemTimerState2566841598::NotAvailable,
            2 => EngProtectionSystemTimerState2566841598::Error,
            1 => EngProtectionSystemTimerState2566841598::Active,
            0 => EngProtectionSystemTimerState2566841598::Inactive,
            value => EngProtectionSystemTimerState2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngPrtectionSystemTimerOverride2566841598 {
    NotAvailable,
    Error,
    Active,
    Inactive,
    XValue(u64),
}

impl From<u64> for EngPrtectionSystemTimerOverride2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngPrtectionSystemTimerOverride2566841598::NotAvailable,
            2 => EngPrtectionSystemTimerOverride2566841598::Error,
            1 => EngPrtectionSystemTimerOverride2566841598::Active,
            0 => EngPrtectionSystemTimerOverride2566841598::Inactive,
            value => EngPrtectionSystemTimerOverride2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngPrtctnSystmApprchingShutdown2566841598 {
    NotAvailable,
    Error,
    Approaching,
    NotApproaching,
    XValue(u64),
}

impl From<u64> for EngPrtctnSystmApprchingShutdown2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngPrtctnSystmApprchingShutdown2566841598::NotAvailable,
            2 => EngPrtctnSystmApprchingShutdown2566841598::Error,
            1 => EngPrtctnSystmApprchingShutdown2566841598::Approaching,
            0 => EngPrtctnSystmApprchingShutdown2566841598::NotApproaching,
            value => EngPrtctnSystmApprchingShutdown2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngPrtctionSystemHasShutdownEng2566841598 {
    No,
    XValue(u64),
}

impl From<u64> for EngPrtctionSystemHasShutdownEng2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            0 => EngPrtctionSystemHasShutdownEng2566841598::No,
            value => EngPrtctionSystemHasShutdownEng2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngWaitToStartLamp2566841598 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngWaitToStartLamp2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngWaitToStartLamp2566841598::NotAvailable,
            2 => EngWaitToStartLamp2566841598::Error,
            1 => EngWaitToStartLamp2566841598::On,
            0 => EngWaitToStartLamp2566841598::Off,
            value => EngWaitToStartLamp2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RefrigerantHighPressSwitch2566841598 {
    NotAvailable,
    Error,
    PrssTHghCmprssrCltchMyBDsngaged,
    PressNormal,
    XValue(u64),
}

impl From<u64> for RefrigerantHighPressSwitch2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RefrigerantHighPressSwitch2566841598::NotAvailable,
            2 => RefrigerantHighPressSwitch2566841598::Error,
            1 => RefrigerantHighPressSwitch2566841598::PrssTHghCmprssrCltchMyBDsngaged,
            0 => RefrigerantHighPressSwitch2566841598::PressNormal,
            value => RefrigerantHighPressSwitch2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RefrigerantLowPressSwitch2566841598 {
    NotAvailable,
    Error,
    PrssTLwCmprssrCltchMyBDsengaged,
    PressNormal,
    XValue(u64),
}

impl From<u64> for RefrigerantLowPressSwitch2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RefrigerantLowPressSwitch2566841598::NotAvailable,
            2 => RefrigerantLowPressSwitch2566841598::Error,
            1 => RefrigerantLowPressSwitch2566841598::PrssTLwCmprssrCltchMyBDsengaged,
            0 => RefrigerantLowPressSwitch2566841598::PressNormal,
            value => RefrigerantLowPressSwitch2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ACHighPressFanSwitch2566841598 {
    NotAvailable,
    Error,
    PressHighFanMayBeEngaged,
    PressNormal,
    XValue(u64),
}

impl From<u64> for ACHighPressFanSwitch2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ACHighPressFanSwitch2566841598::NotAvailable,
            2 => ACHighPressFanSwitch2566841598::Error,
            1 => ACHighPressFanSwitch2566841598::PressHighFanMayBeEngaged,
            0 => ACHighPressFanSwitch2566841598::PressNormal,
            value => ACHighPressFanSwitch2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngIdleShutdownTimerFunction2566841598 {
    NotAvailable,
    Error,
    EnabledInCalib,
    DisabledInCalib,
    XValue(u64),
}

impl From<u64> for EngIdleShutdownTimerFunction2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngIdleShutdownTimerFunction2566841598::NotAvailable,
            2 => EngIdleShutdownTimerFunction2566841598::Error,
            1 => EngIdleShutdownTimerFunction2566841598::EnabledInCalib,
            0 => EngIdleShutdownTimerFunction2566841598::DisabledInCalib,
            value => EngIdleShutdownTimerFunction2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngIdleShutdownTimerState2566841598 {
    NotAvailable,
    Error,
    Active,
    Inactive,
    XValue(u64),
}

impl From<u64> for EngIdleShutdownTimerState2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngIdleShutdownTimerState2566841598::NotAvailable,
            2 => EngIdleShutdownTimerState2566841598::Error,
            1 => EngIdleShutdownTimerState2566841598::Active,
            0 => EngIdleShutdownTimerState2566841598::Inactive,
            value => EngIdleShutdownTimerState2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngIdleShutdownTimerOverride2566841598 {
    NotAvailable,
    Error,
    Active,
    Inactive,
    XValue(u64),
}

impl From<u64> for EngIdleShutdownTimerOverride2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngIdleShutdownTimerOverride2566841598::NotAvailable,
            2 => EngIdleShutdownTimerOverride2566841598::Error,
            1 => EngIdleShutdownTimerOverride2566841598::Active,
            0 => EngIdleShutdownTimerOverride2566841598::Inactive,
            value => EngIdleShutdownTimerOverride2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngIdleShutdownDriverAlertMode2566841598 {
    NotAvailable,
    Error,
    Active,
    Inactive,
    XValue(u64),
}

impl From<u64> for EngIdleShutdownDriverAlertMode2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngIdleShutdownDriverAlertMode2566841598::NotAvailable,
            2 => EngIdleShutdownDriverAlertMode2566841598::Error,
            1 => EngIdleShutdownDriverAlertMode2566841598::Active,
            0 => EngIdleShutdownDriverAlertMode2566841598::Inactive,
            value => EngIdleShutdownDriverAlertMode2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngIdleShutdownHasShutdownEng2566841598 {
    Yes,
    No,
    XValue(u64),
}

impl From<u64> for EngIdleShutdownHasShutdownEng2566841598 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EngIdleShutdownHasShutdownEng2566841598::Yes,
            0 => EngIdleShutdownHasShutdownEng2566841598::No,
            value => EngIdleShutdownHasShutdownEng2566841598::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngBuildHoursReset2631859966 {
    Reserved,
    TakeNoAction,
    Reset,
    DoNotReset,
    XValue(u64),
}

impl From<u64> for EngBuildHoursReset2631859966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => EngBuildHoursReset2631859966::Reserved,
            3 => EngBuildHoursReset2631859966::TakeNoAction,
            1 => EngBuildHoursReset2631859966::Reset,
            0 => EngBuildHoursReset2631859966::DoNotReset,
            value => EngBuildHoursReset2631859966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TripGroup2Proprietary2631859966 {
    Reserved,
    NotApplicable,
    Reset,
    TakeNoAction,
    XValue(u64),
}

impl From<u64> for TripGroup2Proprietary2631859966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => TripGroup2Proprietary2631859966::Reserved,
            3 => TripGroup2Proprietary2631859966::NotApplicable,
            1 => TripGroup2Proprietary2631859966::Reset,
            0 => TripGroup2Proprietary2631859966::TakeNoAction,
            value => TripGroup2Proprietary2631859966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TripGroup12631859966 {
    Reserved,
    NotApplicable,
    Reset,
    TakeNoAction,
    XValue(u64),
}

impl From<u64> for TripGroup12631859966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => TripGroup12631859966::Reserved,
            3 => TripGroup12631859966::NotApplicable,
            1 => TripGroup12631859966::Reset,
            0 => TripGroup12631859966::TakeNoAction,
            value => TripGroup12631859966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RetarderLocation2566840830 {
    NotAvailable,
    Other,
    X1101notDefined,
    Trailer,
    Driveline,
    TransOutput,
    TransInput,
    EngExhaustBrake,
    EngCompressionReleaseBrake,
    XValue(u64),
}

impl From<u64> for RetarderLocation2566840830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => RetarderLocation2566840830::NotAvailable,
            14 => RetarderLocation2566840830::Other,
            6 => RetarderLocation2566840830::X1101notDefined,
            5 => RetarderLocation2566840830::Trailer,
            4 => RetarderLocation2566840830::Driveline,
            3 => RetarderLocation2566840830::TransOutput,
            2 => RetarderLocation2566840830::TransInput,
            1 => RetarderLocation2566840830::EngExhaustBrake,
            0 => RetarderLocation2566840830::EngCompressionReleaseBrake,
            value => RetarderLocation2566840830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RetarderType2566840830 {
    NotAvailable,
    Other,
    X1101notDefined,
    Exhaust,
    CompressionRelease,
    CooledFriction,
    Hyd,
    ElectricMagnetic,
    XValue(u64),
}

impl From<u64> for RetarderType2566840830 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => RetarderType2566840830::NotAvailable,
            14 => RetarderType2566840830::Other,
            5 => RetarderType2566840830::X1101notDefined,
            4 => RetarderType2566840830::Exhaust,
            3 => RetarderType2566840830::CompressionRelease,
            2 => RetarderType2566840830::CooledFriction,
            1 => RetarderType2566840830::Hyd,
            0 => RetarderType2566840830::ElectricMagnetic,
            value => RetarderType2566840830::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OperatorPtoMemorySelectSwitch2566844670 {
    NotAvailable,
    Error,
    PtoSetSpeedMemory2Selected,
    PtoSetSpeedMemory1Selected,
    XValue(u64),
}

impl From<u64> for OperatorPtoMemorySelectSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OperatorPtoMemorySelectSwitch2566844670::NotAvailable,
            2 => OperatorPtoMemorySelectSwitch2566844670::Error,
            1 => OperatorPtoMemorySelectSwitch2566844670::PtoSetSpeedMemory2Selected,
            0 => OperatorPtoMemorySelectSwitch2566844670::PtoSetSpeedMemory1Selected,
            value => OperatorPtoMemorySelectSwitch2566844670::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngPtoAccelerateSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngPtoAccelerateSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngPtoAccelerateSwitch2566844670::NotAvailable,
            2 => EngPtoAccelerateSwitch2566844670::Error,
            1 => EngPtoAccelerateSwitch2566844670::On,
            0 => EngPtoAccelerateSwitch2566844670::Off,
            value => EngPtoAccelerateSwitch2566844670::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngPtoResumeSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngPtoResumeSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngPtoResumeSwitch2566844670::NotAvailable,
            2 => EngPtoResumeSwitch2566844670::Error,
            1 => EngPtoResumeSwitch2566844670::On,
            0 => EngPtoResumeSwitch2566844670::Off,
            value => EngPtoResumeSwitch2566844670::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngPtoCoastDecelerateSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngPtoCoastDecelerateSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngPtoCoastDecelerateSwitch2566844670::NotAvailable,
            2 => EngPtoCoastDecelerateSwitch2566844670::Error,
            1 => EngPtoCoastDecelerateSwitch2566844670::On,
            0 => EngPtoCoastDecelerateSwitch2566844670::Off,
            value => EngPtoCoastDecelerateSwitch2566844670::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngPtoSetSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngPtoSetSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngPtoSetSwitch2566844670::NotAvailable,
            2 => EngPtoSetSwitch2566844670::Error,
            1 => EngPtoSetSwitch2566844670::On,
            0 => EngPtoSetSwitch2566844670::Off,
            value => EngPtoSetSwitch2566844670::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngRmtPtoVriableSpeedCtrlSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngRmtPtoVriableSpeedCtrlSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngRmtPtoVriableSpeedCtrlSwitch2566844670::NotAvailable,
            2 => EngRmtPtoVriableSpeedCtrlSwitch2566844670::Error,
            1 => EngRmtPtoVriableSpeedCtrlSwitch2566844670::On,
            0 => EngRmtPtoVriableSpeedCtrlSwitch2566844670::Off,
            value => EngRmtPtoVriableSpeedCtrlSwitch2566844670::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngRmtPtoPrprgrmmdSpdCtrlSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngRmtPtoPrprgrmmdSpdCtrlSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngRmtPtoPrprgrmmdSpdCtrlSwitch2566844670::NotAvailable,
            2 => EngRmtPtoPrprgrmmdSpdCtrlSwitch2566844670::Error,
            1 => EngRmtPtoPrprgrmmdSpdCtrlSwitch2566844670::On,
            0 => EngRmtPtoPrprgrmmdSpdCtrlSwitch2566844670::Off,
            value => EngRmtPtoPrprgrmmdSpdCtrlSwitch2566844670::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngPtoEnableSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngPtoEnableSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngPtoEnableSwitch2566844670::NotAvailable,
            2 => EngPtoEnableSwitch2566844670::Error,
            1 => EngPtoEnableSwitch2566844670::On,
            0 => EngPtoEnableSwitch2566844670::Off,
            value => EngPtoEnableSwitch2566844670::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RmtPtoPrprgrmmdSpeedCtrlSwitch22566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for RmtPtoPrprgrmmdSpeedCtrlSwitch22566844670 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RmtPtoPrprgrmmdSpeedCtrlSwitch22566844670::NotAvailable,
            2 => RmtPtoPrprgrmmdSpeedCtrlSwitch22566844670::Error,
            1 => RmtPtoPrprgrmmdSpeedCtrlSwitch22566844670::On,
            0 => RmtPtoPrprgrmmdSpeedCtrlSwitch22566844670::Off,
            value => RmtPtoPrprgrmmdSpeedCtrlSwitch22566844670::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxInputIgnoreSwitch2566844670 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for AuxInputIgnoreSwitch2566844670 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxInputIgnoreSwitch2566844670::NotAvailable,
            2 => AuxInputIgnoreSwitch2566844670::Error,
            1 => AuxInputIgnoreSwitch2566844670::On,
            0 => AuxInputIgnoreSwitch2566844670::Off,
            value => AuxInputIgnoreSwitch2566844670::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RearWasherFunction2566770174 {
    NotAvailable,
    X110reserved,
    High,
    Medium,
    Low,
    Off,
    XValue(u64),
}

impl From<u64> for RearWasherFunction2566770174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => RearWasherFunction2566770174::NotAvailable,
            4 => RearWasherFunction2566770174::X110reserved,
            3 => RearWasherFunction2566770174::High,
            2 => RearWasherFunction2566770174::Medium,
            1 => RearWasherFunction2566770174::Low,
            0 => RearWasherFunction2566770174::Off,
            value => RearWasherFunction2566770174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FrontOperatorWasherSwitch2566770174 {
    NotAvailable,
    X110reserved,
    High,
    Medium,
    Low,
    Off,
    XValue(u64),
}

impl From<u64> for FrontOperatorWasherSwitch2566770174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => FrontOperatorWasherSwitch2566770174::NotAvailable,
            4 => FrontOperatorWasherSwitch2566770174::X110reserved,
            3 => FrontOperatorWasherSwitch2566770174::High,
            2 => FrontOperatorWasherSwitch2566770174::Medium,
            1 => FrontOperatorWasherSwitch2566770174::Low,
            0 => FrontOperatorWasherSwitch2566770174::Off,
            value => FrontOperatorWasherSwitch2566770174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FrontNonoperatorWasherSwitch2566770174 {
    NotAvailable,
    X110reserved,
    High,
    Medium,
    Low,
    Off,
    XValue(u64),
}

impl From<u64> for FrontNonoperatorWasherSwitch2566770174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => FrontNonoperatorWasherSwitch2566770174::NotAvailable,
            4 => FrontNonoperatorWasherSwitch2566770174::X110reserved,
            3 => FrontNonoperatorWasherSwitch2566770174::High,
            2 => FrontNonoperatorWasherSwitch2566770174::Medium,
            1 => FrontNonoperatorWasherSwitch2566770174::Low,
            0 => FrontNonoperatorWasherSwitch2566770174::Off,
            value => FrontNonoperatorWasherSwitch2566770174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RearWiperSwitch2566770174 {
    X1110reserved,
    Mist,
    Delayed2,
    Delayed1,
    Medium,
    NotAvailable,
    High,
    Low,
    Off,
    XValue(u64),
}

impl From<u64> for RearWiperSwitch2566770174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => RearWiperSwitch2566770174::X1110reserved,
            6 => RearWiperSwitch2566770174::Mist,
            5 => RearWiperSwitch2566770174::Delayed2,
            4 => RearWiperSwitch2566770174::Delayed1,
            2 => RearWiperSwitch2566770174::Medium,
            15 => RearWiperSwitch2566770174::NotAvailable,
            3 => RearWiperSwitch2566770174::High,
            1 => RearWiperSwitch2566770174::Low,
            0 => RearWiperSwitch2566770174::Off,
            value => RearWiperSwitch2566770174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FrontOperatorWiperSwitch2566770174 {
    X1110reserved,
    Mist,
    Delayed2,
    Delayed1,
    Medium,
    NotAvailable,
    High,
    Low,
    Off,
    XValue(u64),
}

impl From<u64> for FrontOperatorWiperSwitch2566770174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => FrontOperatorWiperSwitch2566770174::X1110reserved,
            6 => FrontOperatorWiperSwitch2566770174::Mist,
            5 => FrontOperatorWiperSwitch2566770174::Delayed2,
            4 => FrontOperatorWiperSwitch2566770174::Delayed1,
            2 => FrontOperatorWiperSwitch2566770174::Medium,
            15 => FrontOperatorWiperSwitch2566770174::NotAvailable,
            3 => FrontOperatorWiperSwitch2566770174::High,
            1 => FrontOperatorWiperSwitch2566770174::Low,
            0 => FrontOperatorWiperSwitch2566770174::Off,
            value => FrontOperatorWiperSwitch2566770174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FrontNonoperatorWiperSwitch2566770174 {
    X1110reserved,
    Mist,
    Delayed2,
    Delayed1,
    Medium,
    NotAvailable,
    High,
    Low,
    Off,
    XValue(u64),
}

impl From<u64> for FrontNonoperatorWiperSwitch2566770174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => FrontNonoperatorWiperSwitch2566770174::X1110reserved,
            6 => FrontNonoperatorWiperSwitch2566770174::Mist,
            5 => FrontNonoperatorWiperSwitch2566770174::Delayed2,
            4 => FrontNonoperatorWiperSwitch2566770174::Delayed1,
            2 => FrontNonoperatorWiperSwitch2566770174::Medium,
            15 => FrontNonoperatorWiperSwitch2566770174::NotAvailable,
            3 => FrontNonoperatorWiperSwitch2566770174::High,
            1 => FrontNonoperatorWiperSwitch2566770174::Low,
            0 => FrontNonoperatorWiperSwitch2566770174::Off,
            value => FrontNonoperatorWiperSwitch2566770174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAltDroopAuxInputSelect2566769662 {
    NotAvailable,
    ErrorCondition,
    Thr1101OnOfAltDrpSttng1Thrgh13I,
    NormalDroopSettingIsSelected,
    XValue(u64),
}

impl From<u64> for EngAltDroopAuxInputSelect2566769662 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngAltDroopAuxInputSelect2566769662::NotAvailable,
            14 => EngAltDroopAuxInputSelect2566769662::ErrorCondition,
            1 => EngAltDroopAuxInputSelect2566769662::Thr1101OnOfAltDrpSttng1Thrgh13I,
            0 => EngAltDroopAuxInputSelect2566769662::NormalDroopSettingIsSelected,
            value => EngAltDroopAuxInputSelect2566769662::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAltDroopRemoteAccelSelect2566769662 {
    NotAvailable,
    ErrorCondition,
    Thr1101OnOfAltDrpSttng1Thrgh13I,
    NormalDroopSettingIsSelected,
    XValue(u64),
}

impl From<u64> for EngAltDroopRemoteAccelSelect2566769662 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngAltDroopRemoteAccelSelect2566769662::NotAvailable,
            14 => EngAltDroopRemoteAccelSelect2566769662::ErrorCondition,
            1 => EngAltDroopRemoteAccelSelect2566769662::Thr1101OnOfAltDrpSttng1Thrgh13I,
            0 => EngAltDroopRemoteAccelSelect2566769662::NormalDroopSettingIsSelected,
            value => EngAltDroopRemoteAccelSelect2566769662::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAltDroopAccel2Select2566769662 {
    NotAvailable,
    ErrorCondition,
    Thr1101OnOfAltDrpSttng1Thrgh13I,
    NormalDroopSettingIsSelected,
    XValue(u64),
}

impl From<u64> for EngAltDroopAccel2Select2566769662 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngAltDroopAccel2Select2566769662::NotAvailable,
            14 => EngAltDroopAccel2Select2566769662::ErrorCondition,
            1 => EngAltDroopAccel2Select2566769662::Thr1101OnOfAltDrpSttng1Thrgh13I,
            0 => EngAltDroopAccel2Select2566769662::NormalDroopSettingIsSelected,
            value => EngAltDroopAccel2Select2566769662::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAltDroopAccel1Select2566769662 {
    NotAvailable,
    ErrorCondition,
    Thr1101OnOfAltDrpSttng1Thrgh13I,
    NormalDroopSettingIsSelected,
    XValue(u64),
}

impl From<u64> for EngAltDroopAccel1Select2566769662 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngAltDroopAccel1Select2566769662::NotAvailable,
            14 => EngAltDroopAccel1Select2566769662::ErrorCondition,
            1 => EngAltDroopAccel1Select2566769662::Thr1101OnOfAltDrpSttng1Thrgh13I,
            0 => EngAltDroopAccel1Select2566769662::NormalDroopSettingIsSelected,
            value => EngAltDroopAccel1Select2566769662::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAltRatingSelect2566769662 {
    IndctsThtAltPwrFling1IsSelected,
    IndctsThtMxPwrFuelingIsSelected,
    XValue(u64),
}

impl From<u64> for EngAltRatingSelect2566769662 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EngAltRatingSelect2566769662::IndctsThtAltPwrFling1IsSelected,
            0 => EngAltRatingSelect2566769662::IndctsThtMxPwrFuelingIsSelected,
            value => EngAltRatingSelect2566769662::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAltLowIdleSwitch2566769662 {
    NotAvailableUnused,
    Error,
    AltLowIdlePointIsSelected,
    DefaultLowIdlePointIsSelected,
    XValue(u64),
}

impl From<u64> for EngAltLowIdleSwitch2566769662 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngAltLowIdleSwitch2566769662::NotAvailableUnused,
            2 => EngAltLowIdleSwitch2566769662::Error,
            1 => EngAltLowIdleSwitch2566769662::AltLowIdlePointIsSelected,
            0 => EngAltLowIdleSwitch2566769662::DefaultLowIdlePointIsSelected,
            value => EngAltLowIdleSwitch2566769662::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngSynchronizationSwitch2566769662 {
    NotAvailableUnused,
    Error,
    FunctionalityIsEnabled,
    FunctionalityIsDisabled,
    XValue(u64),
}

impl From<u64> for EngSynchronizationSwitch2566769662 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngSynchronizationSwitch2566769662::NotAvailableUnused,
            2 => EngSynchronizationSwitch2566769662::Error,
            1 => EngSynchronizationSwitch2566769662::FunctionalityIsEnabled,
            0 => EngSynchronizationSwitch2566769662::FunctionalityIsDisabled,
            value => EngSynchronizationSwitch2566769662::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAuxGovernorSwitch2566769662 {
    ErrorCondition,
    AuxGovernorIsEnabled,
    AuxGovernorIsDisabled,
    XValue(u64),
}

impl From<u64> for EngAuxGovernorSwitch2566769662 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => EngAuxGovernorSwitch2566769662::ErrorCondition,
            1 => EngAuxGovernorSwitch2566769662::AuxGovernorIsEnabled,
            0 => EngAuxGovernorSwitch2566769662::AuxGovernorIsDisabled,
            value => EngAuxGovernorSwitch2566769662::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAltDroopAuxInputSelectState2566768638 {
    SaeReserved,
    Thr1101CtrlSttIsOnOfAltDrpSttng,
    CtrlStateIsNormalDroopSetting,
    XValue(u64),
}

impl From<u64> for EngAltDroopAuxInputSelectState2566768638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            14 => EngAltDroopAuxInputSelectState2566768638::SaeReserved,
            1 => EngAltDroopAuxInputSelectState2566768638::Thr1101CtrlSttIsOnOfAltDrpSttng,
            0 => EngAltDroopAuxInputSelectState2566768638::CtrlStateIsNormalDroopSetting,
            value => EngAltDroopAuxInputSelectState2566768638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAltDrpRemoteAccelSelectState2566768638 {
    NotAvailable,
    SaeReserved,
    Thr1101CtrlSttIsOnOfAltDrpSttng,
    CtrlStateIsNormalDroopSetting,
    XValue(u64),
}

impl From<u64> for EngAltDrpRemoteAccelSelectState2566768638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngAltDrpRemoteAccelSelectState2566768638::NotAvailable,
            14 => EngAltDrpRemoteAccelSelectState2566768638::SaeReserved,
            1 => EngAltDrpRemoteAccelSelectState2566768638::Thr1101CtrlSttIsOnOfAltDrpSttng,
            0 => EngAltDrpRemoteAccelSelectState2566768638::CtrlStateIsNormalDroopSetting,
            value => EngAltDrpRemoteAccelSelectState2566768638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAltDroopAccel2SelectState2566768638 {
    NotAvailable,
    SaeReserved,
    Thr1101CtrlsSttIsOnOfAltDrpSttn,
    CtrlsStateIsNormalDroopSetting,
    XValue(u64),
}

impl From<u64> for EngAltDroopAccel2SelectState2566768638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngAltDroopAccel2SelectState2566768638::NotAvailable,
            14 => EngAltDroopAccel2SelectState2566768638::SaeReserved,
            1 => EngAltDroopAccel2SelectState2566768638::Thr1101CtrlsSttIsOnOfAltDrpSttn,
            0 => EngAltDroopAccel2SelectState2566768638::CtrlsStateIsNormalDroopSetting,
            value => EngAltDroopAccel2SelectState2566768638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAltDroopAccel1SelectState2566768638 {
    NotAvailable,
    SaeReserved,
    Thr1101CtrlSttIsOnOfAltDrpSttng,
    CtrlStateIsNormalDroopSetting,
    XValue(u64),
}

impl From<u64> for EngAltDroopAccel1SelectState2566768638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngAltDroopAccel1SelectState2566768638::NotAvailable,
            14 => EngAltDroopAccel1SelectState2566768638::SaeReserved,
            1 => EngAltDroopAccel1SelectState2566768638::Thr1101CtrlSttIsOnOfAltDrpSttng,
            0 => EngAltDroopAccel1SelectState2566768638::CtrlStateIsNormalDroopSetting,
            value => EngAltDroopAccel1SelectState2566768638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAltRatingSelectState2566768638 {
    CtrlStateIsAltPowerFueling1,
    CtrlStateIsMaxPowerFueling,
    XValue(u64),
}

impl From<u64> for EngAltRatingSelectState2566768638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EngAltRatingSelectState2566768638::CtrlStateIsAltPowerFueling1,
            0 => EngAltRatingSelectState2566768638::CtrlStateIsMaxPowerFueling,
            value => EngAltRatingSelectState2566768638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAltLowIdleSelectState2566768638 {
    NotAvailable,
    SaeReserved,
    AltIdleState,
    NormalIdleState,
    XValue(u64),
}

impl From<u64> for EngAltLowIdleSelectState2566768638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngAltLowIdleSelectState2566768638::NotAvailable,
            2 => EngAltLowIdleSelectState2566768638::SaeReserved,
            1 => EngAltLowIdleSelectState2566768638::AltIdleState,
            0 => EngAltLowIdleSelectState2566768638::NormalIdleState,
            value => EngAltLowIdleSelectState2566768638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngMultiUnitSyncState2566768638 {
    NotAvailable,
    SaeReserved,
    CtrlStateIsFunctionalityEnabled,
    CtrlStteIsFunctionalityDisabled,
    XValue(u64),
}

impl From<u64> for EngMultiUnitSyncState2566768638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngMultiUnitSyncState2566768638::NotAvailable,
            2 => EngMultiUnitSyncState2566768638::SaeReserved,
            1 => EngMultiUnitSyncState2566768638::CtrlStateIsFunctionalityEnabled,
            0 => EngMultiUnitSyncState2566768638::CtrlStteIsFunctionalityDisabled,
            value => EngMultiUnitSyncState2566768638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAuxGovernorState2566768638 {
    NotAvailable,
    SaeReserved,
    CtrlStateIsAuxGovernorEnabled,
    CtrlStateIsAuxGovernorDisabled,
    XValue(u64),
}

impl From<u64> for EngAuxGovernorState2566768638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngAuxGovernorState2566768638::NotAvailable,
            2 => EngAuxGovernorState2566768638::SaeReserved,
            1 => EngAuxGovernorState2566768638::CtrlStateIsAuxGovernorEnabled,
            0 => EngAuxGovernorState2566768638::CtrlStateIsAuxGovernorDisabled,
            value => EngAuxGovernorState2566768638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HighLowBeamSwitch2365443326 {
    NotAvailable,
    Error,
    HighBeamSelected,
    LowBeamSelected,
    XValue(u64),
}

impl From<u64> for HighLowBeamSwitch2365443326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => HighLowBeamSwitch2365443326::NotAvailable,
            2 => HighLowBeamSwitch2365443326::Error,
            1 => HighLowBeamSwitch2365443326::HighBeamSelected,
            0 => HighLowBeamSwitch2365443326::LowBeamSelected,
            value => HighLowBeamSwitch2365443326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HazardLightSwitch2365443326 {
    NotAvailable,
    Error,
    HazardLampsToBeFlashing,
    HazardLampsToBeOff,
    XValue(u64),
}

impl From<u64> for HazardLightSwitch2365443326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => HazardLightSwitch2365443326::NotAvailable,
            2 => HazardLightSwitch2365443326::Error,
            1 => HazardLightSwitch2365443326::HazardLampsToBeFlashing,
            0 => HazardLightSwitch2365443326::HazardLampsToBeOff,
            value => HazardLightSwitch2365443326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TurnSignalSwitch2365443326 {
    RightTurnToBeFlashing,
    NotAvailable,
    Error,
    X1101reserved,
    LeftTurnToBeFlashing,
    NoTurnBeingSignaled,
    XValue(u64),
}

impl From<u64> for TurnSignalSwitch2365443326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => TurnSignalSwitch2365443326::RightTurnToBeFlashing,
            15 => TurnSignalSwitch2365443326::NotAvailable,
            14 => TurnSignalSwitch2365443326::Error,
            3 => TurnSignalSwitch2365443326::X1101reserved,
            1 => TurnSignalSwitch2365443326::LeftTurnToBeFlashing,
            0 => TurnSignalSwitch2365443326::NoTurnBeingSignaled,
            value => TurnSignalSwitch2365443326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MainLightSwitch2365443326 {
    X1101reserved,
    DlydOffPsByWhchThOprtrSlctsThtA,
    X0111reserved,
    HdlghtOnPsByWhchThOprtrSlctsTht,
    NotAvailable,
    Error,
    HdlghtAndPrkOnPsByWhchThOprtrSl,
    PrkOnPsByWhchThOprtrSlctsThtThP,
    OffPsByWhchThOprtrSlctsThtNnOfT,
    XValue(u64),
}

impl From<u64> for MainLightSwitch2365443326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            9 => MainLightSwitch2365443326::X1101reserved,
            8 => MainLightSwitch2365443326::DlydOffPsByWhchThOprtrSlctsThtA,
            4 => MainLightSwitch2365443326::X0111reserved,
            2 => MainLightSwitch2365443326::HdlghtOnPsByWhchThOprtrSlctsTht,
            15 => MainLightSwitch2365443326::NotAvailable,
            14 => MainLightSwitch2365443326::Error,
            3 => MainLightSwitch2365443326::HdlghtAndPrkOnPsByWhchThOprtrSl,
            1 => MainLightSwitch2365443326::PrkOnPsByWhchThOprtrSlctsThtThP,
            0 => MainLightSwitch2365443326::OffPsByWhchThOprtrSlctsThtNnOfT,
            value => MainLightSwitch2365443326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum WorkLightSwitch2365443326 {
    X1101reserved,
    WrkLghtCmbntn4OnPsByWhchThOprtr,
    WrkLghtCmbntn2OnPsByWhchThOprtr,
    NotAvailable,
    Error,
    WrkLghtCmbntn3OnPsByWhchThOprtr,
    WrkLghtCmbntn1OnPsByWhchThOprtr,
    OffPsByWhchThOprtrSlctsThtNnOfT,
    XValue(u64),
}

impl From<u64> for WorkLightSwitch2365443326 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            5 => WorkLightSwitch2365443326::X1101reserved,
            4 => WorkLightSwitch2365443326::WrkLghtCmbntn4OnPsByWhchThOprtr,
            2 => WorkLightSwitch2365443326::WrkLghtCmbntn2OnPsByWhchThOprtr,
            15 => WorkLightSwitch2365443326::NotAvailable,
            14 => WorkLightSwitch2365443326::Error,
            3 => WorkLightSwitch2365443326::WrkLghtCmbntn3OnPsByWhchThOprtr,
            1 => WorkLightSwitch2365443326::WrkLghtCmbntn1OnPsByWhchThOprtr,
            0 => WorkLightSwitch2365443326::OffPsByWhchThOprtrSlctsThtNnOfT,
            value => WorkLightSwitch2365443326::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BlackOutWorkLampSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for BlackOutWorkLampSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => BlackOutWorkLampSelect2566802686::NotSupported,
            2 => BlackOutWorkLampSelect2566802686::Reserved,
            1 => BlackOutWorkLampSelect2566802686::On,
            0 => BlackOutWorkLampSelect2566802686::Off,
            value => BlackOutWorkLampSelect2566802686::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum NightVisionIlluminatorSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for NightVisionIlluminatorSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => NightVisionIlluminatorSelect2566802686::NotSupported,
            2 => NightVisionIlluminatorSelect2566802686::Reserved,
            1 => NightVisionIlluminatorSelect2566802686::On,
            0 => NightVisionIlluminatorSelect2566802686::Off,
            value => NightVisionIlluminatorSelect2566802686::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BlackOutBrakeStopLampSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for BlackOutBrakeStopLampSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => BlackOutBrakeStopLampSelect2566802686::NotSupported,
            2 => BlackOutBrakeStopLampSelect2566802686::Reserved,
            1 => BlackOutBrakeStopLampSelect2566802686::On,
            0 => BlackOutBrakeStopLampSelect2566802686::Off,
            value => BlackOutBrakeStopLampSelect2566802686::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ConvoyDrivingLampSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for ConvoyDrivingLampSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ConvoyDrivingLampSelect2566802686::NotSupported,
            2 => ConvoyDrivingLampSelect2566802686::Reserved,
            1 => ConvoyDrivingLampSelect2566802686::On,
            0 => ConvoyDrivingLampSelect2566802686::Off,
            value => ConvoyDrivingLampSelect2566802686::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ConvoyLampSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for ConvoyLampSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ConvoyLampSelect2566802686::NotSupported,
            2 => ConvoyLampSelect2566802686::Reserved,
            1 => ConvoyLampSelect2566802686::On,
            0 => ConvoyLampSelect2566802686::Off,
            value => ConvoyLampSelect2566802686::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FrontBlackOutMarkerLampSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for FrontBlackOutMarkerLampSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FrontBlackOutMarkerLampSelect2566802686::NotSupported,
            2 => FrontBlackOutMarkerLampSelect2566802686::Reserved,
            1 => FrontBlackOutMarkerLampSelect2566802686::On,
            0 => FrontBlackOutMarkerLampSelect2566802686::Off,
            value => FrontBlackOutMarkerLampSelect2566802686::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RearBlackOutMarkerSelect2566802686 {
    NotSupported,
    Reserved,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for RearBlackOutMarkerSelect2566802686 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RearBlackOutMarkerSelect2566802686::NotSupported,
            2 => RearBlackOutMarkerSelect2566802686::Reserved,
            1 => RearBlackOutMarkerSelect2566802686::On,
            0 => RearBlackOutMarkerSelect2566802686::Off,
            value => RearBlackOutMarkerSelect2566802686::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SlowVesselModeStatus2566774014 {
    TakeNoAction,
    Reserved,
    SlowVesselModeIsActive,
    SlowVesselModeIsOff,
    XValue(u64),
}

impl From<u64> for SlowVesselModeStatus2566774014 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SlowVesselModeStatus2566774014::TakeNoAction,
            2 => SlowVesselModeStatus2566774014::Reserved,
            1 => SlowVesselModeStatus2566774014::SlowVesselModeIsActive,
            0 => SlowVesselModeStatus2566774014::SlowVesselModeIsOff,
            value => SlowVesselModeStatus2566774014::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrollingModeStatus2566774014 {
    TakeNoAction,
    Reserved,
    TrollingModeIsActive,
    TrollingModeIsOff,
    XValue(u64),
}

impl From<u64> for TrollingModeStatus2566774014 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrollingModeStatus2566774014::TakeNoAction,
            2 => TrollingModeStatus2566774014::Reserved,
            1 => TrollingModeStatus2566774014::TrollingModeIsActive,
            0 => TrollingModeStatus2566774014::TrollingModeIsOff,
            value => TrollingModeStatus2566774014::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngThrttlSynchrnztionModeStatus2566774014 {
    TakeNoAction,
    X1110reserved,
    SynchronizedMaster,
    SynchronizedStarboard,
    SynchronizedPort,
    SynchronizedCenter,
    NotSynchronized,
    XValue(u64),
}

impl From<u64> for EngThrttlSynchrnztionModeStatus2566774014 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngThrttlSynchrnztionModeStatus2566774014::TakeNoAction,
            5 => EngThrttlSynchrnztionModeStatus2566774014::X1110reserved,
            4 => EngThrttlSynchrnztionModeStatus2566774014::SynchronizedMaster,
            3 => EngThrttlSynchrnztionModeStatus2566774014::SynchronizedStarboard,
            2 => EngThrttlSynchrnztionModeStatus2566774014::SynchronizedPort,
            1 => EngThrttlSynchrnztionModeStatus2566774014::SynchronizedCenter,
            0 => EngThrttlSynchrnztionModeStatus2566774014::NotSynchronized,
            value => EngThrttlSynchrnztionModeStatus2566774014::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DisplayDeadbands2432595710 {
    NotAvailable,
    X1110reserved,
    Wide24mm,
    Standard12mm,
    Narrow45mm,
    XValue(u64),
}

impl From<u64> for DisplayDeadbands2432595710 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => DisplayDeadbands2432595710::NotAvailable,
            3 => DisplayDeadbands2432595710::X1110reserved,
            2 => DisplayDeadbands2432595710::Wide24mm,
            1 => DisplayDeadbands2432595710::Standard12mm,
            0 => DisplayDeadbands2432595710::Narrow45mm,
            value => DisplayDeadbands2432595710::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LedPatternCtrl2432595710 {
    NotAvailable,
    X1110reserved,
    X7channel,
    Offset,
    X5channel,
    XValue(u64),
}

impl From<u64> for LedPatternCtrl2432595710 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => LedPatternCtrl2432595710::NotAvailable,
            3 => LedPatternCtrl2432595710::X1110reserved,
            2 => LedPatternCtrl2432595710::X7channel,
            1 => LedPatternCtrl2432595710::Offset,
            0 => LedPatternCtrl2432595710::X5channel,
            value => LedPatternCtrl2432595710::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LedDisplayDeadbandCtrl2432595710 {
    NotAvailableNotApplicable,
    X1110reserved,
    X1mm,
    X5mm,
    X24mm,
    X12mm,
    X45mm,
    XValue(u64),
}

impl From<u64> for LedDisplayDeadbandCtrl2432595710 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => LedDisplayDeadbandCtrl2432595710::NotAvailableNotApplicable,
            5 => LedDisplayDeadbandCtrl2432595710::X1110reserved,
            4 => LedDisplayDeadbandCtrl2432595710::X1mm,
            3 => LedDisplayDeadbandCtrl2432595710::X5mm,
            2 => LedDisplayDeadbandCtrl2432595710::X24mm,
            1 => LedDisplayDeadbandCtrl2432595710::X12mm,
            0 => LedDisplayDeadbandCtrl2432595710::X45mm,
            value => LedDisplayDeadbandCtrl2432595710::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LedDisplayModeCtrl2432595710 {
    NotAvailableNotApplicable,
    X1110reserved,
    CenterOnGradeDisplayMode2,
    OffsetOnGradeDisplayMode,
    CenterOnGradeDisplayMode1,
    XValue(u64),
}

impl From<u64> for LedDisplayModeCtrl2432595710 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => LedDisplayModeCtrl2432595710::NotAvailableNotApplicable,
            3 => LedDisplayModeCtrl2432595710::X1110reserved,
            2 => LedDisplayModeCtrl2432595710::CenterOnGradeDisplayMode2,
            1 => LedDisplayModeCtrl2432595710::OffsetOnGradeDisplayMode,
            0 => LedDisplayModeCtrl2432595710::CenterOnGradeDisplayMode1,
            value => LedDisplayModeCtrl2432595710::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LedDisplayData12432595710 {
    LowCoarseLedOn,
    LowFineLedOn,
    OngradeLedOn,
    HighFineLedOn,
    HighCoarseLedOn,
    XValue(u64),
}

impl From<u64> for LedDisplayData12432595710 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            32 => LedDisplayData12432595710::LowCoarseLedOn,
            16 => LedDisplayData12432595710::LowFineLedOn,
            8 => LedDisplayData12432595710::OngradeLedOn,
            4 => LedDisplayData12432595710::HighFineLedOn,
            2 => LedDisplayData12432595710::HighCoarseLedOn,
            value => LedDisplayData12432595710::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LaserReceiverType2365486590 {
    LinearLaserReceiver,
    Reserved,
    XValue(u64),
}

impl From<u64> for LaserReceiverType2365486590 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => LaserReceiverType2365486590::LinearLaserReceiver,
            0 => LaserReceiverType2365486590::Reserved,
            value => LaserReceiverType2365486590::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LaserTracerInformation2365485566 {
    Curb,
    Stringline,
    PreviousPass,
    ValidTarget,
    LaserIsReady,
    LaserPowerIsOn,
    XValue(u64),
}

impl From<u64> for LaserTracerInformation2365485566 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            32 => LaserTracerInformation2365485566::Curb,
            16 => LaserTracerInformation2365485566::Stringline,
            8 => LaserTracerInformation2365485566::PreviousPass,
            4 => LaserTracerInformation2365485566::ValidTarget,
            2 => LaserTracerInformation2365485566::LaserIsReady,
            1 => LaserTracerInformation2365485566::LaserPowerIsOn,
            value => LaserTracerInformation2365485566::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LedDisplayData22365485566 {
    RightLedOn,
    LeftLedOn,
    DownLedOn,
    UpLedOn,
    OngradeCledOn,
    OngradeBledOn,
    OngradeAledOn,
    XValue(u64),
}

impl From<u64> for LedDisplayData22365485566 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            64 => LedDisplayData22365485566::RightLedOn,
            32 => LedDisplayData22365485566::LeftLedOn,
            16 => LedDisplayData22365485566::DownLedOn,
            8 => LedDisplayData22365485566::UpLedOn,
            4 => LedDisplayData22365485566::OngradeCledOn,
            2 => LedDisplayData22365485566::OngradeBledOn,
            1 => LedDisplayData22365485566::OngradeAledOn,
            value => LedDisplayData22365485566::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SdshftDsrdBldOffsetOperatorCtrl2364542462 {
    NotInstalled,
    ErrorIndicator,
    X1101reserved,
    AutomaticOperatorCtrlRq,
    ManualOperatorCtrlRq,
    NoOperatorCtrlRq,
    MomentaryOperatorCtrlRq,
    XValue(u64),
}

impl From<u64> for SdshftDsrdBldOffsetOperatorCtrl2364542462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => SdshftDsrdBldOffsetOperatorCtrl2364542462::NotInstalled,
            14 => SdshftDsrdBldOffsetOperatorCtrl2364542462::ErrorIndicator,
            4 => SdshftDsrdBldOffsetOperatorCtrl2364542462::X1101reserved,
            3 => SdshftDsrdBldOffsetOperatorCtrl2364542462::AutomaticOperatorCtrlRq,
            2 => SdshftDsrdBldOffsetOperatorCtrl2364542462::ManualOperatorCtrlRq,
            0 => SdshftDsrdBldOffsetOperatorCtrl2364542462::NoOperatorCtrlRq,
            1 => SdshftDsrdBldOffsetOperatorCtrl2364542462::MomentaryOperatorCtrlRq,
            value => SdshftDsrdBldOffsetOperatorCtrl2364542462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SdshftBldCtrlMdeOperatorControl2364542462 {
    NotInstalled,
    ErrorIndicator,
    X1101reserved,
    AutomaticOperatorCtrlRq,
    ManualOperatorCtrlRq,
    NoOperatorCtrlRq,
    OprtrCtrlSttCnBRdInTwWysOnMthdU,
    XValue(u64),
}

impl From<u64> for SdshftBldCtrlMdeOperatorControl2364542462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => SdshftBldCtrlMdeOperatorControl2364542462::NotInstalled,
            14 => SdshftBldCtrlMdeOperatorControl2364542462::ErrorIndicator,
            4 => SdshftBldCtrlMdeOperatorControl2364542462::X1101reserved,
            3 => SdshftBldCtrlMdeOperatorControl2364542462::AutomaticOperatorCtrlRq,
            2 => SdshftBldCtrlMdeOperatorControl2364542462::ManualOperatorCtrlRq,
            0 => SdshftBldCtrlMdeOperatorControl2364542462::NoOperatorCtrlRq,
            1 => SdshftBldCtrlMdeOperatorControl2364542462::OprtrCtrlSttCnBRdInTwWysOnMthdU,
            value => SdshftBldCtrlMdeOperatorControl2364542462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RghtDsrdBladeOffsetOperatorCtrl2364542462 {
    NotInstalled,
    ErrorIndicator,
    X1101reserved,
    DecrementOperatorCtrlRq,
    NoOperatorCtrlRq,
    OprtrCtrlSttCnBRdInTwWysOnMthdU,
    XValue(u64),
}

impl From<u64> for RghtDsrdBladeOffsetOperatorCtrl2364542462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => RghtDsrdBladeOffsetOperatorCtrl2364542462::NotInstalled,
            14 => RghtDsrdBladeOffsetOperatorCtrl2364542462::ErrorIndicator,
            3 => RghtDsrdBladeOffsetOperatorCtrl2364542462::X1101reserved,
            2 => RghtDsrdBladeOffsetOperatorCtrl2364542462::DecrementOperatorCtrlRq,
            0 => RghtDsrdBladeOffsetOperatorCtrl2364542462::NoOperatorCtrlRq,
            1 => RghtDsrdBladeOffsetOperatorCtrl2364542462::OprtrCtrlSttCnBRdInTwWysOnMthdU,
            value => RghtDsrdBladeOffsetOperatorCtrl2364542462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RghtBldeCtrlModeOperatorControl2364542462 {
    NotInstalled,
    ErrorIndicator,
    AutomaticOperatorCtrlRq,
    ManualOperatorCtrlRq,
    NoChange,
    MomentaryOperatorCtrlRq,
    XValue(u64),
}

impl From<u64> for RghtBldeCtrlModeOperatorControl2364542462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => RghtBldeCtrlModeOperatorControl2364542462::NotInstalled,
            14 => RghtBldeCtrlModeOperatorControl2364542462::ErrorIndicator,
            3 => RghtBldeCtrlModeOperatorControl2364542462::AutomaticOperatorCtrlRq,
            2 => RghtBldeCtrlModeOperatorControl2364542462::ManualOperatorCtrlRq,
            0 => RghtBldeCtrlModeOperatorControl2364542462::NoChange,
            1 => RghtBldeCtrlModeOperatorControl2364542462::MomentaryOperatorCtrlRq,
            value => RghtBldeCtrlModeOperatorControl2364542462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LftDsredBladeOffsetOperatorCtrl2364542462 {
    NotInstalled,
    ErrorIndicator,
    X1101reserved,
    DecrementOperatorCtrlRq,
    NoOperatorCtrlRq,
    OprtrCtrlSttCnBRdInTwWysOnMthdU,
    XValue(u64),
}

impl From<u64> for LftDsredBladeOffsetOperatorCtrl2364542462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => LftDsredBladeOffsetOperatorCtrl2364542462::NotInstalled,
            14 => LftDsredBladeOffsetOperatorCtrl2364542462::ErrorIndicator,
            3 => LftDsredBladeOffsetOperatorCtrl2364542462::X1101reserved,
            2 => LftDsredBladeOffsetOperatorCtrl2364542462::DecrementOperatorCtrlRq,
            0 => LftDsredBladeOffsetOperatorCtrl2364542462::NoOperatorCtrlRq,
            1 => LftDsredBladeOffsetOperatorCtrl2364542462::OprtrCtrlSttCnBRdInTwWysOnMthdU,
            value => LftDsredBladeOffsetOperatorCtrl2364542462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LftBladeCtrlModeOperatorControl2364542462 {
    NotInstalled,
    ErrorIndicator,
    X1101reserved,
    AutomaticOperatorCtrlRq,
    ManualOperatorCtrlRq,
    NoChange,
    OprtrCtrlSttCnBRdInTwWysOnMthdU,
    XValue(u64),
}

impl From<u64> for LftBladeCtrlModeOperatorControl2364542462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => LftBladeCtrlModeOperatorControl2364542462::NotInstalled,
            14 => LftBladeCtrlModeOperatorControl2364542462::ErrorIndicator,
            12 => LftBladeCtrlModeOperatorControl2364542462::X1101reserved,
            3 => LftBladeCtrlModeOperatorControl2364542462::AutomaticOperatorCtrlRq,
            2 => LftBladeCtrlModeOperatorControl2364542462::ManualOperatorCtrlRq,
            0 => LftBladeCtrlModeOperatorControl2364542462::NoChange,
            1 => LftBladeCtrlModeOperatorControl2364542462::OprtrCtrlSttCnBRdInTwWysOnMthdU,
            value => LftBladeCtrlModeOperatorControl2364542462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BladeAutoModeCmd2364542462 {
    NotSupported,
    ErrorIndicator,
    AutoNotAllowed,
    SrvcMdAtAllwdOnlyDrngSrvceModes,
    SspndAtTmprarilySuspendAutoMode,
    ActvtyAllwsAtMstDtctOprtrBfrAtA,
    AutoAllowed,
    XValue(u64),
}

impl From<u64> for BladeAutoModeCmd2364542462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => BladeAutoModeCmd2364542462::NotSupported,
            14 => BladeAutoModeCmd2364542462::ErrorIndicator,
            4 => BladeAutoModeCmd2364542462::AutoNotAllowed,
            3 => BladeAutoModeCmd2364542462::SrvcMdAtAllwdOnlyDrngSrvceModes,
            2 => BladeAutoModeCmd2364542462::SspndAtTmprarilySuspendAutoMode,
            1 => BladeAutoModeCmd2364542462::ActvtyAllwsAtMstDtctOprtrBfrAtA,
            0 => BladeAutoModeCmd2364542462::AutoAllowed,
            value => BladeAutoModeCmd2364542462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DesiredGradeOffsetSwitch2364542462 {
    NotInstalled,
    ErrorIndicator,
    DecrementButtonPressed,
    NoButtonPressed,
    SwtchSttCnBRdInTwWysOnMthdUssTh,
    XValue(u64),
}

impl From<u64> for DesiredGradeOffsetSwitch2364542462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => DesiredGradeOffsetSwitch2364542462::NotInstalled,
            14 => DesiredGradeOffsetSwitch2364542462::ErrorIndicator,
            2 => DesiredGradeOffsetSwitch2364542462::DecrementButtonPressed,
            0 => DesiredGradeOffsetSwitch2364542462::NoButtonPressed,
            1 => DesiredGradeOffsetSwitch2364542462::SwtchSttCnBRdInTwWysOnMthdUssTh,
            value => DesiredGradeOffsetSwitch2364542462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BladeCtrlModeSwitch2364542462 {
    NotInstalled,
    ErrorIndicator,
    AutomaticButtonPressed,
    ManualButtonPressed,
    NoButtonPressed,
    SwtchSttCnBRdInTwWysOnMthdUssTh,
    XValue(u64),
}

impl From<u64> for BladeCtrlModeSwitch2364542462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => BladeCtrlModeSwitch2364542462::NotInstalled,
            14 => BladeCtrlModeSwitch2364542462::ErrorIndicator,
            3 => BladeCtrlModeSwitch2364542462::AutomaticButtonPressed,
            2 => BladeCtrlModeSwitch2364542462::ManualButtonPressed,
            0 => BladeCtrlModeSwitch2364542462::NoButtonPressed,
            1 => BladeCtrlModeSwitch2364542462::SwtchSttCnBRdInTwWysOnMthdUssTh,
            value => BladeCtrlModeSwitch2364542462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FrontWheelDriveActuatorStatus2633883646 {
    NotAvailable,
    Error,
    FrontWheelDriveActuatorEngaged,
    FrntWhelDriveActuatorNotEngaged,
    XValue(u64),
}

impl From<u64> for FrontWheelDriveActuatorStatus2633883646 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FrontWheelDriveActuatorStatus2633883646::NotAvailable,
            2 => FrontWheelDriveActuatorStatus2633883646::Error,
            1 => FrontWheelDriveActuatorStatus2633883646::FrontWheelDriveActuatorEngaged,
            0 => FrontWheelDriveActuatorStatus2633883646::FrntWhelDriveActuatorNotEngaged,
            value => FrontWheelDriveActuatorStatus2633883646::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FmSstandardRqsSupported2633880062 {
    DontCare,
    Reserved,
    OnRqModeIsSupported,
    OnRqModeIsNotSupported,
    XValue(u64),
}

impl From<u64> for FmSstandardRqsSupported2633880062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FmSstandardRqsSupported2633880062::DontCare,
            2 => FmSstandardRqsSupported2633880062::Reserved,
            1 => FmSstandardRqsSupported2633880062::OnRqModeIsSupported,
            0 => FmSstandardRqsSupported2633880062::OnRqModeIsNotSupported,
            value => FmSstandardRqsSupported2633880062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FmSstandardDiagnosticsSupported2633880062 {
    DontCare,
    Reserved,
    DiagnosticsIsSupported,
    DiagnosticsIsNotSupported,
    XValue(u64),
}

impl From<u64> for FmSstandardDiagnosticsSupported2633880062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FmSstandardDiagnosticsSupported2633880062::DontCare,
            2 => FmSstandardDiagnosticsSupported2633880062::Reserved,
            1 => FmSstandardDiagnosticsSupported2633880062::DiagnosticsIsSupported,
            0 => FmSstandardDiagnosticsSupported2633880062::DiagnosticsIsNotSupported,
            value => FmSstandardDiagnosticsSupported2633880062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LnDprtureIndicationEnableStatus2566806526 {
    NotUsed,
    Reserved,
    LaneDepartureIndicationEnabled,
    LaneDepartureIndicationDisabled,
    XValue(u64),
}

impl From<u64> for LnDprtureIndicationEnableStatus2566806526 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LnDprtureIndicationEnableStatus2566806526::NotUsed,
            2 => LnDprtureIndicationEnableStatus2566806526::Reserved,
            1 => LnDprtureIndicationEnableStatus2566806526::LaneDepartureIndicationEnabled,
            0 => LnDprtureIndicationEnableStatus2566806526::LaneDepartureIndicationDisabled,
            value => LnDprtureIndicationEnableStatus2566806526::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LaneTrackingStatusLeftSide2566806526 {
    DontCareTakeNoAction,
    Reserved,
    TrackingLeftSide,
    NotTrackingLeftSide,
    XValue(u64),
}

impl From<u64> for LaneTrackingStatusLeftSide2566806526 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LaneTrackingStatusLeftSide2566806526::DontCareTakeNoAction,
            2 => LaneTrackingStatusLeftSide2566806526::Reserved,
            1 => LaneTrackingStatusLeftSide2566806526::TrackingLeftSide,
            0 => LaneTrackingStatusLeftSide2566806526::NotTrackingLeftSide,
            value => LaneTrackingStatusLeftSide2566806526::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LaneTrackingStatusRightSide2566806526 {
    DontCareTakeNoAction,
    Reserved,
    TrackingRightSide,
    NotTrackingRightSide,
    XValue(u64),
}

impl From<u64> for LaneTrackingStatusRightSide2566806526 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LaneTrackingStatusRightSide2566806526::DontCareTakeNoAction,
            2 => LaneTrackingStatusRightSide2566806526::Reserved,
            1 => LaneTrackingStatusRightSide2566806526::TrackingRightSide,
            0 => LaneTrackingStatusRightSide2566806526::NotTrackingRightSide,
            value => LaneTrackingStatusRightSide2566806526::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LaneDepartureImminentLeftSide2431649790 {
    NotUsed,
    Reserved,
    Imminent,
    NotImminent,
    XValue(u64),
}

impl From<u64> for LaneDepartureImminentLeftSide2431649790 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LaneDepartureImminentLeftSide2431649790::NotUsed,
            2 => LaneDepartureImminentLeftSide2431649790::Reserved,
            1 => LaneDepartureImminentLeftSide2431649790::Imminent,
            0 => LaneDepartureImminentLeftSide2431649790::NotImminent,
            value => LaneDepartureImminentLeftSide2431649790::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LaneDepartureImminentRightSide2431649790 {
    NotUsed,
    Reserved,
    Imminent,
    NotImminent,
    XValue(u64),
}

impl From<u64> for LaneDepartureImminentRightSide2431649790 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LaneDepartureImminentRightSide2431649790::NotUsed,
            2 => LaneDepartureImminentRightSide2431649790::Reserved,
            1 => LaneDepartureImminentRightSide2431649790::Imminent,
            0 => LaneDepartureImminentRightSide2431649790::NotImminent,
            value => LaneDepartureImminentRightSide2431649790::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngFuelLeakage22633929214 {
    NotAvailable,
    Error,
    LeakageDetected,
    NoLeakageDetected,
    XValue(u64),
}

impl From<u64> for EngFuelLeakage22633929214 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngFuelLeakage22633929214::NotAvailable,
            2 => EngFuelLeakage22633929214::Error,
            1 => EngFuelLeakage22633929214::LeakageDetected,
            0 => EngFuelLeakage22633929214::NoLeakageDetected,
            value => EngFuelLeakage22633929214::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngFuelLeakage12633929214 {
    NotAvailable,
    Error,
    LeakageDetected,
    NoLeakageDetected,
    XValue(u64),
}

impl From<u64> for EngFuelLeakage12633929214 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngFuelLeakage12633929214::NotAvailable,
            2 => EngFuelLeakage12633929214::Error,
            1 => EngFuelLeakage12633929214::LeakageDetected,
            0 => EngFuelLeakage12633929214::NoLeakageDetected,
            value => EngFuelLeakage12633929214::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FanDriveState2566831614 {
    NotAvailable,
    Other,
    EngBrake,
    Timer,
    ACSystem,
    TransRetarder,
    ManualCtrl,
    NotDefined,
    DefaultOperation,
    ExcessiveHydOilTemp,
    ExcessiveTransOilTemp,
    ExcessiveEngCoolantTemp,
    ExcessiveEngOilTemp,
    ExcessiveEngAirTemp,
    EngSystemGeneral,
    FanOff,
    XValue(u64),
}

impl From<u64> for FanDriveState2566831614 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => FanDriveState2566831614::NotAvailable,
            14 => FanDriveState2566831614::Other,
            13 => FanDriveState2566831614::EngBrake,
            12 => FanDriveState2566831614::Timer,
            11 => FanDriveState2566831614::ACSystem,
            10 => FanDriveState2566831614::TransRetarder,
            9 => FanDriveState2566831614::ManualCtrl,
            8 => FanDriveState2566831614::NotDefined,
            7 => FanDriveState2566831614::DefaultOperation,
            6 => FanDriveState2566831614::ExcessiveHydOilTemp,
            5 => FanDriveState2566831614::ExcessiveTransOilTemp,
            4 => FanDriveState2566831614::ExcessiveEngCoolantTemp,
            3 => FanDriveState2566831614::ExcessiveEngOilTemp,
            2 => FanDriveState2566831614::ExcessiveEngAirTemp,
            1 => FanDriveState2566831614::EngSystemGeneral,
            0 => FanDriveState2566831614::FanOff,
            value => FanDriveState2566831614::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngTorqueLimitFeature2566820094 {
    NotAvailable,
    X110reserved,
    CurrentTorqueRating,
    PreviousTorqueRating,
    FirstTorqueRating,
    HighestTorqueRating,
    Reserved,
    XValue(u64),
}

impl From<u64> for EngTorqueLimitFeature2566820094 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => EngTorqueLimitFeature2566820094::NotAvailable,
            5 => EngTorqueLimitFeature2566820094::X110reserved,
            4 => EngTorqueLimitFeature2566820094::CurrentTorqueRating,
            3 => EngTorqueLimitFeature2566820094::PreviousTorqueRating,
            2 => EngTorqueLimitFeature2566820094::FirstTorqueRating,
            1 => EngTorqueLimitFeature2566820094::HighestTorqueRating,
            0 => EngTorqueLimitFeature2566820094::Reserved,
            value => EngTorqueLimitFeature2566820094::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TorqueLimitingFeatureStatus2566820094 {
    NotAvailable,
    Error,
    Enabled,
    Disabled,
    XValue(u64),
}

impl From<u64> for TorqueLimitingFeatureStatus2566820094 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TorqueLimitingFeatureStatus2566820094::NotAvailable,
            2 => TorqueLimitingFeatureStatus2566820094::Error,
            1 => TorqueLimitingFeatureStatus2566820094::Enabled,
            0 => TorqueLimitingFeatureStatus2566820094::Disabled,
            value => TorqueLimitingFeatureStatus2566820094::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransMode1Indicator2566802174 {
    NotAvailable,
    Error,
    TransMode1Active,
    TransMode1NotActive,
    XValue(u64),
}

impl From<u64> for TransMode1Indicator2566802174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransMode1Indicator2566802174::NotAvailable,
            2 => TransMode1Indicator2566802174::Error,
            1 => TransMode1Indicator2566802174::TransMode1Active,
            0 => TransMode1Indicator2566802174::TransMode1NotActive,
            value => TransMode1Indicator2566802174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransMode2Indicator2566802174 {
    NotAvailable,
    Error,
    TransMode2Active,
    TransMode2NotActive,
    XValue(u64),
}

impl From<u64> for TransMode2Indicator2566802174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransMode2Indicator2566802174::NotAvailable,
            2 => TransMode2Indicator2566802174::Error,
            1 => TransMode2Indicator2566802174::TransMode2Active,
            0 => TransMode2Indicator2566802174::TransMode2NotActive,
            value => TransMode2Indicator2566802174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransMode3Indicator2566802174 {
    NotAvailable,
    Error,
    TransMode3Active,
    TransMode3NotActive,
    XValue(u64),
}

impl From<u64> for TransMode3Indicator2566802174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransMode3Indicator2566802174::NotAvailable,
            2 => TransMode3Indicator2566802174::Error,
            1 => TransMode3Indicator2566802174::TransMode3Active,
            0 => TransMode3Indicator2566802174::TransMode3NotActive,
            value => TransMode3Indicator2566802174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransMode4Indicator2566802174 {
    NotAvailable,
    Error,
    TransMode4Active,
    TransMode4NotActive,
    XValue(u64),
}

impl From<u64> for TransMode4Indicator2566802174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransMode4Indicator2566802174::NotAvailable,
            2 => TransMode4Indicator2566802174::Error,
            1 => TransMode4Indicator2566802174::TransMode4Active,
            0 => TransMode4Indicator2566802174::TransMode4NotActive,
            value => TransMode4Indicator2566802174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransShiftInhibitIndicator2566802174 {
    TakeNoAction,
    Reserved,
    ActiveShiftIsInhibited,
    InactiveShiftIsNotInhibited,
    XValue(u64),
}

impl From<u64> for TransShiftInhibitIndicator2566802174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransShiftInhibitIndicator2566802174::TakeNoAction,
            2 => TransShiftInhibitIndicator2566802174::Reserved,
            1 => TransShiftInhibitIndicator2566802174::ActiveShiftIsInhibited,
            0 => TransShiftInhibitIndicator2566802174::InactiveShiftIsNotInhibited,
            value => TransShiftInhibitIndicator2566802174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransEngCrankEnable2566802174 {
    NotAvailable,
    Error,
    CrnkngEnbldEngCrnkngIsAllwdByTr,
    CrnkngDsbldEngCrnkngIsPrhbtdByT,
    XValue(u64),
}

impl From<u64> for TransEngCrankEnable2566802174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransEngCrankEnable2566802174::NotAvailable,
            2 => TransEngCrankEnable2566802174::Error,
            1 => TransEngCrankEnable2566802174::CrnkngEnbldEngCrnkngIsAllwdByTr,
            0 => TransEngCrankEnable2566802174::CrnkngDsbldEngCrnkngIsPrhbtdByT,
            value => TransEngCrankEnable2566802174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ActiveShiftConsoleIndicator2566802174 {
    NotAvailable,
    Reserved,
    SecondShiftConsoleIsActive,
    PrimaryShiftConsoleIsActive,
    XValue(u64),
}

impl From<u64> for ActiveShiftConsoleIndicator2566802174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ActiveShiftConsoleIndicator2566802174::NotAvailable,
            2 => ActiveShiftConsoleIndicator2566802174::Reserved,
            1 => ActiveShiftConsoleIndicator2566802174::SecondShiftConsoleIsActive,
            0 => ActiveShiftConsoleIndicator2566802174::PrimaryShiftConsoleIsActive,
            value => ActiveShiftConsoleIndicator2566802174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransReadyForBrakeRelease2566802174 {
    DontCare,
    Reserved,
    TransReadyForBrakeRelease,
    TransNotReadyForBrakeRelease,
    XValue(u64),
}

impl From<u64> for TransReadyForBrakeRelease2566802174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransReadyForBrakeRelease2566802174::DontCare,
            2 => TransReadyForBrakeRelease2566802174::Reserved,
            1 => TransReadyForBrakeRelease2566802174::TransReadyForBrakeRelease,
            0 => TransReadyForBrakeRelease2566802174::TransNotReadyForBrakeRelease,
            value => TransReadyForBrakeRelease2566802174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransRqedRangeDisplayFlashState2566802174 {
    TakeNoAction,
    Reserved,
    ActvTrnsRqdRngDsplyShldBFlshing,
    InctvTrnsRqdRngDsplyShldNtBFlsh,
    XValue(u64),
}

impl From<u64> for TransRqedRangeDisplayFlashState2566802174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransRqedRangeDisplayFlashState2566802174::TakeNoAction,
            2 => TransRqedRangeDisplayFlashState2566802174::Reserved,
            1 => TransRqedRangeDisplayFlashState2566802174::ActvTrnsRqdRngDsplyShldBFlshing,
            0 => TransRqedRangeDisplayFlashState2566802174::InctvTrnsRqdRngDsplyShldNtBFlsh,
            value => TransRqedRangeDisplayFlashState2566802174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransRqedRangeDisplayBlankState2566802174 {
    TakeNoAction,
    Reserved,
    ActvTrnsRqdRngDsplyShldBBlanked,
    InctvTrnsRqdRngDsplyShldNtBBlnk,
    XValue(u64),
}

impl From<u64> for TransRqedRangeDisplayBlankState2566802174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransRqedRangeDisplayBlankState2566802174::TakeNoAction,
            2 => TransRqedRangeDisplayBlankState2566802174::Reserved,
            1 => TransRqedRangeDisplayBlankState2566802174::ActvTrnsRqdRngDsplyShldBBlanked,
            0 => TransRqedRangeDisplayBlankState2566802174::InctvTrnsRqdRngDsplyShldNtBBlnk,
            value => TransRqedRangeDisplayBlankState2566802174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransForwardDirectionSwitch2633942014 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransForwardDirectionSwitch2633942014 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransForwardDirectionSwitch2633942014::NotAvailable,
            2 => TransForwardDirectionSwitch2633942014::Error,
            1 => TransForwardDirectionSwitch2633942014::On,
            0 => TransForwardDirectionSwitch2633942014::Off,
            value => TransForwardDirectionSwitch2633942014::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransNeutralSwitch2633942014 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransNeutralSwitch2633942014 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransNeutralSwitch2633942014::NotAvailable,
            2 => TransNeutralSwitch2633942014::Error,
            1 => TransNeutralSwitch2633942014::On,
            0 => TransNeutralSwitch2633942014::Off,
            value => TransNeutralSwitch2633942014::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransReverseDirectionSwitch2633942014 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransReverseDirectionSwitch2633942014 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransReverseDirectionSwitch2633942014::NotAvailable,
            2 => TransReverseDirectionSwitch2633942014::Error,
            1 => TransReverseDirectionSwitch2633942014::On,
            0 => TransReverseDirectionSwitch2633942014::Off,
            value => TransReverseDirectionSwitch2633942014::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransLowRangeSenseSwitch2633942014 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransLowRangeSenseSwitch2633942014 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransLowRangeSenseSwitch2633942014::NotAvailable,
            2 => TransLowRangeSenseSwitch2633942014::Error,
            1 => TransLowRangeSenseSwitch2633942014::On,
            0 => TransLowRangeSenseSwitch2633942014::Off,
            value => TransLowRangeSenseSwitch2633942014::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransHighRangeSenseSwitch2633942014 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransHighRangeSenseSwitch2633942014 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransHighRangeSenseSwitch2633942014::NotAvailable,
            2 => TransHighRangeSenseSwitch2633942014::Error,
            1 => TransHighRangeSenseSwitch2633942014::On,
            0 => TransHighRangeSenseSwitch2633942014::Off,
            value => TransHighRangeSenseSwitch2633942014::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransInertiaBrakeActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransInertiaBrakeActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransInertiaBrakeActuator2633943038::NotAvailable,
            2 => TransInertiaBrakeActuator2633943038::Error,
            1 => TransInertiaBrakeActuator2633943038::On,
            0 => TransInertiaBrakeActuator2633943038::Off,
            value => TransInertiaBrakeActuator2633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransDefuelActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransDefuelActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransDefuelActuator2633943038::NotAvailable,
            2 => TransDefuelActuator2633943038::Error,
            1 => TransDefuelActuator2633943038::On,
            0 => TransDefuelActuator2633943038::Off,
            value => TransDefuelActuator2633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransLockupClutchActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransLockupClutchActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransLockupClutchActuator2633943038::NotAvailable,
            2 => TransLockupClutchActuator2633943038::Error,
            1 => TransLockupClutchActuator2633943038::On,
            0 => TransLockupClutchActuator2633943038::Off,
            value => TransLockupClutchActuator2633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransClutchActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransClutchActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransClutchActuator2633943038::NotAvailable,
            2 => TransClutchActuator2633943038::Error,
            1 => TransClutchActuator2633943038::On,
            0 => TransClutchActuator2633943038::Off,
            value => TransClutchActuator2633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransSplitterIndirectActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransSplitterIndirectActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransSplitterIndirectActuator2633943038::NotAvailable,
            2 => TransSplitterIndirectActuator2633943038::Error,
            1 => TransSplitterIndirectActuator2633943038::On,
            0 => TransSplitterIndirectActuator2633943038::Off,
            value => TransSplitterIndirectActuator2633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransSplitterDirectActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransSplitterDirectActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransSplitterDirectActuator2633943038::NotAvailable,
            2 => TransSplitterDirectActuator2633943038::Error,
            1 => TransSplitterDirectActuator2633943038::On,
            0 => TransSplitterDirectActuator2633943038::Off,
            value => TransSplitterDirectActuator2633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransRangeLowActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransRangeLowActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransRangeLowActuator2633943038::NotAvailable,
            2 => TransRangeLowActuator2633943038::Error,
            1 => TransRangeLowActuator2633943038::On,
            0 => TransRangeLowActuator2633943038::Off,
            value => TransRangeLowActuator2633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransRangeHighActuator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransRangeHighActuator2633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransRangeHighActuator2633943038::NotAvailable,
            2 => TransRangeHighActuator2633943038::Error,
            1 => TransRangeHighActuator2633943038::On,
            0 => TransRangeHighActuator2633943038::Off,
            value => TransRangeHighActuator2633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransShiftFingerGearActuator22633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransShiftFingerGearActuator22633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransShiftFingerGearActuator22633943038::NotAvailable,
            2 => TransShiftFingerGearActuator22633943038::Error,
            1 => TransShiftFingerGearActuator22633943038::On,
            0 => TransShiftFingerGearActuator22633943038::Off,
            value => TransShiftFingerGearActuator22633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransShiftFingerRailActuator22633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransShiftFingerRailActuator22633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransShiftFingerRailActuator22633943038::NotAvailable,
            2 => TransShiftFingerRailActuator22633943038::Error,
            1 => TransShiftFingerRailActuator22633943038::On,
            0 => TransShiftFingerRailActuator22633943038::Off,
            value => TransShiftFingerRailActuator22633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransShiftFingerGearActuator12633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransShiftFingerGearActuator12633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransShiftFingerGearActuator12633943038::NotAvailable,
            2 => TransShiftFingerGearActuator12633943038::Error,
            1 => TransShiftFingerGearActuator12633943038::On,
            0 => TransShiftFingerGearActuator12633943038::Off,
            value => TransShiftFingerGearActuator12633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransShiftFingerRailActuator12633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransShiftFingerRailActuator12633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransShiftFingerRailActuator12633943038::NotAvailable,
            2 => TransShiftFingerRailActuator12633943038::Error,
            1 => TransShiftFingerRailActuator12633943038::On,
            0 => TransShiftFingerRailActuator12633943038::Off,
            value => TransShiftFingerRailActuator12633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrnsShftFngrCenterRailIndicator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TrnsShftFngrCenterRailIndicator2633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrnsShftFngrCenterRailIndicator2633943038::NotAvailable,
            2 => TrnsShftFngrCenterRailIndicator2633943038::Error,
            1 => TrnsShftFngrCenterRailIndicator2633943038::On,
            0 => TrnsShftFngrCenterRailIndicator2633943038::Off,
            value => TrnsShftFngrCenterRailIndicator2633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrnsShftFngrEngagementIndicator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TrnsShftFngrEngagementIndicator2633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrnsShftFngrEngagementIndicator2633943038::NotAvailable,
            2 => TrnsShftFngrEngagementIndicator2633943038::Error,
            1 => TrnsShftFngrEngagementIndicator2633943038::On,
            0 => TrnsShftFngrEngagementIndicator2633943038::Off,
            value => TrnsShftFngrEngagementIndicator2633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrnsShiftFingerNeutralIndicator2633943038 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TrnsShiftFingerNeutralIndicator2633943038 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrnsShiftFingerNeutralIndicator2633943038::NotAvailable,
            2 => TrnsShiftFingerNeutralIndicator2633943038::Error,
            1 => TrnsShiftFingerNeutralIndicator2633943038::On,
            0 => TrnsShiftFingerNeutralIndicator2633943038::Off,
            value => TrnsShiftFingerNeutralIndicator2633943038::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ProgressiveShiftDisable2364539646 {
    Reserved,
    TakeNoAction,
    ProgressiveShiftIsDisabled,
    ProgressiveShiftIsNotDisabled,
    XValue(u64),
}

impl From<u64> for ProgressiveShiftDisable2364539646 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => ProgressiveShiftDisable2364539646::Reserved,
            3 => ProgressiveShiftDisable2364539646::TakeNoAction,
            1 => ProgressiveShiftDisable2364539646::ProgressiveShiftIsDisabled,
            0 => ProgressiveShiftDisable2364539646::ProgressiveShiftIsNotDisabled,
            value => ProgressiveShiftDisable2364539646::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngMomentaryOverspeedEnable2364539646 {
    Reserved,
    TakeNoAction,
    MomentaryEngOverspeedIsEnabled,
    MomentaryEngOverspeedIsDisabled,
    XValue(u64),
}

impl From<u64> for EngMomentaryOverspeedEnable2364539646 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => EngMomentaryOverspeedEnable2364539646::Reserved,
            3 => EngMomentaryOverspeedEnable2364539646::TakeNoAction,
            1 => EngMomentaryOverspeedEnable2364539646::MomentaryEngOverspeedIsEnabled,
            0 => EngMomentaryOverspeedEnable2364539646::MomentaryEngOverspeedIsDisabled,
            value => EngMomentaryOverspeedEnable2364539646::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransShiftInProcess2364539646 {
    NotAvailable,
    Error,
    ShiftInProcess,
    ShiftIsNotInProcess,
    XValue(u64),
}

impl From<u64> for TransShiftInProcess2364539646 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransShiftInProcess2364539646::NotAvailable,
            2 => TransShiftInProcess2364539646::Error,
            1 => TransShiftInProcess2364539646::ShiftInProcess,
            0 => TransShiftInProcess2364539646::ShiftIsNotInProcess,
            value => TransShiftInProcess2364539646::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TorqueConverterLockupEngaged2364539646 {
    NotAvailable,
    Error,
    TorqueConverterLockupEngaged,
    TorqueConverterLockupDisengaged,
    XValue(u64),
}

impl From<u64> for TorqueConverterLockupEngaged2364539646 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TorqueConverterLockupEngaged2364539646::NotAvailable,
            2 => TorqueConverterLockupEngaged2364539646::Error,
            1 => TorqueConverterLockupEngaged2364539646::TorqueConverterLockupEngaged,
            0 => TorqueConverterLockupEngaged2364539646::TorqueConverterLockupDisengaged,
            value => TorqueConverterLockupEngaged2364539646::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransDrivelineEngaged2364539646 {
    NotAvailable,
    Error,
    DrivelineEngaged,
    DrivelineDisengaged,
    XValue(u64),
}

impl From<u64> for TransDrivelineEngaged2364539646 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransDrivelineEngaged2364539646::NotAvailable,
            2 => TransDrivelineEngaged2364539646::Error,
            1 => TransDrivelineEngaged2364539646::DrivelineEngaged,
            0 => TransDrivelineEngaged2364539646::DrivelineDisengaged,
            value => TransDrivelineEngaged2364539646::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SterableLiftAxleLoweringInhibit2565868542 {
    NotAvailable,
    Reserved,
    LoweringInhibited,
    LoweringAllowed,
    XValue(u64),
}

impl From<u64> for SterableLiftAxleLoweringInhibit2565868542 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SterableLiftAxleLoweringInhibit2565868542::NotAvailable,
            2 => SterableLiftAxleLoweringInhibit2565868542::Reserved,
            1 => SterableLiftAxleLoweringInhibit2565868542::LoweringInhibited,
            0 => SterableLiftAxleLoweringInhibit2565868542::LoweringAllowed,
            value => SterableLiftAxleLoweringInhibit2565868542::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TypeOfSteerTrans2565868542 {
    NotAvailable,
    X1110reservedForSaeAssignment,
    HybrdStrTrnsAStrngTrnsmssnInWhc,
    PrlyElctrcStrTrnsAStrngTrnsmssn,
    PrlyHydStrTrnsAStrngTrnsmssnInW,
    PrlyMchStrTrnsAStrngTrnsmssnInW,
    XValue(u64),
}

impl From<u64> for TypeOfSteerTrans2565868542 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => TypeOfSteerTrans2565868542::NotAvailable,
            4 => TypeOfSteerTrans2565868542::X1110reservedForSaeAssignment,
            3 => TypeOfSteerTrans2565868542::HybrdStrTrnsAStrngTrnsmssnInWhc,
            2 => TypeOfSteerTrans2565868542::PrlyElctrcStrTrnsAStrngTrnsmssn,
            1 => TypeOfSteerTrans2565868542::PrlyHydStrTrnsAStrngTrnsmssnInW,
            0 => TypeOfSteerTrans2565868542::PrlyMchStrTrnsAStrngTrnsmssnInW,
            value => TypeOfSteerTrans2565868542::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TypeOfSteerForces2565868542 {
    NotAvailable,
    X1110reservedForSaeAssignment,
    SlfTrckngStrEqpmntASystmDsgndTc,
    FllPwrStrEqpmntStrngFrcsArPrvdd,
    PwrAssstdStrEqpmntStrngFrcsRslt,
    MnlStrEqpmntStrngFrcsRsltSllyFr,
    XValue(u64),
}

impl From<u64> for TypeOfSteerForces2565868542 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => TypeOfSteerForces2565868542::NotAvailable,
            4 => TypeOfSteerForces2565868542::X1110reservedForSaeAssignment,
            3 => TypeOfSteerForces2565868542::SlfTrckngStrEqpmntASystmDsgndTc,
            2 => TypeOfSteerForces2565868542::FllPwrStrEqpmntStrngFrcsArPrvdd,
            1 => TypeOfSteerForces2565868542::PwrAssstdStrEqpmntStrngFrcsRslt,
            0 => TypeOfSteerForces2565868542::MnlStrEqpmntStrngFrcsRsltSllyFr,
            value => TypeOfSteerForces2565868542::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SteerType2565868542 {
    NotAvailable,
    X1110reservedForAssignmentBySae,
    AxStrEqpmntASystmInWhchWhlsOnAx,
    MnStrSystmStrngEqpmntOfAVhclWhc,
    XValue(u64),
}

impl From<u64> for SteerType2565868542 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => SteerType2565868542::NotAvailable,
            2 => SteerType2565868542::X1110reservedForAssignmentBySae,
            1 => SteerType2565868542::AxStrEqpmntASystmInWhchWhlsOnAx,
            0 => SteerType2565868542::MnStrSystmStrngEqpmntOfAVhclWhc,
            value => SteerType2565868542::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum StatusOfSteerAxle2565868542 {
    NotAvailable,
    X1110reservedForSaeAssignment,
    AxleSteerInSpecialMode,
    AxleNotActiveBecauseOfAnError,
    AxleCenteredBecauseOfAnError,
    AxleCentered,
    AxleSteerActive,
    AxleSteerNotActive,
    XValue(u64),
}

impl From<u64> for StatusOfSteerAxle2565868542 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => StatusOfSteerAxle2565868542::NotAvailable,
            6 => StatusOfSteerAxle2565868542::X1110reservedForSaeAssignment,
            5 => StatusOfSteerAxle2565868542::AxleSteerInSpecialMode,
            4 => StatusOfSteerAxle2565868542::AxleNotActiveBecauseOfAnError,
            3 => StatusOfSteerAxle2565868542::AxleCenteredBecauseOfAnError,
            2 => StatusOfSteerAxle2565868542::AxleCentered,
            1 => StatusOfSteerAxle2565868542::AxleSteerActive,
            0 => StatusOfSteerAxle2565868542::AxleSteerNotActive,
            value => StatusOfSteerAxle2565868542::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransOutputRetarder2633941758 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TransOutputRetarder2633941758 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransOutputRetarder2633941758::NotAvailable,
            2 => TransOutputRetarder2633941758::Error,
            1 => TransOutputRetarder2633941758::On,
            0 => TransOutputRetarder2633941758::Off,
            value => TransOutputRetarder2633941758::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCoolantLoadIncrease2565865726 {
    NotAvailable,
    Error,
    CoolantLoadIncreasePossible,
    NoCoolantLoadIncrease,
    XValue(u64),
}

impl From<u64> for EngCoolantLoadIncrease2565865726 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCoolantLoadIncrease2565865726::NotAvailable,
            2 => EngCoolantLoadIncrease2565865726::Error,
            1 => EngCoolantLoadIncrease2565865726::CoolantLoadIncreasePossible,
            0 => EngCoolantLoadIncrease2565865726::NoCoolantLoadIncrease,
            value => EngCoolantLoadIncrease2565865726::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RetarderEnableShiftAssistSwitch2565865726 {
    NotAvailable,
    Error,
    RetarderShiftAssistEnabled,
    RetarderShiftAssistDisabled,
    XValue(u64),
}

impl From<u64> for RetarderEnableShiftAssistSwitch2565865726 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RetarderEnableShiftAssistSwitch2565865726::NotAvailable,
            2 => RetarderEnableShiftAssistSwitch2565865726::Error,
            1 => RetarderEnableShiftAssistSwitch2565865726::RetarderShiftAssistEnabled,
            0 => RetarderEnableShiftAssistSwitch2565865726::RetarderShiftAssistDisabled,
            value => RetarderEnableShiftAssistSwitch2565865726::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RetarderEnableBrakeAssistSwitch2565865726 {
    NotAvailable,
    Error,
    RetarderBrakeAssistEnabled,
    RetarderBrakeAssistDisabled,
    XValue(u64),
}

impl From<u64> for RetarderEnableBrakeAssistSwitch2565865726 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RetarderEnableBrakeAssistSwitch2565865726::NotAvailable,
            2 => RetarderEnableBrakeAssistSwitch2565865726::Error,
            1 => RetarderEnableBrakeAssistSwitch2565865726::RetarderBrakeAssistEnabled,
            0 => RetarderEnableBrakeAssistSwitch2565865726::RetarderBrakeAssistDisabled,
            value => RetarderEnableBrakeAssistSwitch2565865726::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngExhstGsOxygnSnsrClsdLpOprton2633935358 {
    DontCareTakeNoAction,
    Reserved,
    CmdToEnableFunction,
    CmdToDisableFunction,
    XValue(u64),
}

impl From<u64> for EngExhstGsOxygnSnsrClsdLpOprton2633935358 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngExhstGsOxygnSnsrClsdLpOprton2633935358::DontCareTakeNoAction,
            2 => EngExhstGsOxygnSnsrClsdLpOprton2633935358::Reserved,
            1 => EngExhstGsOxygnSnsrClsdLpOprton2633935358::CmdToEnableFunction,
            0 => EngExhstGsOxygnSnsrClsdLpOprton2633935358::CmdToDisableFunction,
            value => EngExhstGsOxygnSnsrClsdLpOprton2633935358::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3GripXAxisDetentPosStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Jystck3GripXAxisDetentPosStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3GripXAxisDetentPosStatus2365447166::NotAvailable,
            2 => Jystck3GripXAxisDetentPosStatus2365447166::ErrorIndicator,
            1 => Jystck3GripXAxisDetentPosStatus2365447166::InDetentPos,
            0 => Jystck3GripXAxisDetentPosStatus2365447166::NotInDetentPos,
            value => Jystck3GripXAxisDetentPosStatus2365447166::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3GripYAxisDetentPosStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Jystck3GripYAxisDetentPosStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3GripYAxisDetentPosStatus2365447166::NotAvailable,
            2 => Jystck3GripYAxisDetentPosStatus2365447166::ErrorIndicator,
            1 => Jystck3GripYAxisDetentPosStatus2365447166::InDetentPos,
            0 => Jystck3GripYAxisDetentPosStatus2365447166::NotInDetentPos,
            value => Jystck3GripYAxisDetentPosStatus2365447166::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3ThetaAxisDetentPosStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Jystck3ThetaAxisDetentPosStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3ThetaAxisDetentPosStatus2365447166::NotAvailable,
            2 => Jystck3ThetaAxisDetentPosStatus2365447166::ErrorIndicator,
            1 => Jystck3ThetaAxisDetentPosStatus2365447166::InDetentPos,
            0 => Jystck3ThetaAxisDetentPosStatus2365447166::NotInDetentPos,
            value => Jystck3ThetaAxisDetentPosStatus2365447166::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3ThtAxsClckwsPstvPsStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck3ThtAxsClckwsPstvPsStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3ThtAxsClckwsPstvPsStatus2365447166::NotAvailable,
            2 => Jystck3ThtAxsClckwsPstvPsStatus2365447166::ErrorIndicator,
            1 => Jystck3ThtAxsClckwsPstvPsStatus2365447166::OnPositiveSideOfNeutral,
            0 => Jystck3ThtAxsClckwsPstvPsStatus2365447166::NotOnPositiveSideOfNeutral,
            value => Jystck3ThtAxsClckwsPstvPsStatus2365447166::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3ThtAxsCntrClckwsNgtvPsStt2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck3ThtAxsCntrClckwsNgtvPsStt2365447166 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3ThtAxsCntrClckwsNgtvPsStt2365447166::NotAvailable,
            2 => Jystck3ThtAxsCntrClckwsNgtvPsStt2365447166::ErrorIndicator,
            1 => Jystck3ThtAxsCntrClckwsNgtvPsStt2365447166::OnNegativeSideOfNeutral,
            0 => Jystck3ThtAxsCntrClckwsNgtvPsStt2365447166::NotOnNegativeSideOfNeutral,
            value => Jystck3ThtAxsCntrClckwsNgtvPsStt2365447166::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3ThtaAxisNeutralPosStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u64),
}

impl From<u64> for Jystck3ThtaAxisNeutralPosStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3ThtaAxisNeutralPosStatus2365447166::NotAvailable,
            2 => Jystck3ThtaAxisNeutralPosStatus2365447166::ErrorIndicator,
            1 => Jystck3ThtaAxisNeutralPosStatus2365447166::InNeutralPos,
            0 => Jystck3ThtaAxisNeutralPosStatus2365447166::NotInNeutralPos,
            value => Jystck3ThtaAxisNeutralPosStatus2365447166::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3GrpYAxsLvrFrwrdPstvPsStts2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck3GrpYAxsLvrFrwrdPstvPsStts2365447166 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3GrpYAxsLvrFrwrdPstvPsStts2365447166::NotAvailable,
            2 => Jystck3GrpYAxsLvrFrwrdPstvPsStts2365447166::ErrorIndicator,
            1 => Jystck3GrpYAxsLvrFrwrdPstvPsStts2365447166::OnPositiveSideOfNeutral,
            0 => Jystck3GrpYAxsLvrFrwrdPstvPsStts2365447166::NotOnPositiveSideOfNeutral,
            value => Jystck3GrpYAxsLvrFrwrdPstvPsStts2365447166::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3GrpYAxsLvrBckNgtvPsSttus2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck3GrpYAxsLvrBckNgtvPsSttus2365447166 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3GrpYAxsLvrBckNgtvPsSttus2365447166::NotAvailable,
            2 => Jystck3GrpYAxsLvrBckNgtvPsSttus2365447166::ErrorIndicator,
            1 => Jystck3GrpYAxsLvrBckNgtvPsSttus2365447166::OnNegativeSideOfNeutral,
            0 => Jystck3GrpYAxsLvrBckNgtvPsSttus2365447166::NotOnNegativeSideOfNeutral,
            value => Jystck3GrpYAxsLvrBckNgtvPsSttus2365447166::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3GrpYAxisNeutralPosStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u64),
}

impl From<u64> for Jystck3GrpYAxisNeutralPosStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3GrpYAxisNeutralPosStatus2365447166::NotAvailable,
            2 => Jystck3GrpYAxisNeutralPosStatus2365447166::ErrorIndicator,
            1 => Jystck3GrpYAxisNeutralPosStatus2365447166::InNeutralPos,
            0 => Jystck3GrpYAxisNeutralPosStatus2365447166::NotInNeutralPos,
            value => Jystck3GrpYAxisNeutralPosStatus2365447166::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3GrpXAxsLvrRghtPstvPsStts2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck3GrpXAxsLvrRghtPstvPsStts2365447166 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3GrpXAxsLvrRghtPstvPsStts2365447166::NotAvailable,
            2 => Jystck3GrpXAxsLvrRghtPstvPsStts2365447166::ErrorIndicator,
            1 => Jystck3GrpXAxsLvrRghtPstvPsStts2365447166::OnPositiveSideOfNeutral,
            0 => Jystck3GrpXAxsLvrRghtPstvPsStts2365447166::NotOnPositiveSideOfNeutral,
            value => Jystck3GrpXAxsLvrRghtPstvPsStts2365447166::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3GrpXAxsLvrLftNgtvPsSttus2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck3GrpXAxsLvrLftNgtvPsSttus2365447166 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3GrpXAxsLvrLftNgtvPsSttus2365447166::NotAvailable,
            2 => Jystck3GrpXAxsLvrLftNgtvPsSttus2365447166::ErrorIndicator,
            1 => Jystck3GrpXAxsLvrLftNgtvPsSttus2365447166::OnNegativeSideOfNeutral,
            0 => Jystck3GrpXAxsLvrLftNgtvPsSttus2365447166::NotOnNegativeSideOfNeutral,
            value => Jystck3GrpXAxsLvrLftNgtvPsSttus2365447166::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3GrpXAxisNeutralPosStatus2365447166 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck3GrpXAxisNeutralPosStatus2365447166 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3GrpXAxisNeutralPosStatus2365447166::NotAvailable,
            2 => Jystck3GrpXAxisNeutralPosStatus2365447166::ErrorIndicator,
            1 => Jystck3GrpXAxisNeutralPosStatus2365447166::OnNegativeSideOfNeutral,
            0 => Jystck3GrpXAxisNeutralPosStatus2365447166::NotOnNegativeSideOfNeutral,
            value => Jystck3GrpXAxisNeutralPosStatus2365447166::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2GripXAxisDetentPosStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Jystck2GripXAxisDetentPosStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2GripXAxisDetentPosStatus2365446654::NotAvailable,
            2 => Jystck2GripXAxisDetentPosStatus2365446654::ErrorIndicator,
            1 => Jystck2GripXAxisDetentPosStatus2365446654::InDetentPos,
            0 => Jystck2GripXAxisDetentPosStatus2365446654::NotInDetentPos,
            value => Jystck2GripXAxisDetentPosStatus2365446654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2GripYAxisDetentPosStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Jystck2GripYAxisDetentPosStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2GripYAxisDetentPosStatus2365446654::NotAvailable,
            2 => Jystck2GripYAxisDetentPosStatus2365446654::ErrorIndicator,
            1 => Jystck2GripYAxisDetentPosStatus2365446654::InDetentPos,
            0 => Jystck2GripYAxisDetentPosStatus2365446654::NotInDetentPos,
            value => Jystck2GripYAxisDetentPosStatus2365446654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2ThetaAxisDetentPosStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Jystck2ThetaAxisDetentPosStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2ThetaAxisDetentPosStatus2365446654::NotAvailable,
            2 => Jystck2ThetaAxisDetentPosStatus2365446654::ErrorIndicator,
            1 => Jystck2ThetaAxisDetentPosStatus2365446654::InDetentPos,
            0 => Jystck2ThetaAxisDetentPosStatus2365446654::NotInDetentPos,
            value => Jystck2ThetaAxisDetentPosStatus2365446654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2ThtAxsClckwsPstvPsStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck2ThtAxsClckwsPstvPsStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2ThtAxsClckwsPstvPsStatus2365446654::NotAvailable,
            2 => Jystck2ThtAxsClckwsPstvPsStatus2365446654::ErrorIndicator,
            1 => Jystck2ThtAxsClckwsPstvPsStatus2365446654::OnPositiveSideOfNeutral,
            0 => Jystck2ThtAxsClckwsPstvPsStatus2365446654::NotOnPositiveSideOfNeutral,
            value => Jystck2ThtAxsClckwsPstvPsStatus2365446654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2ThtAxsCntrClckwsNgtvPsStt2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck2ThtAxsCntrClckwsNgtvPsStt2365446654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2ThtAxsCntrClckwsNgtvPsStt2365446654::NotAvailable,
            2 => Jystck2ThtAxsCntrClckwsNgtvPsStt2365446654::ErrorIndicator,
            1 => Jystck2ThtAxsCntrClckwsNgtvPsStt2365446654::OnNegativeSideOfNeutral,
            0 => Jystck2ThtAxsCntrClckwsNgtvPsStt2365446654::NotOnNegativeSideOfNeutral,
            value => Jystck2ThtAxsCntrClckwsNgtvPsStt2365446654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2ThtaAxisNeutralPosStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u64),
}

impl From<u64> for Jystck2ThtaAxisNeutralPosStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2ThtaAxisNeutralPosStatus2365446654::NotAvailable,
            2 => Jystck2ThtaAxisNeutralPosStatus2365446654::ErrorIndicator,
            1 => Jystck2ThtaAxisNeutralPosStatus2365446654::InNeutralPos,
            0 => Jystck2ThtaAxisNeutralPosStatus2365446654::NotInNeutralPos,
            value => Jystck2ThtaAxisNeutralPosStatus2365446654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2GrpYAxsLvrFrwrdPstvPsStts2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck2GrpYAxsLvrFrwrdPstvPsStts2365446654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2GrpYAxsLvrFrwrdPstvPsStts2365446654::NotAvailable,
            2 => Jystck2GrpYAxsLvrFrwrdPstvPsStts2365446654::ErrorIndicator,
            1 => Jystck2GrpYAxsLvrFrwrdPstvPsStts2365446654::OnPositiveSideOfNeutral,
            0 => Jystck2GrpYAxsLvrFrwrdPstvPsStts2365446654::NotOnPositiveSideOfNeutral,
            value => Jystck2GrpYAxsLvrFrwrdPstvPsStts2365446654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2GrpYAxsLvrBckNgtvPsSttus2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck2GrpYAxsLvrBckNgtvPsSttus2365446654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2GrpYAxsLvrBckNgtvPsSttus2365446654::NotAvailable,
            2 => Jystck2GrpYAxsLvrBckNgtvPsSttus2365446654::ErrorIndicator,
            1 => Jystck2GrpYAxsLvrBckNgtvPsSttus2365446654::OnNegativeSideOfNeutral,
            0 => Jystck2GrpYAxsLvrBckNgtvPsSttus2365446654::NotOnNegativeSideOfNeutral,
            value => Jystck2GrpYAxsLvrBckNgtvPsSttus2365446654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2GrpYAxisNeutralPosStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u64),
}

impl From<u64> for Jystck2GrpYAxisNeutralPosStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2GrpYAxisNeutralPosStatus2365446654::NotAvailable,
            2 => Jystck2GrpYAxisNeutralPosStatus2365446654::ErrorIndicator,
            1 => Jystck2GrpYAxisNeutralPosStatus2365446654::InNeutralPos,
            0 => Jystck2GrpYAxisNeutralPosStatus2365446654::NotInNeutralPos,
            value => Jystck2GrpYAxisNeutralPosStatus2365446654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2GrpXAxsLvrRghtPstvPsStts2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck2GrpXAxsLvrRghtPstvPsStts2365446654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2GrpXAxsLvrRghtPstvPsStts2365446654::NotAvailable,
            2 => Jystck2GrpXAxsLvrRghtPstvPsStts2365446654::ErrorIndicator,
            1 => Jystck2GrpXAxsLvrRghtPstvPsStts2365446654::OnPositiveSideOfNeutral,
            0 => Jystck2GrpXAxsLvrRghtPstvPsStts2365446654::NotOnPositiveSideOfNeutral,
            value => Jystck2GrpXAxsLvrRghtPstvPsStts2365446654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2GrpXAxsLvrLftNgtvPsSttus2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck2GrpXAxsLvrLftNgtvPsSttus2365446654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2GrpXAxsLvrLftNgtvPsSttus2365446654::NotAvailable,
            2 => Jystck2GrpXAxsLvrLftNgtvPsSttus2365446654::ErrorIndicator,
            1 => Jystck2GrpXAxsLvrLftNgtvPsSttus2365446654::OnNegativeSideOfNeutral,
            0 => Jystck2GrpXAxsLvrLftNgtvPsSttus2365446654::NotOnNegativeSideOfNeutral,
            value => Jystck2GrpXAxsLvrLftNgtvPsSttus2365446654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2GrpXAxisNeutralPosStatus2365446654 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck2GrpXAxisNeutralPosStatus2365446654 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2GrpXAxisNeutralPosStatus2365446654::NotAvailable,
            2 => Jystck2GrpXAxisNeutralPosStatus2365446654::ErrorIndicator,
            1 => Jystck2GrpXAxisNeutralPosStatus2365446654::OnNegativeSideOfNeutral,
            0 => Jystck2GrpXAxisNeutralPosStatus2365446654::NotOnNegativeSideOfNeutral,
            value => Jystck2GrpXAxisNeutralPosStatus2365446654::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1GripXAxisDetentPosStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Jystck1GripXAxisDetentPosStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1GripXAxisDetentPosStatus2365446142::NotAvailable,
            2 => Jystck1GripXAxisDetentPosStatus2365446142::ErrorIndicator,
            1 => Jystck1GripXAxisDetentPosStatus2365446142::InDetentPos,
            0 => Jystck1GripXAxisDetentPosStatus2365446142::NotInDetentPos,
            value => Jystck1GripXAxisDetentPosStatus2365446142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1GripYAxisDetentPosStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Jystck1GripYAxisDetentPosStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1GripYAxisDetentPosStatus2365446142::NotAvailable,
            2 => Jystck1GripYAxisDetentPosStatus2365446142::ErrorIndicator,
            1 => Jystck1GripYAxisDetentPosStatus2365446142::InDetentPos,
            0 => Jystck1GripYAxisDetentPosStatus2365446142::NotInDetentPos,
            value => Jystck1GripYAxisDetentPosStatus2365446142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1ThetaAxisDetentPosStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Jystck1ThetaAxisDetentPosStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1ThetaAxisDetentPosStatus2365446142::NotAvailable,
            2 => Jystck1ThetaAxisDetentPosStatus2365446142::ErrorIndicator,
            1 => Jystck1ThetaAxisDetentPosStatus2365446142::InDetentPos,
            0 => Jystck1ThetaAxisDetentPosStatus2365446142::NotInDetentPos,
            value => Jystck1ThetaAxisDetentPosStatus2365446142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1ThtAxsClckwsPstvPsStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck1ThtAxsClckwsPstvPsStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1ThtAxsClckwsPstvPsStatus2365446142::NotAvailable,
            2 => Jystck1ThtAxsClckwsPstvPsStatus2365446142::ErrorIndicator,
            1 => Jystck1ThtAxsClckwsPstvPsStatus2365446142::OnPositiveSideOfNeutral,
            0 => Jystck1ThtAxsClckwsPstvPsStatus2365446142::NotOnPositiveSideOfNeutral,
            value => Jystck1ThtAxsClckwsPstvPsStatus2365446142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1ThtAxsCntrClckwsNgtvPsStt2365446142 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck1ThtAxsCntrClckwsNgtvPsStt2365446142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1ThtAxsCntrClckwsNgtvPsStt2365446142::NotAvailable,
            2 => Jystck1ThtAxsCntrClckwsNgtvPsStt2365446142::ErrorIndicator,
            1 => Jystck1ThtAxsCntrClckwsNgtvPsStt2365446142::OnNegativeSideOfNeutral,
            0 => Jystck1ThtAxsCntrClckwsNgtvPsStt2365446142::NotOnNegativeSideOfNeutral,
            value => Jystck1ThtAxsCntrClckwsNgtvPsStt2365446142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1ThtaAxisNeutralPosStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u64),
}

impl From<u64> for Jystck1ThtaAxisNeutralPosStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1ThtaAxisNeutralPosStatus2365446142::NotAvailable,
            2 => Jystck1ThtaAxisNeutralPosStatus2365446142::ErrorIndicator,
            1 => Jystck1ThtaAxisNeutralPosStatus2365446142::InNeutralPos,
            0 => Jystck1ThtaAxisNeutralPosStatus2365446142::NotInNeutralPos,
            value => Jystck1ThtaAxisNeutralPosStatus2365446142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1GrpYAxsLvrFrwrdPstvPsStts2365446142 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck1GrpYAxsLvrFrwrdPstvPsStts2365446142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1GrpYAxsLvrFrwrdPstvPsStts2365446142::NotAvailable,
            2 => Jystck1GrpYAxsLvrFrwrdPstvPsStts2365446142::ErrorIndicator,
            1 => Jystck1GrpYAxsLvrFrwrdPstvPsStts2365446142::OnPositiveSideOfNeutral,
            0 => Jystck1GrpYAxsLvrFrwrdPstvPsStts2365446142::NotOnPositiveSideOfNeutral,
            value => Jystck1GrpYAxsLvrFrwrdPstvPsStts2365446142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1GrpYAxsLvrBckNgtvPsSttus2365446142 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck1GrpYAxsLvrBckNgtvPsSttus2365446142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1GrpYAxsLvrBckNgtvPsSttus2365446142::NotAvailable,
            2 => Jystck1GrpYAxsLvrBckNgtvPsSttus2365446142::ErrorIndicator,
            1 => Jystck1GrpYAxsLvrBckNgtvPsSttus2365446142::OnNegativeSideOfNeutral,
            0 => Jystck1GrpYAxsLvrBckNgtvPsSttus2365446142::NotOnNegativeSideOfNeutral,
            value => Jystck1GrpYAxsLvrBckNgtvPsSttus2365446142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1GrpYAxisNeutralPosStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u64),
}

impl From<u64> for Jystck1GrpYAxisNeutralPosStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1GrpYAxisNeutralPosStatus2365446142::NotAvailable,
            2 => Jystck1GrpYAxisNeutralPosStatus2365446142::ErrorIndicator,
            1 => Jystck1GrpYAxisNeutralPosStatus2365446142::InNeutralPos,
            0 => Jystck1GrpYAxisNeutralPosStatus2365446142::NotInNeutralPos,
            value => Jystck1GrpYAxisNeutralPosStatus2365446142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1GrpXAxsLvrRghtPstvPsStts2365446142 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck1GrpXAxsLvrRghtPstvPsStts2365446142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1GrpXAxsLvrRghtPstvPsStts2365446142::NotAvailable,
            2 => Jystck1GrpXAxsLvrRghtPstvPsStts2365446142::ErrorIndicator,
            1 => Jystck1GrpXAxsLvrRghtPstvPsStts2365446142::OnPositiveSideOfNeutral,
            0 => Jystck1GrpXAxsLvrRghtPstvPsStts2365446142::NotOnPositiveSideOfNeutral,
            value => Jystck1GrpXAxsLvrRghtPstvPsStts2365446142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1GrpXAxsLvrLftNgtvPsSttus2365446142 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck1GrpXAxsLvrLftNgtvPsSttus2365446142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1GrpXAxsLvrLftNgtvPsSttus2365446142::NotAvailable,
            2 => Jystck1GrpXAxsLvrLftNgtvPsSttus2365446142::ErrorIndicator,
            1 => Jystck1GrpXAxsLvrLftNgtvPsSttus2365446142::OnNegativeSideOfNeutral,
            0 => Jystck1GrpXAxsLvrLftNgtvPsSttus2365446142::NotOnNegativeSideOfNeutral,
            value => Jystck1GrpXAxsLvrLftNgtvPsSttus2365446142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1GrpXAxisNeutralPosStatus2365446142 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u64),
}

impl From<u64> for Jystck1GrpXAxisNeutralPosStatus2365446142 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1GrpXAxisNeutralPosStatus2365446142::NotAvailable,
            2 => Jystck1GrpXAxisNeutralPosStatus2365446142::ErrorIndicator,
            1 => Jystck1GrpXAxisNeutralPosStatus2365446142::InNeutralPos,
            0 => Jystck1GrpXAxisNeutralPosStatus2365446142::NotInNeutralPos,
            value => Jystck1GrpXAxisNeutralPosStatus2365446142::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngWasteOilReservoirLevel2566810366 {
    RepresentsCompletelyFull,
    XValue(u64),
}

impl From<u64> for EngWasteOilReservoirLevel2566810366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            4 => EngWasteOilReservoirLevel2566810366::RepresentsCompletelyFull,
            value => EngWasteOilReservoirLevel2566810366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngVentilationStatus2566810366 {
    NotAvailableNotInstalle,
    NtAblTDtrmnIfSufficientlyVented,
    ReservedForSaeAssignment,
    CurrentlyVenting,
    VentilationDelay,
    VentilationNeeded,
    SufficientlyVented,
    XValue(u64),
}

impl From<u64> for EngVentilationStatus2566810366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => EngVentilationStatus2566810366::NotAvailableNotInstalle,
            6 => EngVentilationStatus2566810366::NtAblTDtrmnIfSufficientlyVented,
            5 => EngVentilationStatus2566810366::ReservedForSaeAssignment,
            3 => EngVentilationStatus2566810366::CurrentlyVenting,
            2 => EngVentilationStatus2566810366::VentilationDelay,
            1 => EngVentilationStatus2566810366::VentilationNeeded,
            0 => EngVentilationStatus2566810366::SufficientlyVented,
            value => EngVentilationStatus2566810366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngOilPrimingState2566810366 {
    NotAvailableNotInstalled,
    UnblTDtrmnIfSffcentlyLubricated,
    SufficientlyLubricated,
    NotSufficientlyLubricated,
    XValue(u64),
}

impl From<u64> for EngOilPrimingState2566810366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngOilPrimingState2566810366::NotAvailableNotInstalled,
            2 => EngOilPrimingState2566810366::UnblTDtrmnIfSffcentlyLubricated,
            1 => EngOilPrimingState2566810366::SufficientlyLubricated,
            0 => EngOilPrimingState2566810366::NotSufficientlyLubricated,
            value => EngOilPrimingState2566810366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngOilPrimingPumpSwitch2566810366 {
    NotAvailableNotInstalled,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngOilPrimingPumpSwitch2566810366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngOilPrimingPumpSwitch2566810366::NotAvailableNotInstalled,
            2 => EngOilPrimingPumpSwitch2566810366::Error,
            1 => EngOilPrimingPumpSwitch2566810366::On,
            0 => EngOilPrimingPumpSwitch2566810366::Off,
            value => EngOilPrimingPumpSwitch2566810366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngOilPreHeatedState2566810366 {
    NotAvailableNotInstalled,
    UnblTDtrmnIfEngOlIsPrhtdSffcntl,
    SufficientlyPreheated,
    NotSufficientlyPreheated,
    XValue(u64),
}

impl From<u64> for EngOilPreHeatedState2566810366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngOilPreHeatedState2566810366::NotAvailableNotInstalled,
            2 => EngOilPreHeatedState2566810366::UnblTDtrmnIfEngOlIsPrhtdSffcntl,
            1 => EngOilPreHeatedState2566810366::SufficientlyPreheated,
            0 => EngOilPreHeatedState2566810366::NotSufficientlyPreheated,
            value => EngOilPreHeatedState2566810366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngCoolantPreheatedState2566810366 {
    NotAvailableNotInstalled,
    UnblTDtrmnEngClntPrhtdSffcently,
    SufficientlyPreheated,
    NotSufficientlyPreheated,
    XValue(u64),
}

impl From<u64> for EngCoolantPreheatedState2566810366 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngCoolantPreheatedState2566810366::NotAvailableNotInstalled,
            2 => EngCoolantPreheatedState2566810366::UnblTDtrmnEngClntPrhtdSffcently,
            1 => EngCoolantPreheatedState2566810366::SufficientlyPreheated,
            0 => EngCoolantPreheatedState2566810366::NotSufficientlyPreheated,
            value => EngCoolantPreheatedState2566810366::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TurningGearEngaged2633929726 {
    TurningGearIsEngaged,
    TurningGearIsNotEngaged,
    XValue(u64),
}

impl From<u64> for TurningGearEngaged2633929726 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => TurningGearEngaged2633929726::TurningGearIsEngaged,
            0 => TurningGearEngaged2633929726::TurningGearIsNotEngaged,
            value => TurningGearEngaged2633929726::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SafetyWireStatus2633929726 {
    NotAvailable,
    Error,
    SafetyWireHasBeenActivated,
    SafetyWireHasNotBeenActivated,
    XValue(u64),
}

impl From<u64> for SafetyWireStatus2633929726 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SafetyWireStatus2633929726::NotAvailable,
            2 => SafetyWireStatus2633929726::Error,
            1 => SafetyWireStatus2633929726::SafetyWireHasBeenActivated,
            0 => SafetyWireStatus2633929726::SafetyWireHasNotBeenActivated,
            value => SafetyWireStatus2633929726::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngVrblGmtryTrbArCtrlShtffValve2566772222 {
    NotAvailable,
    Reserved,
    VgtAirCtrlShutoffValveIsOn,
    VgtAirCtrlShutoffValveIsOff,
    XValue(u64),
}

impl From<u64> for EngVrblGmtryTrbArCtrlShtffValve2566772222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngVrblGmtryTrbArCtrlShtffValve2566772222::NotAvailable,
            2 => EngVrblGmtryTrbArCtrlShtffValve2566772222::Reserved,
            1 => EngVrblGmtryTrbArCtrlShtffValve2566772222::VgtAirCtrlShutoffValveIsOn,
            0 => EngVrblGmtryTrbArCtrlShtffValve2566772222::VgtAirCtrlShutoffValveIsOff,
            value => EngVrblGmtryTrbArCtrlShtffValve2566772222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngRotationDirection2633940734 {
    NotAvailable,
    Reserved,
    ClockWise,
    CounterClockWise,
    XValue(u64),
}

impl From<u64> for EngRotationDirection2633940734 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngRotationDirection2633940734::NotAvailable,
            2 => EngRotationDirection2633940734::Reserved,
            1 => EngRotationDirection2633940734::ClockWise,
            0 => EngRotationDirection2633940734::CounterClockWise,
            value => EngRotationDirection2633940734::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VhclAccelerationRateLimitStatus2364539902 {
    NotAvailable,
    Reserved,
    LimitActive,
    LimitNotActive,
    XValue(u64),
}

impl From<u64> for VhclAccelerationRateLimitStatus2364539902 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => VhclAccelerationRateLimitStatus2364539902::NotAvailable,
            2 => VhclAccelerationRateLimitStatus2364539902::Reserved,
            1 => VhclAccelerationRateLimitStatus2364539902::LimitActive,
            0 => VhclAccelerationRateLimitStatus2364539902::LimitNotActive,
            value => VhclAccelerationRateLimitStatus2364539902::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AccelPedal2LowIdleSwitch2364539902 {
    NotAvailable,
    Error,
    AccelPedal2InLowIdleCondition,
    AcclPedal2NotInLowIdleCondition,
    XValue(u64),
}

impl From<u64> for AccelPedal2LowIdleSwitch2364539902 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AccelPedal2LowIdleSwitch2364539902::NotAvailable,
            2 => AccelPedal2LowIdleSwitch2364539902::Error,
            1 => AccelPedal2LowIdleSwitch2364539902::AccelPedal2InLowIdleCondition,
            0 => AccelPedal2LowIdleSwitch2364539902::AcclPedal2NotInLowIdleCondition,
            value => AccelPedal2LowIdleSwitch2364539902::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RoadSpeedLimitStatus2364539902 {
    NotAvailable,
    Error,
    NotActive,
    Active,
    XValue(u64),
}

impl From<u64> for RoadSpeedLimitStatus2364539902 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RoadSpeedLimitStatus2364539902::NotAvailable,
            2 => RoadSpeedLimitStatus2364539902::Error,
            1 => RoadSpeedLimitStatus2364539902::NotActive,
            0 => RoadSpeedLimitStatus2364539902::Active,
            value => RoadSpeedLimitStatus2364539902::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AccelPedalKickdownSwitch2364539902 {
    NotAvailable,
    Error,
    KickdownActive,
    KickdownPassive,
    XValue(u64),
}

impl From<u64> for AccelPedalKickdownSwitch2364539902 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AccelPedalKickdownSwitch2364539902::NotAvailable,
            2 => AccelPedalKickdownSwitch2364539902::Error,
            1 => AccelPedalKickdownSwitch2364539902::KickdownActive,
            0 => AccelPedalKickdownSwitch2364539902::KickdownPassive,
            value => AccelPedalKickdownSwitch2364539902::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AccelPedal1LowIdleSwitch2364539902 {
    NotAvailable,
    Error,
    AccelPedal1InLowIdleCondition,
    AcclPedal1NotInLowIdleCondition,
    XValue(u64),
}

impl From<u64> for AccelPedal1LowIdleSwitch2364539902 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AccelPedal1LowIdleSwitch2364539902::NotAvailable,
            2 => AccelPedal1LowIdleSwitch2364539902::Error,
            1 => AccelPedal1LowIdleSwitch2364539902::AccelPedal1InLowIdleCondition,
            0 => AccelPedal1LowIdleSwitch2364539902::AcclPedal1NotInLowIdleCondition,
            value => AccelPedal1LowIdleSwitch2364539902::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngStarterMode2364540158 {
    NotAvailable,
    Error,
    StarterInhibitedReasonUnknown,
    X1011reserved,
    StrtrInhbtdDueToStarterOvertemp,
    StrtrInhbtdDToActiveImmobilizer,
    StrtrInhbtdDtDrvlnEnggdOthrTrns,
    StrtrInhbtdDtEngNtReadyForStart,
    StrtrInhbtdDToEngAlreadyRunning,
    StrtFnshdStrtrNtActvAftrHvngBnA,
    StarterActiveGearEngaged,
    StarterActiveGearNotEngaged,
    StartNotRqed,
    XValue(u64),
}

impl From<u64> for EngStarterMode2364540158 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngStarterMode2364540158::NotAvailable,
            14 => EngStarterMode2364540158::Error,
            12 => EngStarterMode2364540158::StarterInhibitedReasonUnknown,
            9 => EngStarterMode2364540158::X1011reserved,
            8 => EngStarterMode2364540158::StrtrInhbtdDueToStarterOvertemp,
            7 => EngStarterMode2364540158::StrtrInhbtdDToActiveImmobilizer,
            6 => EngStarterMode2364540158::StrtrInhbtdDtDrvlnEnggdOthrTrns,
            5 => EngStarterMode2364540158::StrtrInhbtdDtEngNtReadyForStart,
            4 => EngStarterMode2364540158::StrtrInhbtdDToEngAlreadyRunning,
            3 => EngStarterMode2364540158::StrtFnshdStrtrNtActvAftrHvngBnA,
            2 => EngStarterMode2364540158::StarterActiveGearEngaged,
            1 => EngStarterMode2364540158::StarterActiveGearNotEngaged,
            0 => EngStarterMode2364540158::StartNotRqed,
            value => EngStarterMode2364540158::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngTorqueMode2364540158 {
    NotAvailable,
    RemoteAccelerator,
    BrakingSystem,
    HighSpeedGovernor,
    TorqueLimiting,
    AbsControl,
    TransmissionControl,
    AsrControl,
    RoadSpeedGovernor,
    PtoGovernor,
    CruiseControl,
    AcceleratorPedalOperatorSelec,
    LowIdleGovernorNoRequestDe,
    XValue(u64),
}

impl From<u64> for EngTorqueMode2364540158 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngTorqueMode2364540158::NotAvailable,
            11 => EngTorqueMode2364540158::RemoteAccelerator,
            10 => EngTorqueMode2364540158::BrakingSystem,
            9 => EngTorqueMode2364540158::HighSpeedGovernor,
            8 => EngTorqueMode2364540158::TorqueLimiting,
            7 => EngTorqueMode2364540158::AbsControl,
            6 => EngTorqueMode2364540158::TransmissionControl,
            5 => EngTorqueMode2364540158::AsrControl,
            4 => EngTorqueMode2364540158::RoadSpeedGovernor,
            3 => EngTorqueMode2364540158::PtoGovernor,
            2 => EngTorqueMode2364540158::CruiseControl,
            1 => EngTorqueMode2364540158::AcceleratorPedalOperatorSelec,
            0 => EngTorqueMode2364540158::LowIdleGovernorNoRequestDe,
            value => EngTorqueMode2364540158::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SupportTsc1CtrlPurposeGroup4Of42566841342 {
    P25ReservedForAssignmentBySae,
    XValue(u64),
}

impl From<u64> for SupportTsc1CtrlPurposeGroup4Of42566841342 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SupportTsc1CtrlPurposeGroup4Of42566841342::P25ReservedForAssignmentBySae,
            value => SupportTsc1CtrlPurposeGroup4Of42566841342::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SupportVariableRateTsc1Message2566841342 {
    MsTransRate,
    XValue(u64),
}

impl From<u64> for SupportVariableRateTsc1Message2566841342 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SupportVariableRateTsc1Message2566841342::MsTransRate,
            value => SupportVariableRateTsc1Message2566841342::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SupportTsc1CtrlPurposeGroup3Of42566841342 {
    P17ReservedForAssignmentBySae,
    XValue(u64),
}

impl From<u64> for SupportTsc1CtrlPurposeGroup3Of42566841342 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SupportTsc1CtrlPurposeGroup3Of42566841342::P17ReservedForAssignmentBySae,
            value => SupportTsc1CtrlPurposeGroup3Of42566841342::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SupportTsc1CtrlPurposeGroup2Of42566841342 {
    P9ReservedForAssignmentBySae,
    XValue(u64),
}

impl From<u64> for SupportTsc1CtrlPurposeGroup2Of42566841342 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SupportTsc1CtrlPurposeGroup2Of42566841342::P9ReservedForAssignmentBySae,
            value => SupportTsc1CtrlPurposeGroup2Of42566841342::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SupportTsc1CtrlPurposeGroup1Of42566841342 {
    P1AccelPedalOperatorSelection,
    XValue(u64),
}

impl From<u64> for SupportTsc1CtrlPurposeGroup1Of42566841342 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SupportTsc1CtrlPurposeGroup1Of42566841342::P1AccelPedalOperatorSelection,
            value => SupportTsc1CtrlPurposeGroup1Of42566841342::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BrakeTempWarning2566767870 {
    NotAvailable,
    Reserved,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for BrakeTempWarning2566767870 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => BrakeTempWarning2566767870::NotAvailable,
            2 => BrakeTempWarning2566767870::Reserved,
            1 => BrakeTempWarning2566767870::Active,
            0 => BrakeTempWarning2566767870::NotActive,
            value => BrakeTempWarning2566767870::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum XbrActiveCtrlMode2566767870 {
    NotAvailable,
    X1110reservedForSaeAssignment,
    MxMdOfXbrAcclrtnCtrlBngExecuted,
    AddtnMdOfXbrAcclrtnCtrlBngExctd,
    DrvrsBrkDmndBngExctdNExtlBrkDmn,
    NoBrakeDemandBeingExecuted,
    XValue(u64),
}

impl From<u64> for XbrActiveCtrlMode2566767870 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => XbrActiveCtrlMode2566767870::NotAvailable,
            4 => XbrActiveCtrlMode2566767870::X1110reservedForSaeAssignment,
            3 => XbrActiveCtrlMode2566767870::MxMdOfXbrAcclrtnCtrlBngExecuted,
            2 => XbrActiveCtrlMode2566767870::AddtnMdOfXbrAcclrtnCtrlBngExctd,
            1 => XbrActiveCtrlMode2566767870::DrvrsBrkDmndBngExctdNExtlBrkDmn,
            0 => XbrActiveCtrlMode2566767870::NoBrakeDemandBeingExecuted,
            value => XbrActiveCtrlMode2566767870::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum XbrSystemState2566767870 {
    NotAvailable,
    NoExtlBrakeDemandWillBeAccepted,
    OnlyExtlBrkDmndOfHghstXbrPrrtyW,
    AnyExtlBrkeDemandWillBeAccepted,
    XValue(u64),
}

impl From<u64> for XbrSystemState2566767870 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => XbrSystemState2566767870::NotAvailable,
            2 => XbrSystemState2566767870::NoExtlBrakeDemandWillBeAccepted,
            1 => XbrSystemState2566767870::OnlyExtlBrkDmndOfHghstXbrPrrtyW,
            0 => XbrSystemState2566767870::AnyExtlBrkeDemandWillBeAccepted,
            value => XbrSystemState2566767870::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FoundationBrakeUse2566767870 {
    NotAvailable,
    Reserved,
    FoundationBrakesInUse,
    FoundationBrakesNotInUse,
    XValue(u64),
}

impl From<u64> for FoundationBrakeUse2566767870 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FoundationBrakeUse2566767870::NotAvailable,
            2 => FoundationBrakeUse2566767870::Reserved,
            1 => FoundationBrakeUse2566767870::FoundationBrakesInUse,
            0 => FoundationBrakeUse2566767870::FoundationBrakesNotInUse,
            value => FoundationBrakeUse2566767870::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HillHolderMode2566767870 {
    NotAvailable,
    Reserved,
    X101notDefined,
    ActvBtWllChngTInctvInAShortTime,
    Active,
    Inactive,
    XValue(u64),
}

impl From<u64> for HillHolderMode2566767870 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => HillHolderMode2566767870::NotAvailable,
            6 => HillHolderMode2566767870::Reserved,
            3 => HillHolderMode2566767870::X101notDefined,
            2 => HillHolderMode2566767870::ActvBtWllChngTInctvInAShortTime,
            1 => HillHolderMode2566767870::Active,
            0 => HillHolderMode2566767870::Inactive,
            value => HillHolderMode2566767870::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HaltBrakeMode2566767870 {
    NotAvailable,
    Reserved,
    X101notDefined,
    ActiveButNotFunctioningProperly,
    Active,
    Inactive,
    XValue(u64),
}

impl From<u64> for HaltBrakeMode2566767870 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => HaltBrakeMode2566767870::NotAvailable,
            6 => HaltBrakeMode2566767870::Reserved,
            3 => HaltBrakeMode2566767870::X101notDefined,
            2 => HaltBrakeMode2566767870::ActiveButNotFunctioningProperly,
            1 => HaltBrakeMode2566767870::Active,
            0 => HaltBrakeMode2566767870::Inactive,
            value => HaltBrakeMode2566767870::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrctrMntdTrilerAbsWarningSignal2565865982 {
    TakeNoAction,
    Reserved,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TrctrMntdTrilerAbsWarningSignal2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrctrMntdTrilerAbsWarningSignal2565865982::TakeNoAction,
            2 => TrctrMntdTrilerAbsWarningSignal2565865982::Reserved,
            1 => TrctrMntdTrilerAbsWarningSignal2565865982::On,
            0 => TrctrMntdTrilerAbsWarningSignal2565865982::Off,
            value => TrctrMntdTrilerAbsWarningSignal2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerAbsStatus2565865982 {
    TrlrAbsSttsInfrmtnNtAvlblPrmtrN,
    Reserved,
    TrailerAbsActive,
    TrlrAbsSttsInfrmtnAvlblBtNtActv,
    XValue(u64),
}

impl From<u64> for TrailerAbsStatus2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TrailerAbsStatus2565865982::TrlrAbsSttsInfrmtnNtAvlblPrmtrN,
            2 => TrailerAbsStatus2565865982::Reserved,
            1 => TrailerAbsStatus2565865982::TrailerAbsActive,
            0 => TrailerAbsStatus2565865982::TrlrAbsSttsInfrmtnAvlblBtNtActv,
            value => TrailerAbsStatus2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HaltBrakeSwitch2565865982 {
    NotAvailable,
    Error,
    HaltBrakeSwitchActive,
    HaltBrakeSwitchPassive,
    XValue(u64),
}

impl From<u64> for HaltBrakeSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => HaltBrakeSwitch2565865982::NotAvailable,
            2 => HaltBrakeSwitch2565865982::Error,
            1 => HaltBrakeSwitch2565865982::HaltBrakeSwitchActive,
            0 => HaltBrakeSwitch2565865982::HaltBrakeSwitchPassive,
            value => HaltBrakeSwitch2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AtcAsrInformationSignal2565865982 {
    TakeNoAction,
    Reserved,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for AtcAsrInformationSignal2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AtcAsrInformationSignal2565865982::TakeNoAction,
            2 => AtcAsrInformationSignal2565865982::Reserved,
            1 => AtcAsrInformationSignal2565865982::On,
            0 => AtcAsrInformationSignal2565865982::Off,
            value => AtcAsrInformationSignal2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AbsEbsAmberWarningSignal2565865982 {
    TakeNoAction,
    Reserved,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for AbsEbsAmberWarningSignal2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AbsEbsAmberWarningSignal2565865982::TakeNoAction,
            2 => AbsEbsAmberWarningSignal2565865982::Reserved,
            1 => AbsEbsAmberWarningSignal2565865982::On,
            0 => AbsEbsAmberWarningSignal2565865982::Off,
            value => AbsEbsAmberWarningSignal2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EbsRedWarningSignal2565865982 {
    TakeNoAction,
    Reserved,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EbsRedWarningSignal2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EbsRedWarningSignal2565865982::TakeNoAction,
            2 => EbsRedWarningSignal2565865982::Reserved,
            1 => EbsRedWarningSignal2565865982::On,
            0 => EbsRedWarningSignal2565865982::Off,
            value => EbsRedWarningSignal2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AbsFullyOperational2565865982 {
    NotAvailable,
    Reserved,
    FullyOperational,
    NotFullyOperational,
    XValue(u64),
}

impl From<u64> for AbsFullyOperational2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AbsFullyOperational2565865982::NotAvailable,
            2 => AbsFullyOperational2565865982::Reserved,
            1 => AbsFullyOperational2565865982::FullyOperational,
            0 => AbsFullyOperational2565865982::NotFullyOperational,
            value => AbsFullyOperational2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RemoteAccelEnableSwitch2565865982 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for RemoteAccelEnableSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RemoteAccelEnableSwitch2565865982::NotAvailable,
            2 => RemoteAccelEnableSwitch2565865982::Error,
            1 => RemoteAccelEnableSwitch2565865982::On,
            0 => RemoteAccelEnableSwitch2565865982::Off,
            value => RemoteAccelEnableSwitch2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngAuxEngShutdownSwitch2565865982 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngAuxEngShutdownSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngAuxEngShutdownSwitch2565865982::NotAvailable,
            2 => EngAuxEngShutdownSwitch2565865982::Error,
            1 => EngAuxEngShutdownSwitch2565865982::On,
            0 => EngAuxEngShutdownSwitch2565865982::Off,
            value => EngAuxEngShutdownSwitch2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngDerateSwitch2565865982 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngDerateSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngDerateSwitch2565865982::NotAvailable,
            2 => EngDerateSwitch2565865982::Error,
            1 => EngDerateSwitch2565865982::On,
            0 => EngDerateSwitch2565865982::Off,
            value => EngDerateSwitch2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AccelInterlockSwitch2565865982 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for AccelInterlockSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AccelInterlockSwitch2565865982::NotAvailable,
            2 => AccelInterlockSwitch2565865982::Error,
            1 => AccelInterlockSwitch2565865982::On,
            0 => AccelInterlockSwitch2565865982::Off,
            value => AccelInterlockSwitch2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractionCtrlOverrideSwitch2565865982 {
    NotAvailableNotInstalled,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for TractionCtrlOverrideSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TractionCtrlOverrideSwitch2565865982::NotAvailableNotInstalled,
            2 => TractionCtrlOverrideSwitch2565865982::Error,
            1 => TractionCtrlOverrideSwitch2565865982::On,
            0 => TractionCtrlOverrideSwitch2565865982::Off,
            value => TractionCtrlOverrideSwitch2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AsrHillHolderSwitch2565865982 {
    NotAvailable,
    Error,
    AsrHillHolderSwitchActive,
    AsrHillHolderSwitchPassive,
    XValue(u64),
}

impl From<u64> for AsrHillHolderSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AsrHillHolderSwitch2565865982::NotAvailable,
            2 => AsrHillHolderSwitch2565865982::Error,
            1 => AsrHillHolderSwitch2565865982::AsrHillHolderSwitchActive,
            0 => AsrHillHolderSwitch2565865982::AsrHillHolderSwitchPassive,
            value => AsrHillHolderSwitch2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AsrOffroadSwitch2565865982 {
    Error,
    AsrOffroadSwitchActive,
    AsrOffroadSwitchPassive,
    NotAvailable,
    XValue(u64),
}

impl From<u64> for AsrOffroadSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => AsrOffroadSwitch2565865982::Error,
            1 => AsrOffroadSwitch2565865982::AsrOffroadSwitchActive,
            0 => AsrOffroadSwitch2565865982::AsrOffroadSwitchPassive,
            3 => AsrOffroadSwitch2565865982::NotAvailable,
            value => AsrOffroadSwitch2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AbsOffroadSwitch2565865982 {
    NotAvailable,
    Error,
    AbsOffroadSwitchActive,
    AbsOffroadSwitchPassive,
    XValue(u64),
}

impl From<u64> for AbsOffroadSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AbsOffroadSwitch2565865982::NotAvailable,
            2 => AbsOffroadSwitch2565865982::Error,
            1 => AbsOffroadSwitch2565865982::AbsOffroadSwitchActive,
            0 => AbsOffroadSwitch2565865982::AbsOffroadSwitchPassive,
            value => AbsOffroadSwitch2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EbsBrakeSwitch2565865982 {
    NotAvailable,
    Error,
    BrakePedalIsBeingPressed,
    BrakePedalIsNotBeingPressed,
    XValue(u64),
}

impl From<u64> for EbsBrakeSwitch2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EbsBrakeSwitch2565865982::NotAvailable,
            2 => EbsBrakeSwitch2565865982::Error,
            1 => EbsBrakeSwitch2565865982::BrakePedalIsBeingPressed,
            0 => EbsBrakeSwitch2565865982::BrakePedalIsNotBeingPressed,
            value => EbsBrakeSwitch2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AntiLockBrakingActive2565865982 {
    NotAvailable,
    Reserved,
    AbsActive,
    AbsPassiveButInstalled,
    XValue(u64),
}

impl From<u64> for AntiLockBrakingActive2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AntiLockBrakingActive2565865982::NotAvailable,
            2 => AntiLockBrakingActive2565865982::Reserved,
            1 => AntiLockBrakingActive2565865982::AbsActive,
            0 => AntiLockBrakingActive2565865982::AbsPassiveButInstalled,
            value => AntiLockBrakingActive2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AsrBrakeCtrlActive2565865982 {
    NotAvailable,
    Reserved,
    AsrBrakeCtrlActive,
    AsrBrakeCtrlPassiveButInstalled,
    XValue(u64),
}

impl From<u64> for AsrBrakeCtrlActive2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AsrBrakeCtrlActive2565865982::NotAvailable,
            2 => AsrBrakeCtrlActive2565865982::Reserved,
            1 => AsrBrakeCtrlActive2565865982::AsrBrakeCtrlActive,
            0 => AsrBrakeCtrlActive2565865982::AsrBrakeCtrlPassiveButInstalled,
            value => AsrBrakeCtrlActive2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AsrEngCtrlActive2565865982 {
    NotAvailable,
    Reserved,
    AsrEngCtrlActive,
    AsrEngCtrlPassiveButInstalled,
    XValue(u64),
}

impl From<u64> for AsrEngCtrlActive2565865982 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AsrEngCtrlActive2565865982::NotAvailable,
            2 => AsrEngCtrlActive2565865982::Reserved,
            1 => AsrEngCtrlActive2565865982::AsrEngCtrlActive,
            0 => AsrEngCtrlActive2565865982::AsrEngCtrlPassiveButInstalled,
            value => AsrEngCtrlActive2565865982::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RearAxleGroupEngagementStatus2565867262 {
    NotAvailable,
    Error,
    RearAxleGroupEngaged,
    RearAxleGroupDisengaged,
    XValue(u64),
}

impl From<u64> for RearAxleGroupEngagementStatus2565867262 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RearAxleGroupEngagementStatus2565867262::NotAvailable,
            2 => RearAxleGroupEngagementStatus2565867262::Error,
            1 => RearAxleGroupEngagementStatus2565867262::RearAxleGroupEngaged,
            0 => RearAxleGroupEngagementStatus2565867262::RearAxleGroupDisengaged,
            value => RearAxleGroupEngagementStatus2565867262::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FrontAxleGroupEngagementStatus2565867262 {
    NotAvailable,
    Error,
    FrontAxleGroupEngaged,
    FrontAxleGroupDisengaged,
    XValue(u64),
}

impl From<u64> for FrontAxleGroupEngagementStatus2565867262 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FrontAxleGroupEngagementStatus2565867262::NotAvailable,
            2 => FrontAxleGroupEngagementStatus2565867262::Error,
            1 => FrontAxleGroupEngagementStatus2565867262::FrontAxleGroupEngaged,
            0 => FrontAxleGroupEngagementStatus2565867262::FrontAxleGroupDisengaged,
            value => FrontAxleGroupEngagementStatus2565867262::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DiffLockStateCentralRear2565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u64),
}

impl From<u64> for DiffLockStateCentralRear2565867262 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => DiffLockStateCentralRear2565867262::NotAvailable,
            2 => DiffLockStateCentralRear2565867262::Error,
            1 => DiffLockStateCentralRear2565867262::DiffLockEngaged,
            0 => DiffLockStateCentralRear2565867262::DiffLockDisengaged,
            value => DiffLockStateCentralRear2565867262::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DiffLockStateCentralFront2565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u64),
}

impl From<u64> for DiffLockStateCentralFront2565867262 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => DiffLockStateCentralFront2565867262::NotAvailable,
            2 => DiffLockStateCentralFront2565867262::Error,
            1 => DiffLockStateCentralFront2565867262::DiffLockEngaged,
            0 => DiffLockStateCentralFront2565867262::DiffLockDisengaged,
            value => DiffLockStateCentralFront2565867262::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DiffLockStateCentral2565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u64),
}

impl From<u64> for DiffLockStateCentral2565867262 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => DiffLockStateCentral2565867262::NotAvailable,
            2 => DiffLockStateCentral2565867262::Error,
            1 => DiffLockStateCentral2565867262::DiffLockEngaged,
            0 => DiffLockStateCentral2565867262::DiffLockDisengaged,
            value => DiffLockStateCentral2565867262::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DiffLockStateRearAxle22565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u64),
}

impl From<u64> for DiffLockStateRearAxle22565867262 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => DiffLockStateRearAxle22565867262::NotAvailable,
            2 => DiffLockStateRearAxle22565867262::Error,
            1 => DiffLockStateRearAxle22565867262::DiffLockEngaged,
            0 => DiffLockStateRearAxle22565867262::DiffLockDisengaged,
            value => DiffLockStateRearAxle22565867262::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DiffLockStateRearAxle12565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u64),
}

impl From<u64> for DiffLockStateRearAxle12565867262 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => DiffLockStateRearAxle12565867262::NotAvailable,
            2 => DiffLockStateRearAxle12565867262::Error,
            1 => DiffLockStateRearAxle12565867262::DiffLockEngaged,
            0 => DiffLockStateRearAxle12565867262::DiffLockDisengaged,
            value => DiffLockStateRearAxle12565867262::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DiffLockStateFrontAxle22565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u64),
}

impl From<u64> for DiffLockStateFrontAxle22565867262 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => DiffLockStateFrontAxle22565867262::NotAvailable,
            2 => DiffLockStateFrontAxle22565867262::Error,
            1 => DiffLockStateFrontAxle22565867262::DiffLockEngaged,
            0 => DiffLockStateFrontAxle22565867262::DiffLockDisengaged,
            value => DiffLockStateFrontAxle22565867262::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DiffLockStateFrontAxle12565867262 {
    NotAvailable,
    Error,
    DiffLockEngaged,
    DiffLockDisengaged,
    XValue(u64),
}

impl From<u64> for DiffLockStateFrontAxle12565867262 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => DiffLockStateFrontAxle12565867262::NotAvailable,
            2 => DiffLockStateFrontAxle12565867262::Error,
            1 => DiffLockStateFrontAxle12565867262::DiffLockEngaged,
            0 => DiffLockStateFrontAxle12565867262::DiffLockDisengaged,
            value => DiffLockStateFrontAxle12565867262::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngStartEnableDevice2Config2566768382 {
    NotAvailable,
    X1110reserved,
    ElectricInletAirHeaterInstalled,
    EtherInjectionInstalled,
    FuelledStartInstalled,
    GlowPlugsInstalled,
    NoStartEnableDevice2Installed,
    XValue(u64),
}

impl From<u64> for EngStartEnableDevice2Config2566768382 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngStartEnableDevice2Config2566768382::NotAvailable,
            5 => EngStartEnableDevice2Config2566768382::X1110reserved,
            4 => EngStartEnableDevice2Config2566768382::ElectricInletAirHeaterInstalled,
            3 => EngStartEnableDevice2Config2566768382::EtherInjectionInstalled,
            2 => EngStartEnableDevice2Config2566768382::FuelledStartInstalled,
            1 => EngStartEnableDevice2Config2566768382::GlowPlugsInstalled,
            0 => EngStartEnableDevice2Config2566768382::NoStartEnableDevice2Installed,
            value => EngStartEnableDevice2Config2566768382::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngStartEnableDevice1Config2566768382 {
    NotAvailable,
    X1110reserved,
    ElectricInletAirHeaterInstalled,
    EtherInjectionInstalled,
    FuelledStartInstalled,
    GlowPlugsInstalled,
    NoStartEnableDevice1Installed,
    XValue(u64),
}

impl From<u64> for EngStartEnableDevice1Config2566768382 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngStartEnableDevice1Config2566768382::NotAvailable,
            5 => EngStartEnableDevice1Config2566768382::X1110reserved,
            4 => EngStartEnableDevice1Config2566768382::ElectricInletAirHeaterInstalled,
            3 => EngStartEnableDevice1Config2566768382::EtherInjectionInstalled,
            2 => EngStartEnableDevice1Config2566768382::FuelledStartInstalled,
            1 => EngStartEnableDevice1Config2566768382::GlowPlugsInstalled,
            0 => EngStartEnableDevice1Config2566768382::NoStartEnableDevice1Installed,
            value => EngStartEnableDevice1Config2566768382::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngStartEnableDevice22566768382 {
    Reserved,
    StartEnableOn,
    StartEnableOff,
    XValue(u64),
}

impl From<u64> for EngStartEnableDevice22566768382 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => EngStartEnableDevice22566768382::Reserved,
            1 => EngStartEnableDevice22566768382::StartEnableOn,
            0 => EngStartEnableDevice22566768382::StartEnableOff,
            value => EngStartEnableDevice22566768382::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngStartEnableDevice12566768382 {
    NotAvailible,
    Reserved,
    StartEnableOn,
    StartEnableOff,
    XValue(u64),
}

impl From<u64> for EngStartEnableDevice12566768382 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngStartEnableDevice12566768382::NotAvailible,
            2 => EngStartEnableDevice12566768382::Reserved,
            1 => EngStartEnableDevice12566768382::StartEnableOn,
            0 => EngStartEnableDevice12566768382::StartEnableOff,
            value => EngStartEnableDevice12566768382::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransOilLevelRq2566771966 {
    DontCareTakeNoAction,
    Reserved,
    TransOilLevelReadingDesired,
    NoTransOilLevelReadingDesired,
    XValue(u64),
}

impl From<u64> for TransOilLevelRq2566771966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TransOilLevelRq2566771966::DontCareTakeNoAction,
            2 => TransOilLevelRq2566771966::Reserved,
            1 => TransOilLevelRq2566771966::TransOilLevelReadingDesired,
            0 => TransOilLevelRq2566771966::NoTransOilLevelReadingDesired,
            value => TransOilLevelRq2566771966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FifthWheelReleaseCtrl2566771966 {
    NotAvailable,
    Error,
    CplrUnlckdTrlrCnBUnhtchdHitched,
    CouplerLocked,
    XValue(u64),
}

impl From<u64> for FifthWheelReleaseCtrl2566771966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FifthWheelReleaseCtrl2566771966::NotAvailable,
            2 => FifthWheelReleaseCtrl2566771966::Error,
            1 => FifthWheelReleaseCtrl2566771966::CplrUnlckdTrlrCnBUnhtchdHitched,
            0 => FifthWheelReleaseCtrl2566771966::CouplerLocked,
            value => FifthWheelReleaseCtrl2566771966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FfthWhlRlaseCtrlSecurityLockout2566771966 {
    NotAvailable,
    Error,
    FifthWheelReleaseEnabled,
    FifthWheelReleaseDisabled,
    XValue(u64),
}

impl From<u64> for FfthWhlRlaseCtrlSecurityLockout2566771966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FfthWhlRlaseCtrlSecurityLockout2566771966::NotAvailable,
            2 => FfthWhlRlaseCtrlSecurityLockout2566771966::Error,
            1 => FfthWhlRlaseCtrlSecurityLockout2566771966::FifthWheelReleaseEnabled,
            0 => FfthWhlRlaseCtrlSecurityLockout2566771966::FifthWheelReleaseDisabled,
            value => FfthWhlRlaseCtrlSecurityLockout2566771966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransferCaseSelectorSwitch2566771966 {
    ErrorIndicator,
    X101reservedForSaeAssignment,
    Neutral,
    Wheel,
    XValue(u64),
}

impl From<u64> for TransferCaseSelectorSwitch2566771966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            6 => TransferCaseSelectorSwitch2566771966::ErrorIndicator,
            3 => TransferCaseSelectorSwitch2566771966::X101reservedForSaeAssignment,
            2 => TransferCaseSelectorSwitch2566771966::Neutral,
            1 => TransferCaseSelectorSwitch2566771966::Wheel,
            value => TransferCaseSelectorSwitch2566771966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RqCabZoneHeating2564882174 {
    DontCareTakeNoAction,
    Reserved,
    HeatCabZone,
    DoNotCabEngZone,
    XValue(u64),
}

impl From<u64> for RqCabZoneHeating2564882174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RqCabZoneHeating2564882174::DontCareTakeNoAction,
            2 => RqCabZoneHeating2564882174::Reserved,
            1 => RqCabZoneHeating2564882174::HeatCabZone,
            0 => RqCabZoneHeating2564882174::DoNotCabEngZone,
            value => RqCabZoneHeating2564882174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RqEngZoneHeating2564882174 {
    DontCareTakeNoAction,
    Reserved,
    HeatEngZone,
    DoNotHeatEngZone,
    XValue(u64),
}

impl From<u64> for RqEngZoneHeating2564882174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RqEngZoneHeating2564882174::DontCareTakeNoAction,
            2 => RqEngZoneHeating2564882174::Reserved,
            1 => RqEngZoneHeating2564882174::HeatEngZone,
            0 => RqEngZoneHeating2564882174::DoNotHeatEngZone,
            value => RqEngZoneHeating2564882174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxHeaterModeRq2564882174 {
    DontCareTakeNoAction,
    Reserved,
    X1101notDefined,
    NormalMode,
    EconomyMode,
    OffDtadrPrErpnRgltnsFrTrnsprtOf,
    DeactivateAuxHeater,
    XValue(u64),
}

impl From<u64> for AuxHeaterModeRq2564882174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => AuxHeaterModeRq2564882174::DontCareTakeNoAction,
            14 => AuxHeaterModeRq2564882174::Reserved,
            4 => AuxHeaterModeRq2564882174::X1101notDefined,
            3 => AuxHeaterModeRq2564882174::NormalMode,
            2 => AuxHeaterModeRq2564882174::EconomyMode,
            1 => AuxHeaterModeRq2564882174::OffDtadrPrErpnRgltnsFrTrnsprtOf,
            0 => AuxHeaterModeRq2564882174::DeactivateAuxHeater,
            value => AuxHeaterModeRq2564882174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SeatBeltSwitch2564882174 {
    NotAvailable,
    ErrrSwtchStteCannotBeDetermined,
    OkSeatBeltIsBuckled,
    NotBuckled,
    XValue(u64),
}

impl From<u64> for SeatBeltSwitch2564882174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SeatBeltSwitch2564882174::NotAvailable,
            2 => SeatBeltSwitch2564882174::ErrrSwtchStteCannotBeDetermined,
            1 => SeatBeltSwitch2564882174::OkSeatBeltIsBuckled,
            0 => SeatBeltSwitch2564882174::NotBuckled,
            value => SeatBeltSwitch2564882174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OperatorSeatDirectionSwitch2564882174 {
    NotAvailable,
    Error,
    OperatorSeatIsFacingForward,
    OperatorSeatNotFacingForward,
    XValue(u64),
}

impl From<u64> for OperatorSeatDirectionSwitch2564882174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => OperatorSeatDirectionSwitch2564882174::NotAvailable,
            2 => OperatorSeatDirectionSwitch2564882174::Error,
            1 => OperatorSeatDirectionSwitch2564882174::OperatorSeatIsFacingForward,
            0 => OperatorSeatDirectionSwitch2564882174::OperatorSeatNotFacingForward,
            value => OperatorSeatDirectionSwitch2564882174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BatteryMainSwitchHoldRq2564882174 {
    DontCareTakeNoAction,
    Undefined,
    HoldBatteryMainSwitch,
    ReleaseBatteryMainSwitch,
    XValue(u64),
}

impl From<u64> for BatteryMainSwitchHoldRq2564882174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => BatteryMainSwitchHoldRq2564882174::DontCareTakeNoAction,
            2 => BatteryMainSwitchHoldRq2564882174::Undefined,
            1 => BatteryMainSwitchHoldRq2564882174::HoldBatteryMainSwitch,
            0 => BatteryMainSwitchHoldRq2564882174::ReleaseBatteryMainSwitch,
            value => BatteryMainSwitchHoldRq2564882174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxHeaterCoolantPumpRq2564882174 {
    DontCareTakeNoAction,
    Reserved,
    ActivateWaterPump,
    DeactivateWaterPump,
    XValue(u64),
}

impl From<u64> for AuxHeaterCoolantPumpRq2564882174 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxHeaterCoolantPumpRq2564882174::DontCareTakeNoAction,
            2 => AuxHeaterCoolantPumpRq2564882174::Reserved,
            1 => AuxHeaterCoolantPumpRq2564882174::ActivateWaterPump,
            0 => AuxHeaterCoolantPumpRq2564882174::DeactivateWaterPump,
            value => AuxHeaterCoolantPumpRq2564882174::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ParkBrakeReleaseInhibitRq2566844926 {
    Unavailable,
    SaeReserved,
    ParkBrakeReleaseInhibitRqed,
    ParkBrakeReleaseInhibitNotRqed,
    XValue(u64),
}

impl From<u64> for ParkBrakeReleaseInhibitRq2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ParkBrakeReleaseInhibitRq2566844926::Unavailable,
            2 => ParkBrakeReleaseInhibitRq2566844926::SaeReserved,
            1 => ParkBrakeReleaseInhibitRq2566844926::ParkBrakeReleaseInhibitRqed,
            0 => ParkBrakeReleaseInhibitRq2566844926::ParkBrakeReleaseInhibitNotRqed,
            value => ParkBrakeReleaseInhibitRq2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngShutdownOverrideSwitch2566844926 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngShutdownOverrideSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngShutdownOverrideSwitch2566844926::NotAvailable,
            2 => EngShutdownOverrideSwitch2566844926::Error,
            1 => EngShutdownOverrideSwitch2566844926::On,
            0 => EngShutdownOverrideSwitch2566844926::Off,
            value => EngShutdownOverrideSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngTestModeSwitch2566844926 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngTestModeSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngTestModeSwitch2566844926::NotAvailable,
            2 => EngTestModeSwitch2566844926::Error,
            1 => EngTestModeSwitch2566844926::On,
            0 => EngTestModeSwitch2566844926::Off,
            value => EngTestModeSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngIdleDecrementSwitch2566844926 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngIdleDecrementSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngIdleDecrementSwitch2566844926::NotAvailable,
            2 => EngIdleDecrementSwitch2566844926::Error,
            1 => EngIdleDecrementSwitch2566844926::On,
            0 => EngIdleDecrementSwitch2566844926::Off,
            value => EngIdleDecrementSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngIdleIncrementSwitch2566844926 {
    NotAvailable,
    Error,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for EngIdleIncrementSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => EngIdleIncrementSwitch2566844926::NotAvailable,
            2 => EngIdleIncrementSwitch2566844926::Error,
            1 => EngIdleIncrementSwitch2566844926::On,
            0 => EngIdleIncrementSwitch2566844926::Off,
            value => EngIdleIncrementSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CruiseCtrlAccelerateSwitch2566844926 {
    NotAvailable,
    Error,
    CrsCtrlActivatorInPosAccelerate,
    CrsCtrlActvtrNotInPosAccelerate,
    XValue(u64),
}

impl From<u64> for CruiseCtrlAccelerateSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CruiseCtrlAccelerateSwitch2566844926::NotAvailable,
            2 => CruiseCtrlAccelerateSwitch2566844926::Error,
            1 => CruiseCtrlAccelerateSwitch2566844926::CrsCtrlActivatorInPosAccelerate,
            0 => CruiseCtrlAccelerateSwitch2566844926::CrsCtrlActvtrNotInPosAccelerate,
            value => CruiseCtrlAccelerateSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CruiseCtrlResumeSwitch2566844926 {
    NotAvailable,
    Error,
    CruiseCtrlActivatorInPosResume,
    CrseCtrlActivatorNotInPosResume,
    XValue(u64),
}

impl From<u64> for CruiseCtrlResumeSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CruiseCtrlResumeSwitch2566844926::NotAvailable,
            2 => CruiseCtrlResumeSwitch2566844926::Error,
            1 => CruiseCtrlResumeSwitch2566844926::CruiseCtrlActivatorInPosResume,
            0 => CruiseCtrlResumeSwitch2566844926::CrseCtrlActivatorNotInPosResume,
            value => CruiseCtrlResumeSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CruiseCtrlCoastSwitch2566844926 {
    NotAvailable,
    Error,
    CruiseCtrlActivatorInPosCoast,
    CriseCtrlActivatorNotInPosCoast,
    XValue(u64),
}

impl From<u64> for CruiseCtrlCoastSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CruiseCtrlCoastSwitch2566844926::NotAvailable,
            2 => CruiseCtrlCoastSwitch2566844926::Error,
            1 => CruiseCtrlCoastSwitch2566844926::CruiseCtrlActivatorInPosCoast,
            0 => CruiseCtrlCoastSwitch2566844926::CriseCtrlActivatorNotInPosCoast,
            value => CruiseCtrlCoastSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CruiseCtrlSetSwitch2566844926 {
    NotAvailable,
    Error,
    CruiseCtrlActivatorInPosSet,
    CruiseCtrlActivatorNotInPosSet,
    XValue(u64),
}

impl From<u64> for CruiseCtrlSetSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CruiseCtrlSetSwitch2566844926::NotAvailable,
            2 => CruiseCtrlSetSwitch2566844926::Error,
            1 => CruiseCtrlSetSwitch2566844926::CruiseCtrlActivatorInPosSet,
            0 => CruiseCtrlSetSwitch2566844926::CruiseCtrlActivatorNotInPosSet,
            value => CruiseCtrlSetSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ClutchSwitch2566844926 {
    NotAvailable,
    Error,
    ClutchPedalDepressed,
    ClutchPedalReleased,
    XValue(u64),
}

impl From<u64> for ClutchSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ClutchSwitch2566844926::NotAvailable,
            2 => ClutchSwitch2566844926::Error,
            1 => ClutchSwitch2566844926::ClutchPedalDepressed,
            0 => ClutchSwitch2566844926::ClutchPedalReleased,
            value => ClutchSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BrakeSwitch2566844926 {
    NotAvailable,
    Error,
    BrakePedalDepressed,
    BrakePedalReleased,
    XValue(u64),
}

impl From<u64> for BrakeSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => BrakeSwitch2566844926::NotAvailable,
            2 => BrakeSwitch2566844926::Error,
            1 => BrakeSwitch2566844926::BrakePedalDepressed,
            0 => BrakeSwitch2566844926::BrakePedalReleased,
            value => BrakeSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CruiseCtrlEnableSwitch2566844926 {
    NotAvailable,
    Error,
    CruiseCtrlEnabled,
    CruiseCtrlDisabled,
    XValue(u64),
}

impl From<u64> for CruiseCtrlEnableSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CruiseCtrlEnableSwitch2566844926::NotAvailable,
            2 => CruiseCtrlEnableSwitch2566844926::Error,
            1 => CruiseCtrlEnableSwitch2566844926::CruiseCtrlEnabled,
            0 => CruiseCtrlEnableSwitch2566844926::CruiseCtrlDisabled,
            value => CruiseCtrlEnableSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CruiseCtrlActive2566844926 {
    NotAvailable,
    Error,
    CruiseCtrlSwitchedOn,
    CruiseCtrlSwitchedOff,
    XValue(u64),
}

impl From<u64> for CruiseCtrlActive2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CruiseCtrlActive2566844926::NotAvailable,
            2 => CruiseCtrlActive2566844926::Error,
            1 => CruiseCtrlActive2566844926::CruiseCtrlSwitchedOn,
            0 => CruiseCtrlActive2566844926::CruiseCtrlSwitchedOff,
            value => CruiseCtrlActive2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CruiseCtrlPauseSwitch2566844926 {
    TakeNoAction,
    ErrorIndicator,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for CruiseCtrlPauseSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CruiseCtrlPauseSwitch2566844926::TakeNoAction,
            2 => CruiseCtrlPauseSwitch2566844926::ErrorIndicator,
            1 => CruiseCtrlPauseSwitch2566844926::On,
            0 => CruiseCtrlPauseSwitch2566844926::Off,
            value => CruiseCtrlPauseSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ParkingBrakeSwitch2566844926 {
    NotAvailable,
    Error,
    ParkingBrakeSet,
    ParkingBrakeNotSet,
    XValue(u64),
}

impl From<u64> for ParkingBrakeSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ParkingBrakeSwitch2566844926::NotAvailable,
            2 => ParkingBrakeSwitch2566844926::Error,
            1 => ParkingBrakeSwitch2566844926::ParkingBrakeSet,
            0 => ParkingBrakeSwitch2566844926::ParkingBrakeNotSet,
            value => ParkingBrakeSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TwoSpeedAxleSwitch2566844926 {
    NotAvailable,
    Error,
    HighSpeedRange,
    LowSpeedRange,
    XValue(u64),
}

impl From<u64> for TwoSpeedAxleSwitch2566844926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => TwoSpeedAxleSwitch2566844926::NotAvailable,
            2 => TwoSpeedAxleSwitch2566844926::Error,
            1 => TwoSpeedAxleSwitch2566844926::HighSpeedRange,
            0 => TwoSpeedAxleSwitch2566844926::LowSpeedRange,
            value => TwoSpeedAxleSwitch2566844926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BatteryMainSwitchHoldState2566809342 {
    DontCareTakeNoAction,
    Reserved,
    BatteryMainSwitchHeld,
    BatteryMainSwitchNotHeld,
    XValue(u64),
}

impl From<u64> for BatteryMainSwitchHoldState2566809342 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => BatteryMainSwitchHoldState2566809342::DontCareTakeNoAction,
            2 => BatteryMainSwitchHoldState2566809342::Reserved,
            1 => BatteryMainSwitchHoldState2566809342::BatteryMainSwitchHeld,
            0 => BatteryMainSwitchHoldState2566809342::BatteryMainSwitchNotHeld,
            value => BatteryMainSwitchHoldState2566809342::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3XAxisDetentPosStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Joystick3XAxisDetentPosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3XAxisDetentPosStatus2365446910::NotAvailable,
            2 => Joystick3XAxisDetentPosStatus2365446910::ErrorIndicator,
            1 => Joystick3XAxisDetentPosStatus2365446910::InDetentPos,
            0 => Joystick3XAxisDetentPosStatus2365446910::NotInDetentPos,
            value => Joystick3XAxisDetentPosStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3Button9PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick3Button9PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3Button9PressedStatus2365446910::NotAvailable,
            2 => Joystick3Button9PressedStatus2365446910::ErrorIndicator,
            1 => Joystick3Button9PressedStatus2365446910::ButtonPressed,
            0 => Joystick3Button9PressedStatus2365446910::ButtonNotPressed,
            value => Joystick3Button9PressedStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3Button10PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick3Button10PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3Button10PressedStatus2365446910::NotAvailable,
            2 => Joystick3Button10PressedStatus2365446910::ErrorIndicator,
            1 => Joystick3Button10PressedStatus2365446910::ButtonPressed,
            0 => Joystick3Button10PressedStatus2365446910::ButtonNotPressed,
            value => Joystick3Button10PressedStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3Button11PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick3Button11PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3Button11PressedStatus2365446910::NotAvailable,
            2 => Joystick3Button11PressedStatus2365446910::ErrorIndicator,
            1 => Joystick3Button11PressedStatus2365446910::ButtonPressed,
            0 => Joystick3Button11PressedStatus2365446910::ButtonNotPressed,
            value => Joystick3Button11PressedStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3Button12PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick3Button12PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3Button12PressedStatus2365446910::NotAvailable,
            2 => Joystick3Button12PressedStatus2365446910::ErrorIndicator,
            1 => Joystick3Button12PressedStatus2365446910::ButtonPressed,
            0 => Joystick3Button12PressedStatus2365446910::ButtonNotPressed,
            value => Joystick3Button12PressedStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3YAxisDetentPosStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Joystick3YAxisDetentPosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3YAxisDetentPosStatus2365446910::NotAvailable,
            2 => Joystick3YAxisDetentPosStatus2365446910::ErrorIndicator,
            1 => Joystick3YAxisDetentPosStatus2365446910::InDetentPos,
            0 => Joystick3YAxisDetentPosStatus2365446910::NotInDetentPos,
            value => Joystick3YAxisDetentPosStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3YAxsLvrFrwrdPstvPsStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck3YAxsLvrFrwrdPstvPsStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3YAxsLvrFrwrdPstvPsStatus2365446910::NotAvailable,
            2 => Jystck3YAxsLvrFrwrdPstvPsStatus2365446910::ErrorIndicator,
            1 => Jystck3YAxsLvrFrwrdPstvPsStatus2365446910::OnPositiveSideOfNeutral,
            0 => Jystck3YAxsLvrFrwrdPstvPsStatus2365446910::NotOnPositiveSideOfNeutral,
            value => Jystck3YAxsLvrFrwrdPstvPsStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3YAxsLvrBckNgtvePosStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck3YAxsLvrBckNgtvePosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3YAxsLvrBckNgtvePosStatus2365446910::NotAvailable,
            2 => Jystck3YAxsLvrBckNgtvePosStatus2365446910::ErrorIndicator,
            1 => Jystck3YAxsLvrBckNgtvePosStatus2365446910::OnNegativeSideOfNeutral,
            0 => Jystck3YAxsLvrBckNgtvePosStatus2365446910::NotOnNegativeSideOfNeutral,
            value => Jystck3YAxsLvrBckNgtvePosStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3YAxisNeutralPosStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u64),
}

impl From<u64> for Joystick3YAxisNeutralPosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3YAxisNeutralPosStatus2365446910::NotAvailable,
            2 => Joystick3YAxisNeutralPosStatus2365446910::ErrorIndicator,
            1 => Joystick3YAxisNeutralPosStatus2365446910::InNeutralPos,
            0 => Joystick3YAxisNeutralPosStatus2365446910::NotInNeutralPos,
            value => Joystick3YAxisNeutralPosStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3XAxsLvrRghtPstvPosStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck3XAxsLvrRghtPstvPosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck3XAxsLvrRghtPstvPosStatus2365446910::NotAvailable,
            2 => Jystck3XAxsLvrRghtPstvPosStatus2365446910::ErrorIndicator,
            1 => Jystck3XAxsLvrRghtPstvPosStatus2365446910::OnPositiveSideOfNeutral,
            0 => Jystck3XAxsLvrRghtPstvPosStatus2365446910::NotOnPositiveSideOfNeutral,
            value => Jystck3XAxsLvrRghtPstvPosStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck3XAxsLvrLftNgtvePosStatus2365446910 {
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    NotAvailable,
    XValue(u64),
}

impl From<u64> for Jystck3XAxsLvrLftNgtvePosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => Jystck3XAxsLvrLftNgtvePosStatus2365446910::ErrorIndicator,
            1 => Jystck3XAxsLvrLftNgtvePosStatus2365446910::OnNegativeSideOfNeutral,
            0 => Jystck3XAxsLvrLftNgtvePosStatus2365446910::NotOnNegativeSideOfNeutral,
            3 => Jystck3XAxsLvrLftNgtvePosStatus2365446910::NotAvailable,
            value => Jystck3XAxsLvrLftNgtvePosStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3XAxisNeutralPosStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u64),
}

impl From<u64> for Joystick3XAxisNeutralPosStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3XAxisNeutralPosStatus2365446910::NotAvailable,
            2 => Joystick3XAxisNeutralPosStatus2365446910::ErrorIndicator,
            1 => Joystick3XAxisNeutralPosStatus2365446910::InNeutralPos,
            0 => Joystick3XAxisNeutralPosStatus2365446910::NotInNeutralPos,
            value => Joystick3XAxisNeutralPosStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3Button5PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick3Button5PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3Button5PressedStatus2365446910::NotAvailable,
            2 => Joystick3Button5PressedStatus2365446910::ErrorIndicator,
            1 => Joystick3Button5PressedStatus2365446910::ButtonPressed,
            0 => Joystick3Button5PressedStatus2365446910::ButtonNotPressed,
            value => Joystick3Button5PressedStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3Button6PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick3Button6PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3Button6PressedStatus2365446910::NotAvailable,
            2 => Joystick3Button6PressedStatus2365446910::ErrorIndicator,
            1 => Joystick3Button6PressedStatus2365446910::ButtonPressed,
            0 => Joystick3Button6PressedStatus2365446910::ButtonNotPressed,
            value => Joystick3Button6PressedStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3Button7PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick3Button7PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3Button7PressedStatus2365446910::NotAvailable,
            2 => Joystick3Button7PressedStatus2365446910::ErrorIndicator,
            1 => Joystick3Button7PressedStatus2365446910::ButtonPressed,
            0 => Joystick3Button7PressedStatus2365446910::ButtonNotPressed,
            value => Joystick3Button7PressedStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3Button8PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick3Button8PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3Button8PressedStatus2365446910::NotAvailable,
            2 => Joystick3Button8PressedStatus2365446910::ErrorIndicator,
            1 => Joystick3Button8PressedStatus2365446910::ButtonPressed,
            0 => Joystick3Button8PressedStatus2365446910::ButtonNotPressed,
            value => Joystick3Button8PressedStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3Button1PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick3Button1PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3Button1PressedStatus2365446910::NotAvailable,
            2 => Joystick3Button1PressedStatus2365446910::ErrorIndicator,
            1 => Joystick3Button1PressedStatus2365446910::ButtonPressed,
            0 => Joystick3Button1PressedStatus2365446910::ButtonNotPressed,
            value => Joystick3Button1PressedStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3Button2PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick3Button2PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3Button2PressedStatus2365446910::NotAvailable,
            2 => Joystick3Button2PressedStatus2365446910::ErrorIndicator,
            1 => Joystick3Button2PressedStatus2365446910::ButtonPressed,
            0 => Joystick3Button2PressedStatus2365446910::ButtonNotPressed,
            value => Joystick3Button2PressedStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3Button3PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick3Button3PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3Button3PressedStatus2365446910::NotAvailable,
            2 => Joystick3Button3PressedStatus2365446910::ErrorIndicator,
            1 => Joystick3Button3PressedStatus2365446910::ButtonPressed,
            0 => Joystick3Button3PressedStatus2365446910::ButtonNotPressed,
            value => Joystick3Button3PressedStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick3Button4PressedStatus2365446910 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick3Button4PressedStatus2365446910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick3Button4PressedStatus2365446910::NotAvailable,
            2 => Joystick3Button4PressedStatus2365446910::ErrorIndicator,
            1 => Joystick3Button4PressedStatus2365446910::ButtonPressed,
            0 => Joystick3Button4PressedStatus2365446910::ButtonNotPressed,
            value => Joystick3Button4PressedStatus2365446910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2XAxisDetentPosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Joystick2XAxisDetentPosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2XAxisDetentPosStatus2365446398::NotAvailable,
            2 => Joystick2XAxisDetentPosStatus2365446398::ErrorIndicator,
            1 => Joystick2XAxisDetentPosStatus2365446398::InDetentPos,
            0 => Joystick2XAxisDetentPosStatus2365446398::NotInDetentPos,
            value => Joystick2XAxisDetentPosStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2YAxisDetentPosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Joystick2YAxisDetentPosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2YAxisDetentPosStatus2365446398::NotAvailable,
            2 => Joystick2YAxisDetentPosStatus2365446398::ErrorIndicator,
            1 => Joystick2YAxisDetentPosStatus2365446398::InDetentPos,
            0 => Joystick2YAxisDetentPosStatus2365446398::NotInDetentPos,
            value => Joystick2YAxisDetentPosStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2YAxsLvrFrwrdPstvPsStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck2YAxsLvrFrwrdPstvPsStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2YAxsLvrFrwrdPstvPsStatus2365446398::NotAvailable,
            2 => Jystck2YAxsLvrFrwrdPstvPsStatus2365446398::ErrorIndicator,
            1 => Jystck2YAxsLvrFrwrdPstvPsStatus2365446398::OnPositiveSideOfNeutral,
            0 => Jystck2YAxsLvrFrwrdPstvPsStatus2365446398::NotOnPositiveSideOfNeutral,
            value => Jystck2YAxsLvrFrwrdPstvPsStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2YAxsLvrBckNgtvePosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck2YAxsLvrBckNgtvePosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2YAxsLvrBckNgtvePosStatus2365446398::NotAvailable,
            2 => Jystck2YAxsLvrBckNgtvePosStatus2365446398::ErrorIndicator,
            1 => Jystck2YAxsLvrBckNgtvePosStatus2365446398::OnNegativeSideOfNeutral,
            0 => Jystck2YAxsLvrBckNgtvePosStatus2365446398::NotOnNegativeSideOfNeutral,
            value => Jystck2YAxsLvrBckNgtvePosStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2YAxisNeutralPosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u64),
}

impl From<u64> for Joystick2YAxisNeutralPosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2YAxisNeutralPosStatus2365446398::NotAvailable,
            2 => Joystick2YAxisNeutralPosStatus2365446398::ErrorIndicator,
            1 => Joystick2YAxisNeutralPosStatus2365446398::InNeutralPos,
            0 => Joystick2YAxisNeutralPosStatus2365446398::NotInNeutralPos,
            value => Joystick2YAxisNeutralPosStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2XAxsLvrRghtPstvPosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck2XAxsLvrRghtPstvPosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2XAxsLvrRghtPstvPosStatus2365446398::NotAvailable,
            2 => Jystck2XAxsLvrRghtPstvPosStatus2365446398::ErrorIndicator,
            1 => Jystck2XAxsLvrRghtPstvPosStatus2365446398::OnPositiveSideOfNeutral,
            0 => Jystck2XAxsLvrRghtPstvPosStatus2365446398::NotOnPositiveSideOfNeutral,
            value => Jystck2XAxsLvrRghtPstvPosStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck2XAxsLvrLftNgtvePosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck2XAxsLvrLftNgtvePosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck2XAxsLvrLftNgtvePosStatus2365446398::NotAvailable,
            2 => Jystck2XAxsLvrLftNgtvePosStatus2365446398::ErrorIndicator,
            1 => Jystck2XAxsLvrLftNgtvePosStatus2365446398::OnNegativeSideOfNeutral,
            0 => Jystck2XAxsLvrLftNgtvePosStatus2365446398::NotOnNegativeSideOfNeutral,
            value => Jystck2XAxsLvrLftNgtvePosStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2XAxisNeutralPosStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u64),
}

impl From<u64> for Joystick2XAxisNeutralPosStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2XAxisNeutralPosStatus2365446398::NotAvailable,
            2 => Joystick2XAxisNeutralPosStatus2365446398::ErrorIndicator,
            1 => Joystick2XAxisNeutralPosStatus2365446398::InNeutralPos,
            0 => Joystick2XAxisNeutralPosStatus2365446398::NotInNeutralPos,
            value => Joystick2XAxisNeutralPosStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2Button9PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick2Button9PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2Button9PressedStatus2365446398::NotAvailable,
            2 => Joystick2Button9PressedStatus2365446398::ErrorIndicator,
            1 => Joystick2Button9PressedStatus2365446398::ButtonPressed,
            0 => Joystick2Button9PressedStatus2365446398::ButtonNotPressed,
            value => Joystick2Button9PressedStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2Button10PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick2Button10PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2Button10PressedStatus2365446398::NotAvailable,
            2 => Joystick2Button10PressedStatus2365446398::ErrorIndicator,
            1 => Joystick2Button10PressedStatus2365446398::ButtonPressed,
            0 => Joystick2Button10PressedStatus2365446398::ButtonNotPressed,
            value => Joystick2Button10PressedStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2Button11PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick2Button11PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2Button11PressedStatus2365446398::NotAvailable,
            2 => Joystick2Button11PressedStatus2365446398::ErrorIndicator,
            1 => Joystick2Button11PressedStatus2365446398::ButtonPressed,
            0 => Joystick2Button11PressedStatus2365446398::ButtonNotPressed,
            value => Joystick2Button11PressedStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2Button12PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick2Button12PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2Button12PressedStatus2365446398::NotAvailable,
            2 => Joystick2Button12PressedStatus2365446398::ErrorIndicator,
            1 => Joystick2Button12PressedStatus2365446398::ButtonPressed,
            0 => Joystick2Button12PressedStatus2365446398::ButtonNotPressed,
            value => Joystick2Button12PressedStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2Button5PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick2Button5PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2Button5PressedStatus2365446398::NotAvailable,
            2 => Joystick2Button5PressedStatus2365446398::ErrorIndicator,
            1 => Joystick2Button5PressedStatus2365446398::ButtonPressed,
            0 => Joystick2Button5PressedStatus2365446398::ButtonNotPressed,
            value => Joystick2Button5PressedStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2Button6PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick2Button6PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2Button6PressedStatus2365446398::NotAvailable,
            2 => Joystick2Button6PressedStatus2365446398::ErrorIndicator,
            1 => Joystick2Button6PressedStatus2365446398::ButtonPressed,
            0 => Joystick2Button6PressedStatus2365446398::ButtonNotPressed,
            value => Joystick2Button6PressedStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2Button7PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick2Button7PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2Button7PressedStatus2365446398::NotAvailable,
            2 => Joystick2Button7PressedStatus2365446398::ErrorIndicator,
            1 => Joystick2Button7PressedStatus2365446398::ButtonPressed,
            0 => Joystick2Button7PressedStatus2365446398::ButtonNotPressed,
            value => Joystick2Button7PressedStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2Button8PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick2Button8PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2Button8PressedStatus2365446398::NotAvailable,
            2 => Joystick2Button8PressedStatus2365446398::ErrorIndicator,
            1 => Joystick2Button8PressedStatus2365446398::ButtonPressed,
            0 => Joystick2Button8PressedStatus2365446398::ButtonNotPressed,
            value => Joystick2Button8PressedStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2Button1PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick2Button1PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2Button1PressedStatus2365446398::NotAvailable,
            2 => Joystick2Button1PressedStatus2365446398::ErrorIndicator,
            1 => Joystick2Button1PressedStatus2365446398::ButtonPressed,
            0 => Joystick2Button1PressedStatus2365446398::ButtonNotPressed,
            value => Joystick2Button1PressedStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2Button2PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick2Button2PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2Button2PressedStatus2365446398::NotAvailable,
            2 => Joystick2Button2PressedStatus2365446398::ErrorIndicator,
            1 => Joystick2Button2PressedStatus2365446398::ButtonPressed,
            0 => Joystick2Button2PressedStatus2365446398::ButtonNotPressed,
            value => Joystick2Button2PressedStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2Button3PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick2Button3PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2Button3PressedStatus2365446398::NotAvailable,
            2 => Joystick2Button3PressedStatus2365446398::ErrorIndicator,
            1 => Joystick2Button3PressedStatus2365446398::ButtonPressed,
            0 => Joystick2Button3PressedStatus2365446398::ButtonNotPressed,
            value => Joystick2Button3PressedStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick2Button4PressedStatus2365446398 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick2Button4PressedStatus2365446398 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick2Button4PressedStatus2365446398::NotAvailable,
            2 => Joystick2Button4PressedStatus2365446398::ErrorIndicator,
            1 => Joystick2Button4PressedStatus2365446398::ButtonPressed,
            0 => Joystick2Button4PressedStatus2365446398::ButtonNotPressed,
            value => Joystick2Button4PressedStatus2365446398::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1XAxisDetentPosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Joystick1XAxisDetentPosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1XAxisDetentPosStatus2365445886::NotAvailable,
            2 => Joystick1XAxisDetentPosStatus2365445886::ErrorIndicator,
            1 => Joystick1XAxisDetentPosStatus2365445886::InDetentPos,
            0 => Joystick1XAxisDetentPosStatus2365445886::NotInDetentPos,
            value => Joystick1XAxisDetentPosStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1YAxisDetentPosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    InDetentPos,
    NotInDetentPos,
    XValue(u64),
}

impl From<u64> for Joystick1YAxisDetentPosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1YAxisDetentPosStatus2365445886::NotAvailable,
            2 => Joystick1YAxisDetentPosStatus2365445886::ErrorIndicator,
            1 => Joystick1YAxisDetentPosStatus2365445886::InDetentPos,
            0 => Joystick1YAxisDetentPosStatus2365445886::NotInDetentPos,
            value => Joystick1YAxisDetentPosStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1YAxsLvrFrwrdPstvPsStatus2365445886 {
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    NotAvailable,
    ErrorIndicator,
    XValue(u64),
}

impl From<u64> for Jystck1YAxsLvrFrwrdPstvPsStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => Jystck1YAxsLvrFrwrdPstvPsStatus2365445886::OnPositiveSideOfNeutral,
            0 => Jystck1YAxsLvrFrwrdPstvPsStatus2365445886::NotOnPositiveSideOfNeutral,
            3 => Jystck1YAxsLvrFrwrdPstvPsStatus2365445886::NotAvailable,
            2 => Jystck1YAxsLvrFrwrdPstvPsStatus2365445886::ErrorIndicator,
            value => Jystck1YAxsLvrFrwrdPstvPsStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1YAxsLvrBckNgtvePosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck1YAxsLvrBckNgtvePosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1YAxsLvrBckNgtvePosStatus2365445886::NotAvailable,
            2 => Jystck1YAxsLvrBckNgtvePosStatus2365445886::ErrorIndicator,
            1 => Jystck1YAxsLvrBckNgtvePosStatus2365445886::OnNegativeSideOfNeutral,
            0 => Jystck1YAxsLvrBckNgtvePosStatus2365445886::NotOnNegativeSideOfNeutral,
            value => Jystck1YAxsLvrBckNgtvePosStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1YAxisNeutralPosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u64),
}

impl From<u64> for Joystick1YAxisNeutralPosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1YAxisNeutralPosStatus2365445886::NotAvailable,
            2 => Joystick1YAxisNeutralPosStatus2365445886::ErrorIndicator,
            1 => Joystick1YAxisNeutralPosStatus2365445886::InNeutralPos,
            0 => Joystick1YAxisNeutralPosStatus2365445886::NotInNeutralPos,
            value => Joystick1YAxisNeutralPosStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1Button9PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick1Button9PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1Button9PressedStatus2365445886::NotAvailable,
            2 => Joystick1Button9PressedStatus2365445886::ErrorIndicator,
            1 => Joystick1Button9PressedStatus2365445886::ButtonPressed,
            0 => Joystick1Button9PressedStatus2365445886::ButtonNotPressed,
            value => Joystick1Button9PressedStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1Button10PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick1Button10PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1Button10PressedStatus2365445886::NotAvailable,
            2 => Joystick1Button10PressedStatus2365445886::ErrorIndicator,
            1 => Joystick1Button10PressedStatus2365445886::ButtonPressed,
            0 => Joystick1Button10PressedStatus2365445886::ButtonNotPressed,
            value => Joystick1Button10PressedStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1Button11PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick1Button11PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1Button11PressedStatus2365445886::NotAvailable,
            2 => Joystick1Button11PressedStatus2365445886::ErrorIndicator,
            1 => Joystick1Button11PressedStatus2365445886::ButtonPressed,
            0 => Joystick1Button11PressedStatus2365445886::ButtonNotPressed,
            value => Joystick1Button11PressedStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1Button12PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick1Button12PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1Button12PressedStatus2365445886::NotAvailable,
            2 => Joystick1Button12PressedStatus2365445886::ErrorIndicator,
            1 => Joystick1Button12PressedStatus2365445886::ButtonPressed,
            0 => Joystick1Button12PressedStatus2365445886::ButtonNotPressed,
            value => Joystick1Button12PressedStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1Button5PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick1Button5PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1Button5PressedStatus2365445886::NotAvailable,
            2 => Joystick1Button5PressedStatus2365445886::ErrorIndicator,
            1 => Joystick1Button5PressedStatus2365445886::ButtonPressed,
            0 => Joystick1Button5PressedStatus2365445886::ButtonNotPressed,
            value => Joystick1Button5PressedStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1Button6PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick1Button6PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1Button6PressedStatus2365445886::NotAvailable,
            2 => Joystick1Button6PressedStatus2365445886::ErrorIndicator,
            1 => Joystick1Button6PressedStatus2365445886::ButtonPressed,
            0 => Joystick1Button6PressedStatus2365445886::ButtonNotPressed,
            value => Joystick1Button6PressedStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1Button7PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick1Button7PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1Button7PressedStatus2365445886::NotAvailable,
            2 => Joystick1Button7PressedStatus2365445886::ErrorIndicator,
            1 => Joystick1Button7PressedStatus2365445886::ButtonPressed,
            0 => Joystick1Button7PressedStatus2365445886::ButtonNotPressed,
            value => Joystick1Button7PressedStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1Button8PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick1Button8PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1Button8PressedStatus2365445886::NotAvailable,
            2 => Joystick1Button8PressedStatus2365445886::ErrorIndicator,
            1 => Joystick1Button8PressedStatus2365445886::ButtonPressed,
            0 => Joystick1Button8PressedStatus2365445886::ButtonNotPressed,
            value => Joystick1Button8PressedStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1Button1PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick1Button1PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1Button1PressedStatus2365445886::NotAvailable,
            2 => Joystick1Button1PressedStatus2365445886::ErrorIndicator,
            1 => Joystick1Button1PressedStatus2365445886::ButtonPressed,
            0 => Joystick1Button1PressedStatus2365445886::ButtonNotPressed,
            value => Joystick1Button1PressedStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1Button2PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick1Button2PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1Button2PressedStatus2365445886::NotAvailable,
            2 => Joystick1Button2PressedStatus2365445886::ErrorIndicator,
            1 => Joystick1Button2PressedStatus2365445886::ButtonPressed,
            0 => Joystick1Button2PressedStatus2365445886::ButtonNotPressed,
            value => Joystick1Button2PressedStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1Button3PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick1Button3PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1Button3PressedStatus2365445886::NotAvailable,
            2 => Joystick1Button3PressedStatus2365445886::ErrorIndicator,
            1 => Joystick1Button3PressedStatus2365445886::ButtonPressed,
            0 => Joystick1Button3PressedStatus2365445886::ButtonNotPressed,
            value => Joystick1Button3PressedStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1Button4PressedStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    ButtonPressed,
    ButtonNotPressed,
    XValue(u64),
}

impl From<u64> for Joystick1Button4PressedStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1Button4PressedStatus2365445886::NotAvailable,
            2 => Joystick1Button4PressedStatus2365445886::ErrorIndicator,
            1 => Joystick1Button4PressedStatus2365445886::ButtonPressed,
            0 => Joystick1Button4PressedStatus2365445886::ButtonNotPressed,
            value => Joystick1Button4PressedStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1XAxsLvrRghtPstvPosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    OnPositiveSideOfNeutral,
    NotOnPositiveSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck1XAxsLvrRghtPstvPosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1XAxsLvrRghtPstvPosStatus2365445886::NotAvailable,
            2 => Jystck1XAxsLvrRghtPstvPosStatus2365445886::ErrorIndicator,
            1 => Jystck1XAxsLvrRghtPstvPosStatus2365445886::OnPositiveSideOfNeutral,
            0 => Jystck1XAxsLvrRghtPstvPosStatus2365445886::NotOnPositiveSideOfNeutral,
            value => Jystck1XAxsLvrRghtPstvPosStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Jystck1XAxsLvrLftNgtvePosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    OnNegativeSideOfNeutral,
    NotOnNegativeSideOfNeutral,
    XValue(u64),
}

impl From<u64> for Jystck1XAxsLvrLftNgtvePosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Jystck1XAxsLvrLftNgtvePosStatus2365445886::NotAvailable,
            2 => Jystck1XAxsLvrLftNgtvePosStatus2365445886::ErrorIndicator,
            1 => Jystck1XAxsLvrLftNgtvePosStatus2365445886::OnNegativeSideOfNeutral,
            0 => Jystck1XAxsLvrLftNgtvePosStatus2365445886::NotOnNegativeSideOfNeutral,
            value => Jystck1XAxsLvrLftNgtvePosStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Joystick1XAxisNeutralPosStatus2365445886 {
    NotAvailable,
    ErrorIndicator,
    InNeutralPos,
    NotInNeutralPos,
    XValue(u64),
}

impl From<u64> for Joystick1XAxisNeutralPosStatus2365445886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Joystick1XAxisNeutralPosStatus2365445886::NotAvailable,
            2 => Joystick1XAxisNeutralPosStatus2365445886::ErrorIndicator,
            1 => Joystick1XAxisNeutralPosStatus2365445886::InNeutralPos,
            0 => Joystick1XAxisNeutralPosStatus2365445886::NotInNeutralPos,
            value => Joystick1XAxisNeutralPosStatus2365445886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ParkingBrakeRedWarningSignal2566847230 {
    TakeNoAction,
    Reserved,
    On,
    Off,
    XValue(u64),
}

impl From<u64> for ParkingBrakeRedWarningSignal2566847230 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ParkingBrakeRedWarningSignal2566847230::TakeNoAction,
            2 => ParkingBrakeRedWarningSignal2566847230::Reserved,
            1 => ParkingBrakeRedWarningSignal2566847230::On,
            0 => ParkingBrakeRedWarningSignal2566847230::Off,
            value => ParkingBrakeRedWarningSignal2566847230::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ParkBrakeReleaseInhibitStatus2566847230 {
    Unavailable,
    Error,
    ParkBrakeReleaseIsInhibited,
    ParkBrakeReleaseIsNotInhibited,
    XValue(u64),
}

impl From<u64> for ParkBrakeReleaseInhibitStatus2566847230 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ParkBrakeReleaseInhibitStatus2566847230::Unavailable,
            2 => ParkBrakeReleaseInhibitStatus2566847230::Error,
            1 => ParkBrakeReleaseInhibitStatus2566847230::ParkBrakeReleaseIsInhibited,
            0 => ParkBrakeReleaseInhibitStatus2566847230::ParkBrakeReleaseIsNotInhibited,
            value => ParkBrakeReleaseInhibitStatus2566847230::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ParkingBrakeActuator2566847230 {
    NotAvailable,
    Error,
    ParkingBrakeActuatorActive,
    ParkingBrakeActuatorInactive,
    XValue(u64),
}

impl From<u64> for ParkingBrakeActuator2566847230 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ParkingBrakeActuator2566847230::NotAvailable,
            2 => ParkingBrakeActuator2566847230::Error,
            1 => ParkingBrakeActuator2566847230::ParkingBrakeActuatorActive,
            0 => ParkingBrakeActuator2566847230::ParkingBrakeActuatorInactive,
            value => ParkingBrakeActuator2566847230::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AntitheftComponentStatusStates2631728894 {
    NotDefined,
    BlckdThsSttIndctsThtALckUnlckCm,
    Locked,
    UnlckdThsSttIndctsThtCmpnntCnBs,
    XValue(u64),
}

impl From<u64> for AntitheftComponentStatusStates2631728894 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AntitheftComponentStatusStates2631728894::NotDefined,
            2 => AntitheftComponentStatusStates2631728894::BlckdThsSttIndctsThtALckUnlckCm,
            1 => AntitheftComponentStatusStates2631728894::Locked,
            0 => AntitheftComponentStatusStates2631728894::UnlckdThsSttIndctsThtCmpnntCnBs,
            value => AntitheftComponentStatusStates2631728894::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AntthftEncryptnSdPrsntIndicator2631728894 {
    NotAvailable,
    Error,
    RandomNumberIsPresent,
    RandomNumberIsNotPresent,
    XValue(u64),
}

impl From<u64> for AntthftEncryptnSdPrsntIndicator2631728894 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AntthftEncryptnSdPrsntIndicator2631728894::NotAvailable,
            2 => AntthftEncryptnSdPrsntIndicator2631728894::Error,
            1 => AntthftEncryptnSdPrsntIndicator2631728894::RandomNumberIsPresent,
            0 => AntthftEncryptnSdPrsntIndicator2631728894::RandomNumberIsNotPresent,
            value => AntthftEncryptnSdPrsntIndicator2631728894::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AntitheftModifyPwdStates2631728894 {
    Notvalid,
    EmptyOfPwdsThsSttIndctsThtCmpnn,
    FullofPwds,
    OkThsSttIndctsThtRqWsSccssfllyP,
    XValue(u64),
}

impl From<u64> for AntitheftModifyPwdStates2631728894 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AntitheftModifyPwdStates2631728894::Notvalid,
            2 => AntitheftModifyPwdStates2631728894::EmptyOfPwdsThsSttIndctsThtCmpnn,
            1 => AntitheftModifyPwdStates2631728894::FullofPwds,
            0 => AntitheftModifyPwdStates2631728894::OkThsSttIndctsThtRqWsSccssfllyP,
            value => AntitheftModifyPwdStates2631728894::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AntitheftPwdValidIndicator2631728894 {
    NotAvailable,
    Error,
    PwdIsAValidatedPassword,
    PwdIsNotAValidatedPassword,
    XValue(u64),
}

impl From<u64> for AntitheftPwdValidIndicator2631728894 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AntitheftPwdValidIndicator2631728894::NotAvailable,
            2 => AntitheftPwdValidIndicator2631728894::Error,
            1 => AntitheftPwdValidIndicator2631728894::PwdIsAValidatedPassword,
            0 => AntitheftPwdValidIndicator2631728894::PwdIsNotAValidatedPassword,
            value => AntitheftPwdValidIndicator2631728894::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AntitheftCmdStates2631794430 {
    X111notDefined,
    Login,
    ChckSttsThsSttRprsntsARqTChckTs,
    LockorUnlock,
    ChngPwdThsSttRprsntsARqTCmpnntT,
    DeletePwd,
    AddPwdThsSttRprsntsARqTCmpnntTa,
    XValue(u64),
}

impl From<u64> for AntitheftCmdStates2631794430 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            6 => AntitheftCmdStates2631794430::X111notDefined,
            5 => AntitheftCmdStates2631794430::Login,
            4 => AntitheftCmdStates2631794430::ChckSttsThsSttRprsntsARqTChckTs,
            3 => AntitheftCmdStates2631794430::LockorUnlock,
            2 => AntitheftCmdStates2631794430::ChngPwdThsSttRprsntsARqTCmpnntT,
            1 => AntitheftCmdStates2631794430::DeletePwd,
            0 => AntitheftCmdStates2631794430::AddPwdThsSttRprsntsARqTCmpnntTa,
            value => AntitheftCmdStates2631794430::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AntitheftDesiredExitModeStates2631794430 {
    NotAvailable,
    NotDefined,
    LockWhenKeyOff,
    LckUpnOprtrRqThsSttIsUsdTIndctT,
    XValue(u64),
}

impl From<u64> for AntitheftDesiredExitModeStates2631794430 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AntitheftDesiredExitModeStates2631794430::NotAvailable,
            2 => AntitheftDesiredExitModeStates2631794430::NotDefined,
            1 => AntitheftDesiredExitModeStates2631794430::LockWhenKeyOff,
            0 => AntitheftDesiredExitModeStates2631794430::LckUpnOprtrRqThsSttIsUsdTIndctT,
            value => AntitheftDesiredExitModeStates2631794430::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AntthftEncryptonIndicatorStates2631794430 {
    NotAvailable,
    NotDefined,
    EncryptedCodePresent,
    EncryptnSdRqThsSttRprsntsARqstT,
    XValue(u64),
}

impl From<u64> for AntthftEncryptonIndicatorStates2631794430 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AntthftEncryptonIndicatorStates2631794430::NotAvailable,
            2 => AntthftEncryptonIndicatorStates2631794430::NotDefined,
            1 => AntthftEncryptonIndicatorStates2631794430::EncryptedCodePresent,
            0 => AntthftEncryptonIndicatorStates2631794430::EncryptnSdRqThsSttRprsntsARqstT,
            value => AntthftEncryptonIndicatorStates2631794430::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ElctrncShckAbsrbrCtrlMdLftTgAxl2365478910 {
    NotAvailable,
    Error,
    NormalOperationDampersActive,
    NormalOperationDampersPassive,
    XValue(u64),
}

impl From<u64> for ElctrncShckAbsrbrCtrlMdLftTgAxl2365478910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ElctrncShckAbsrbrCtrlMdLftTgAxl2365478910::NotAvailable,
            2 => ElctrncShckAbsrbrCtrlMdLftTgAxl2365478910::Error,
            1 => ElctrncShckAbsrbrCtrlMdLftTgAxl2365478910::NormalOperationDampersActive,
            0 => ElctrncShckAbsrbrCtrlMdLftTgAxl2365478910::NormalOperationDampersPassive,
            value => ElctrncShckAbsrbrCtrlMdLftTgAxl2365478910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ElctrncShckAbsrbrCtrlMdRearAxle2365478910 {
    NotAvailable,
    Error,
    NormalOperationDampersActive,
    NormalOperationDampersPassive,
    XValue(u64),
}

impl From<u64> for ElctrncShckAbsrbrCtrlMdRearAxle2365478910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ElctrncShckAbsrbrCtrlMdRearAxle2365478910::NotAvailable,
            2 => ElctrncShckAbsrbrCtrlMdRearAxle2365478910::Error,
            1 => ElctrncShckAbsrbrCtrlMdRearAxle2365478910::NormalOperationDampersActive,
            0 => ElctrncShckAbsrbrCtrlMdRearAxle2365478910::NormalOperationDampersPassive,
            value => ElctrncShckAbsrbrCtrlMdRearAxle2365478910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ElctrncShckAbsrbrCtrlMdFrntAxle2365478910 {
    NotAvailable,
    Error,
    NormalOperationDampersActive,
    NormalOperationDampersPassive,
    XValue(u64),
}

impl From<u64> for ElctrncShckAbsrbrCtrlMdFrntAxle2365478910 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ElctrncShckAbsrbrCtrlMdFrntAxle2365478910::NotAvailable,
            2 => ElctrncShckAbsrbrCtrlMdFrntAxle2365478910::Error,
            1 => ElctrncShckAbsrbrCtrlMdFrntAxle2365478910::NormalOperationDampersActive,
            0 => ElctrncShckAbsrbrCtrlMdFrntAxle2365478910::NormalOperationDampersPassive,
            value => ElctrncShckAbsrbrCtrlMdFrntAxle2365478910::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ProhibitAirSuspensionCtrl2362638078 {
    NotAvailable,
    ErrorIndicator,
    RqProhibitAirSuspensionCtrl,
    NoRq,
    XValue(u64),
}

impl From<u64> for ProhibitAirSuspensionCtrl2362638078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ProhibitAirSuspensionCtrl2362638078::NotAvailable,
            2 => ProhibitAirSuspensionCtrl2362638078::ErrorIndicator,
            1 => ProhibitAirSuspensionCtrl2362638078::RqProhibitAirSuspensionCtrl,
            0 => ProhibitAirSuspensionCtrl2362638078::NoRq,
            value => ProhibitAirSuspensionCtrl2362638078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum KneelingCmdRearAxle2362638078 {
    DontCareTakeNoAction,
    Reserved,
    ActivateKneeling,
    DeactivateKneeling,
    XValue(u64),
}

impl From<u64> for KneelingCmdRearAxle2362638078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => KneelingCmdRearAxle2362638078::DontCareTakeNoAction,
            2 => KneelingCmdRearAxle2362638078::Reserved,
            1 => KneelingCmdRearAxle2362638078::ActivateKneeling,
            0 => KneelingCmdRearAxle2362638078::DeactivateKneeling,
            value => KneelingCmdRearAxle2362638078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum KneelingCmdFrontAxle2362638078 {
    DontCareTakeNoAction,
    Reserved,
    ActivateKneeling,
    DeactivateKneeling,
    XValue(u64),
}

impl From<u64> for KneelingCmdFrontAxle2362638078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => KneelingCmdFrontAxle2362638078::DontCareTakeNoAction,
            2 => KneelingCmdFrontAxle2362638078::Reserved,
            1 => KneelingCmdFrontAxle2362638078::ActivateKneeling,
            0 => KneelingCmdFrontAxle2362638078::DeactivateKneeling,
            value => KneelingCmdFrontAxle2362638078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LevelCtrlModeRq2362638078 {
    DontCareTakeNoAction,
    Reserved,
    X1101notDefined,
    ExhaustBellows,
    TractionHelpLoadReduce,
    OptmmTrctn2IPrssAtThDrvnAxlIsCt,
    OptmmTrctn1IPrssAtThDrvnAxlIsCt,
    PrssRt2IRtBtwnThPrssrsAtThDrvnA,
    PrssRt1IRtBtwnThPrssrsAtThDrvnA,
    LdFxngIDrvnAxlnIsLddTaVlDfndByT,
    TrctnHlpIDrvnAxlIsLddTaMxVlGvnB,
    NrmlOprtnISystmPrfrmsAPrCtrlOfT,
    XValue(u64),
}

impl From<u64> for LevelCtrlModeRq2362638078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => LevelCtrlModeRq2362638078::DontCareTakeNoAction,
            14 => LevelCtrlModeRq2362638078::Reserved,
            9 => LevelCtrlModeRq2362638078::X1101notDefined,
            8 => LevelCtrlModeRq2362638078::ExhaustBellows,
            7 => LevelCtrlModeRq2362638078::TractionHelpLoadReduce,
            6 => LevelCtrlModeRq2362638078::OptmmTrctn2IPrssAtThDrvnAxlIsCt,
            5 => LevelCtrlModeRq2362638078::OptmmTrctn1IPrssAtThDrvnAxlIsCt,
            4 => LevelCtrlModeRq2362638078::PrssRt2IRtBtwnThPrssrsAtThDrvnA,
            3 => LevelCtrlModeRq2362638078::PrssRt1IRtBtwnThPrssrsAtThDrvnA,
            2 => LevelCtrlModeRq2362638078::LdFxngIDrvnAxlnIsLddTaVlDfndByT,
            1 => LevelCtrlModeRq2362638078::TrctnHlpIDrvnAxlIsLddTaMxVlGvnB,
            0 => LevelCtrlModeRq2362638078::NrmlOprtnISystmPrfrmsAPrCtrlOfT,
            value => LevelCtrlModeRq2362638078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum NominalLevelRqRearAxle2362638078 {
    DontCareTakeNoAction,
    Reserved,
    X1101notDefined,
    StopLevelChange,
    LowerLevel,
    UpperLevel,
    CustomerLevel,
    PresetLevel,
    NormalLevel3,
    NormalLevel2,
    NormalLevel1,
    NoLevelRq,
    XValue(u64),
}

impl From<u64> for NominalLevelRqRearAxle2362638078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => NominalLevelRqRearAxle2362638078::DontCareTakeNoAction,
            14 => NominalLevelRqRearAxle2362638078::Reserved,
            9 => NominalLevelRqRearAxle2362638078::X1101notDefined,
            8 => NominalLevelRqRearAxle2362638078::StopLevelChange,
            7 => NominalLevelRqRearAxle2362638078::LowerLevel,
            6 => NominalLevelRqRearAxle2362638078::UpperLevel,
            5 => NominalLevelRqRearAxle2362638078::CustomerLevel,
            4 => NominalLevelRqRearAxle2362638078::PresetLevel,
            3 => NominalLevelRqRearAxle2362638078::NormalLevel3,
            2 => NominalLevelRqRearAxle2362638078::NormalLevel2,
            1 => NominalLevelRqRearAxle2362638078::NormalLevel1,
            0 => NominalLevelRqRearAxle2362638078::NoLevelRq,
            value => NominalLevelRqRearAxle2362638078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum NominalLevelRqFrontAxle2362638078 {
    DontCareTakeNoAction,
    Reserved,
    X1101notDefined,
    StopLevelChange,
    LowerLevel,
    UpperLevel,
    CustomerLevel,
    PresetLevel,
    NormalLevel3,
    NormalLevel2,
    NormalLevel1,
    NoLevelRq,
    XValue(u64),
}

impl From<u64> for NominalLevelRqFrontAxle2362638078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => NominalLevelRqFrontAxle2362638078::DontCareTakeNoAction,
            14 => NominalLevelRqFrontAxle2362638078::Reserved,
            9 => NominalLevelRqFrontAxle2362638078::X1101notDefined,
            8 => NominalLevelRqFrontAxle2362638078::StopLevelChange,
            7 => NominalLevelRqFrontAxle2362638078::LowerLevel,
            6 => NominalLevelRqFrontAxle2362638078::UpperLevel,
            5 => NominalLevelRqFrontAxle2362638078::CustomerLevel,
            4 => NominalLevelRqFrontAxle2362638078::PresetLevel,
            3 => NominalLevelRqFrontAxle2362638078::NormalLevel3,
            2 => NominalLevelRqFrontAxle2362638078::NormalLevel2,
            1 => NominalLevelRqFrontAxle2362638078::NormalLevel1,
            0 => NominalLevelRqFrontAxle2362638078::NoLevelRq,
            value => NominalLevelRqFrontAxle2362638078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum KneelingCtrlModeRq2362638078 {
    DontCareTakeNoAction,
    Reserved,
    ManuallyActuated,
    AutomaticallyActuated,
    XValue(u64),
}

impl From<u64> for KneelingCtrlModeRq2362638078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => KneelingCtrlModeRq2362638078::DontCareTakeNoAction,
            2 => KneelingCtrlModeRq2362638078::Reserved,
            1 => KneelingCtrlModeRq2362638078::ManuallyActuated,
            0 => KneelingCtrlModeRq2362638078::AutomaticallyActuated,
            value => KneelingCtrlModeRq2362638078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum KneelingRqRightSide2362638078 {
    DontCareTakeNoAction,
    Reserved,
    KneelingRq,
    NoKneelingRq,
    XValue(u64),
}

impl From<u64> for KneelingRqRightSide2362638078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => KneelingRqRightSide2362638078::DontCareTakeNoAction,
            2 => KneelingRqRightSide2362638078::Reserved,
            1 => KneelingRqRightSide2362638078::KneelingRq,
            0 => KneelingRqRightSide2362638078::NoKneelingRq,
            value => KneelingRqRightSide2362638078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum KneelingRqLeftSide2362638078 {
    DontCareTakeNoAction,
    Reserved,
    KneelingRq,
    NoKneelingRq,
    XValue(u64),
}

impl From<u64> for KneelingRqLeftSide2362638078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => KneelingRqLeftSide2362638078::DontCareTakeNoAction,
            2 => KneelingRqLeftSide2362638078::Reserved,
            1 => KneelingRqLeftSide2362638078::KneelingRq,
            0 => KneelingRqLeftSide2362638078::NoKneelingRq,
            value => KneelingRqLeftSide2362638078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AutomaticTractionHelp2362638078 {
    DontCare,
    Reserved,
    EnableAutomaticTractionHelp,
    DisableAutomaticTractionHelp,
    XValue(u64),
}

impl From<u64> for AutomaticTractionHelp2362638078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AutomaticTractionHelp2362638078::DontCare,
            2 => AutomaticTractionHelp2362638078::Reserved,
            1 => AutomaticTractionHelp2362638078::EnableAutomaticTractionHelp,
            0 => AutomaticTractionHelp2362638078::DisableAutomaticTractionHelp,
            value => AutomaticTractionHelp2362638078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LiftAxle2PosCmd2362638078 {
    DontCareTakeNoAction,
    Reserved,
    LiftAxlePosUpTagAxleUnladen,
    LiftAxlePosDownTagAxleLaden,
    XValue(u64),
}

impl From<u64> for LiftAxle2PosCmd2362638078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LiftAxle2PosCmd2362638078::DontCareTakeNoAction,
            2 => LiftAxle2PosCmd2362638078::Reserved,
            1 => LiftAxle2PosCmd2362638078::LiftAxlePosUpTagAxleUnladen,
            0 => LiftAxle2PosCmd2362638078::LiftAxlePosDownTagAxleLaden,
            value => LiftAxle2PosCmd2362638078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LiftAxle1PosCmd2362638078 {
    DontCareTakeNoAction,
    Reserved,
    LiftAxlePosUpTagAxleUnladen,
    LiftAxlePosDownTagAxleLaden,
    XValue(u64),
}

impl From<u64> for LiftAxle1PosCmd2362638078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LiftAxle1PosCmd2362638078::DontCareTakeNoAction,
            2 => LiftAxle1PosCmd2362638078::Reserved,
            1 => LiftAxle1PosCmd2362638078::LiftAxlePosUpTagAxleUnladen,
            0 => LiftAxle1PosCmd2362638078::LiftAxlePosDownTagAxleLaden,
            value => LiftAxle1PosCmd2362638078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SspensionCtrlRefusalInformation2365479678 {
    X1101notDefined,
    NotAvailable,
    Error,
    GnrlRjctInSpcifiedReasonApplies,
    BelowSpeedLimit,
    AboveSpeedLimit,
    BogieDiffNotLocked,
    WouldExceedAxleLoadLimit,
    AxleLoadLimitReached,
    ActualRqNotRefused,
    XValue(u64),
}

impl From<u64> for SspensionCtrlRefusalInformation2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => SspensionCtrlRefusalInformation2365479678::X1101notDefined,
            15 => SspensionCtrlRefusalInformation2365479678::NotAvailable,
            14 => SspensionCtrlRefusalInformation2365479678::Error,
            6 => SspensionCtrlRefusalInformation2365479678::GnrlRjctInSpcifiedReasonApplies,
            5 => SspensionCtrlRefusalInformation2365479678::BelowSpeedLimit,
            4 => SspensionCtrlRefusalInformation2365479678::AboveSpeedLimit,
            3 => SspensionCtrlRefusalInformation2365479678::BogieDiffNotLocked,
            2 => SspensionCtrlRefusalInformation2365479678::WouldExceedAxleLoadLimit,
            1 => SspensionCtrlRefusalInformation2365479678::AxleLoadLimitReached,
            0 => SspensionCtrlRefusalInformation2365479678::ActualRqNotRefused,
            value => SspensionCtrlRefusalInformation2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SuspensionRemoteCtrl22365479678 {
    NotAvailable,
    Error,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for SuspensionRemoteCtrl22365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SuspensionRemoteCtrl22365479678::NotAvailable,
            2 => SuspensionRemoteCtrl22365479678::Error,
            1 => SuspensionRemoteCtrl22365479678::Active,
            0 => SuspensionRemoteCtrl22365479678::NotActive,
            value => SuspensionRemoteCtrl22365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SuspensionRemoteCtrl12365479678 {
    NotAvailable,
    Error,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for SuspensionRemoteCtrl12365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SuspensionRemoteCtrl12365479678::NotAvailable,
            2 => SuspensionRemoteCtrl12365479678::Error,
            1 => SuspensionRemoteCtrl12365479678::Active,
            0 => SuspensionRemoteCtrl12365479678::NotActive,
            value => SuspensionRemoteCtrl12365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RearAxleInBumperRange2365479678 {
    NotAvailable,
    Error,
    ActualLevelWithinBumperRange,
    ActualLevelOutOfBumperRange,
    XValue(u64),
}

impl From<u64> for RearAxleInBumperRange2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RearAxleInBumperRange2365479678::NotAvailable,
            2 => RearAxleInBumperRange2365479678::Error,
            1 => RearAxleInBumperRange2365479678::ActualLevelWithinBumperRange,
            0 => RearAxleInBumperRange2365479678::ActualLevelOutOfBumperRange,
            value => RearAxleInBumperRange2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FrontAxleInBumperRange2365479678 {
    NotAvailable,
    Error,
    ActualLevelWithinBumperRange,
    ActualLevelOutOfBumperRange,
    XValue(u64),
}

impl From<u64> for FrontAxleInBumperRange2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FrontAxleInBumperRange2365479678::NotAvailable,
            2 => FrontAxleInBumperRange2365479678::Error,
            1 => FrontAxleInBumperRange2365479678::ActualLevelWithinBumperRange,
            0 => FrontAxleInBumperRange2365479678::ActualLevelOutOfBumperRange,
            value => FrontAxleInBumperRange2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum DoorRelease2365479678 {
    NotAvailable,
    Error,
    DoorsMayBeOpened,
    DoorsMayNotBeOpened,
    XValue(u64),
}

impl From<u64> for DoorRelease2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => DoorRelease2365479678::NotAvailable,
            2 => DoorRelease2365479678::Error,
            1 => DoorRelease2365479678::DoorsMayBeOpened,
            0 => DoorRelease2365479678::DoorsMayNotBeOpened,
            value => DoorRelease2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VehicleMotionInhibit2365479678 {
    NotAvailable,
    Error,
    VehicleMotionIsInhibited,
    VehicleMayBeMoved,
    XValue(u64),
}

impl From<u64> for VehicleMotionInhibit2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => VehicleMotionInhibit2365479678::NotAvailable,
            2 => VehicleMotionInhibit2365479678::Error,
            1 => VehicleMotionInhibit2365479678::VehicleMotionIsInhibited,
            0 => VehicleMotionInhibit2365479678::VehicleMayBeMoved,
            value => VehicleMotionInhibit2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SecurityDevice2365479678 {
    NotAvailable,
    Error,
    Active,
    NotActive,
    XValue(u64),
}

impl From<u64> for SecurityDevice2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SecurityDevice2365479678::NotAvailable,
            2 => SecurityDevice2365479678::Error,
            1 => SecurityDevice2365479678::Active,
            0 => SecurityDevice2365479678::NotActive,
            value => SecurityDevice2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LevelCtrlMode2365479678 {
    X1101notDefined,
    NotAvailable,
    Error,
    AirSuspensionCtrlProhibited,
    ExhstngBllwFnctnIBllwsArExhstdT,
    TractionHelpLoadReduce,
    OptmmTrctn2IPrssAtThDrvnAxlIsCt,
    OptmmTrctn1IPrssAtThDrvnAxlIsCt,
    PrssRt2IRtBtwnThPrssrsAtThDrvnA,
    PrssRt1IRtBtwnThPrssrsAtThDrvnA,
    LdFxngIDrvnAxlnIsLddTaVlDfndByT,
    TrctnHlpIDrvnAxlIsLddTaMxVlGvnB,
    NrmlOprtnISystmPrfrmsAPrCtrlOfT,
    XValue(u64),
}

impl From<u64> for LevelCtrlMode2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            10 => LevelCtrlMode2365479678::X1101notDefined,
            15 => LevelCtrlMode2365479678::NotAvailable,
            14 => LevelCtrlMode2365479678::Error,
            9 => LevelCtrlMode2365479678::AirSuspensionCtrlProhibited,
            8 => LevelCtrlMode2365479678::ExhstngBllwFnctnIBllwsArExhstdT,
            7 => LevelCtrlMode2365479678::TractionHelpLoadReduce,
            6 => LevelCtrlMode2365479678::OptmmTrctn2IPrssAtThDrvnAxlIsCt,
            5 => LevelCtrlMode2365479678::OptmmTrctn1IPrssAtThDrvnAxlIsCt,
            4 => LevelCtrlMode2365479678::PrssRt2IRtBtwnThPrssrsAtThDrvnA,
            3 => LevelCtrlMode2365479678::PrssRt1IRtBtwnThPrssrsAtThDrvnA,
            2 => LevelCtrlMode2365479678::LdFxngIDrvnAxlnIsLddTaVlDfndByT,
            1 => LevelCtrlMode2365479678::TrctnHlpIDrvnAxlIsLddTaMxVlGvnB,
            0 => LevelCtrlMode2365479678::NrmlOprtnISystmPrfrmsAPrCtrlOfT,
            value => LevelCtrlMode2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum KneelingInformation2365479678 {
    NotAvailable,
    Error,
    X1101notDefined,
    KneelingAborted,
    LiftingActive,
    KneelingLevelReached,
    NotActive,
    XValue(u64),
}

impl From<u64> for KneelingInformation2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => KneelingInformation2365479678::NotAvailable,
            14 => KneelingInformation2365479678::Error,
            5 => KneelingInformation2365479678::X1101notDefined,
            4 => KneelingInformation2365479678::KneelingAborted,
            3 => KneelingInformation2365479678::LiftingActive,
            2 => KneelingInformation2365479678::KneelingLevelReached,
            0 => KneelingInformation2365479678::NotActive,
            value => KneelingInformation2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LiftingCtrlModeRearAxle2365479678 {
    NotAvailable,
    Error,
    LiftingActive,
    LiftingNotActive,
    XValue(u64),
}

impl From<u64> for LiftingCtrlModeRearAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LiftingCtrlModeRearAxle2365479678::NotAvailable,
            2 => LiftingCtrlModeRearAxle2365479678::Error,
            1 => LiftingCtrlModeRearAxle2365479678::LiftingActive,
            0 => LiftingCtrlModeRearAxle2365479678::LiftingNotActive,
            value => LiftingCtrlModeRearAxle2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LiftingCtrlModeFrontAxle2365479678 {
    NotAvailable,
    Error,
    LiftingActive,
    LiftingNotActive,
    XValue(u64),
}

impl From<u64> for LiftingCtrlModeFrontAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LiftingCtrlModeFrontAxle2365479678::NotAvailable,
            2 => LiftingCtrlModeFrontAxle2365479678::Error,
            1 => LiftingCtrlModeFrontAxle2365479678::LiftingActive,
            0 => LiftingCtrlModeFrontAxle2365479678::LiftingNotActive,
            value => LiftingCtrlModeFrontAxle2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LoweringCtrlModeRearAxle2365479678 {
    NotAvailable,
    Error,
    LoweringActive,
    LoweringNotActive,
    XValue(u64),
}

impl From<u64> for LoweringCtrlModeRearAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LoweringCtrlModeRearAxle2365479678::NotAvailable,
            2 => LoweringCtrlModeRearAxle2365479678::Error,
            1 => LoweringCtrlModeRearAxle2365479678::LoweringActive,
            0 => LoweringCtrlModeRearAxle2365479678::LoweringNotActive,
            value => LoweringCtrlModeRearAxle2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LoweringCtrlModeFrontAxle2365479678 {
    NotAvailable,
    Error,
    LoweringActive,
    LoweringNotActive,
    XValue(u64),
}

impl From<u64> for LoweringCtrlModeFrontAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LoweringCtrlModeFrontAxle2365479678::NotAvailable,
            2 => LoweringCtrlModeFrontAxle2365479678::Error,
            1 => LoweringCtrlModeFrontAxle2365479678::LoweringActive,
            0 => LoweringCtrlModeFrontAxle2365479678::LoweringNotActive,
            value => LoweringCtrlModeFrontAxle2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AboveNominalLevelRearAxle2365479678 {
    NotAvailable,
    Error,
    Above,
    NotAbove,
    XValue(u64),
}

impl From<u64> for AboveNominalLevelRearAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AboveNominalLevelRearAxle2365479678::NotAvailable,
            2 => AboveNominalLevelRearAxle2365479678::Error,
            1 => AboveNominalLevelRearAxle2365479678::Above,
            0 => AboveNominalLevelRearAxle2365479678::NotAbove,
            value => AboveNominalLevelRearAxle2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AboveNominalLevelFrontAxle2365479678 {
    NotAvailable,
    Error,
    Above,
    NotAbove,
    XValue(u64),
}

impl From<u64> for AboveNominalLevelFrontAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AboveNominalLevelFrontAxle2365479678::NotAvailable,
            2 => AboveNominalLevelFrontAxle2365479678::Error,
            1 => AboveNominalLevelFrontAxle2365479678::Above,
            0 => AboveNominalLevelFrontAxle2365479678::NotAbove,
            value => AboveNominalLevelFrontAxle2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BelowNominalLevelRearAxle2365479678 {
    NotAvailable,
    Error,
    Below,
    NotBelow,
    XValue(u64),
}

impl From<u64> for BelowNominalLevelRearAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => BelowNominalLevelRearAxle2365479678::NotAvailable,
            2 => BelowNominalLevelRearAxle2365479678::Error,
            1 => BelowNominalLevelRearAxle2365479678::Below,
            0 => BelowNominalLevelRearAxle2365479678::NotBelow,
            value => BelowNominalLevelRearAxle2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum BelowNominalLevelFrontAxle2365479678 {
    NotAvailable,
    Error,
    Below,
    NotBelow,
    XValue(u64),
}

impl From<u64> for BelowNominalLevelFrontAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => BelowNominalLevelFrontAxle2365479678::NotAvailable,
            2 => BelowNominalLevelFrontAxle2365479678::Error,
            1 => BelowNominalLevelFrontAxle2365479678::Below,
            0 => BelowNominalLevelFrontAxle2365479678::NotBelow,
            value => BelowNominalLevelFrontAxle2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum NominalLevelRearAxle2365479678 {
    NotAvailable,
    Error,
    X1101notDefined,
    LowerLevel,
    UpperLevel,
    CustomerLevel,
    PresetLevel,
    NormalLevel3,
    NormalLevel2,
    NormalLevel1,
    LevelNotSpecified,
    XValue(u64),
}

impl From<u64> for NominalLevelRearAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => NominalLevelRearAxle2365479678::NotAvailable,
            14 => NominalLevelRearAxle2365479678::Error,
            8 => NominalLevelRearAxle2365479678::X1101notDefined,
            7 => NominalLevelRearAxle2365479678::LowerLevel,
            6 => NominalLevelRearAxle2365479678::UpperLevel,
            5 => NominalLevelRearAxle2365479678::CustomerLevel,
            4 => NominalLevelRearAxle2365479678::PresetLevel,
            3 => NominalLevelRearAxle2365479678::NormalLevel3,
            2 => NominalLevelRearAxle2365479678::NormalLevel2,
            1 => NominalLevelRearAxle2365479678::NormalLevel1,
            0 => NominalLevelRearAxle2365479678::LevelNotSpecified,
            value => NominalLevelRearAxle2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum NominalLevelFrontAxle2365479678 {
    NotAvailable,
    Error,
    X1101notDefined,
    LowerLevel,
    UpperLevel,
    CustomerLevel,
    PresetLevel,
    NormalLevel3,
    NormalLevel2,
    NormalLevel1,
    LevelNotSpecified,
    XValue(u64),
}

impl From<u64> for NominalLevelFrontAxle2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => NominalLevelFrontAxle2365479678::NotAvailable,
            14 => NominalLevelFrontAxle2365479678::Error,
            8 => NominalLevelFrontAxle2365479678::X1101notDefined,
            7 => NominalLevelFrontAxle2365479678::LowerLevel,
            6 => NominalLevelFrontAxle2365479678::UpperLevel,
            5 => NominalLevelFrontAxle2365479678::CustomerLevel,
            4 => NominalLevelFrontAxle2365479678::PresetLevel,
            3 => NominalLevelFrontAxle2365479678::NormalLevel3,
            2 => NominalLevelFrontAxle2365479678::NormalLevel2,
            1 => NominalLevelFrontAxle2365479678::NormalLevel1,
            0 => NominalLevelFrontAxle2365479678::LevelNotSpecified,
            value => NominalLevelFrontAxle2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LiftAxle2Pos2365479678 {
    NotAvailable,
    Error,
    LiftAxlePosUpTagAxleUnladen,
    LiftAxlePosDownTagAxleLaden,
    XValue(u64),
}

impl From<u64> for LiftAxle2Pos2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LiftAxle2Pos2365479678::NotAvailable,
            2 => LiftAxle2Pos2365479678::Error,
            1 => LiftAxle2Pos2365479678::LiftAxlePosUpTagAxleUnladen,
            0 => LiftAxle2Pos2365479678::LiftAxlePosDownTagAxleLaden,
            value => LiftAxle2Pos2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LiftAxle1Pos2365479678 {
    NotAvailable,
    Error,
    LiftAxlePosUpTagAxleUnladen,
    LiftAxlePosDownTagAxleLaden,
    XValue(u64),
}

impl From<u64> for LiftAxle1Pos2365479678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => LiftAxle1Pos2365479678::NotAvailable,
            2 => LiftAxle1Pos2365479678::Error,
            1 => LiftAxle1Pos2365479678::LiftAxlePosUpTagAxleUnladen,
            0 => LiftAxle1Pos2365479678::LiftAxlePosDownTagAxleLaden,
            value => LiftAxle1Pos2365479678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Alt4Status2566837758 {
    NotAvailable,
    Error,
    Alt4Charging,
    Alt4NotCharging,
    XValue(u64),
}

impl From<u64> for Alt4Status2566837758 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Alt4Status2566837758::NotAvailable,
            2 => Alt4Status2566837758::Error,
            1 => Alt4Status2566837758::Alt4Charging,
            0 => Alt4Status2566837758::Alt4NotCharging,
            value => Alt4Status2566837758::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Alt3Status2566837758 {
    NotAvailable,
    Error,
    Alt3Charging,
    Alt3NotCharging,
    XValue(u64),
}

impl From<u64> for Alt3Status2566837758 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Alt3Status2566837758::NotAvailable,
            2 => Alt3Status2566837758::Error,
            1 => Alt3Status2566837758::Alt3Charging,
            0 => Alt3Status2566837758::Alt3NotCharging,
            value => Alt3Status2566837758::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Alt2Status2566837758 {
    NotAvailable,
    Error,
    Alt2Charging,
    Alt2NotCharging,
    XValue(u64),
}

impl From<u64> for Alt2Status2566837758 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Alt2Status2566837758::NotAvailable,
            2 => Alt2Status2566837758::Error,
            1 => Alt2Status2566837758::Alt2Charging,
            0 => Alt2Status2566837758::Alt2NotCharging,
            value => Alt2Status2566837758::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Alt1Status2566837758 {
    NotAvailable,
    Error,
    Alt1Charging,
    Alt1NotCharging,
    XValue(u64),
}

impl From<u64> for Alt1Status2566837758 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Alt1Status2566837758::NotAvailable,
            2 => Alt1Status2566837758::Error,
            1 => Alt1Status2566837758::Alt1Charging,
            0 => Alt1Status2566837758::Alt1NotCharging,
            value => Alt1Status2566837758::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum IndustryGroup2633895166 {
    ReserveForSae,
    IndustrialProcessCtrlStationary,
    Marine,
    Construction,
    AgriculturalAndForestry,
    OnHighway,
    Global,
    XValue(u64),
}

impl From<u64> for IndustryGroup2633895166 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => IndustryGroup2633895166::ReserveForSae,
            5 => IndustryGroup2633895166::IndustrialProcessCtrlStationary,
            4 => IndustryGroup2633895166::Marine,
            3 => IndustryGroup2633895166::Construction,
            2 => IndustryGroup2633895166::AgriculturalAndForestry,
            1 => IndustryGroup2633895166::OnHighway,
            0 => IndustryGroup2633895166::Global,
            value => IndustryGroup2633895166::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier52566836222 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier52566836222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier52566836222::NotAvailable,
            19 => FailureModeIdentifier52566836222::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier52566836222::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier52566836222::BelowNormalLeastSevere,
            16 => FailureModeIdentifier52566836222::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier52566836222::AboveNormalLeastSevere,
            14 => FailureModeIdentifier52566836222::SpecialIntstructions,
            13 => FailureModeIdentifier52566836222::OutOfCalibration,
            12 => FailureModeIdentifier52566836222::BadIntelligentDevice,
            11 => FailureModeIdentifier52566836222::RootCauseNotKnown,
            10 => FailureModeIdentifier52566836222::AbnormalRateOfChange,
            9 => FailureModeIdentifier52566836222::AbnormalUpdateRate,
            8 => FailureModeIdentifier52566836222::AbnormalFrequency,
            7 => FailureModeIdentifier52566836222::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier52566836222::CurrentAboveNormal,
            5 => FailureModeIdentifier52566836222::CurrentBelowNormal,
            4 => FailureModeIdentifier52566836222::VoltageBelowNormal,
            3 => FailureModeIdentifier52566836222::VoltageAboveNormal,
            2 => FailureModeIdentifier52566836222::DataErratic,
            1 => FailureModeIdentifier52566836222::BelowNormalMostSevere,
            0 => FailureModeIdentifier52566836222::AboveNormalMostSevere,
            value => FailureModeIdentifier52566836222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier42566836222 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier42566836222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier42566836222::NotAvailable,
            19 => FailureModeIdentifier42566836222::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier42566836222::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier42566836222::BelowNormalLeastSevere,
            16 => FailureModeIdentifier42566836222::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier42566836222::AboveNormalLeastSevere,
            14 => FailureModeIdentifier42566836222::SpecialIntstructions,
            13 => FailureModeIdentifier42566836222::OutOfCalibration,
            12 => FailureModeIdentifier42566836222::BadIntelligentDevice,
            11 => FailureModeIdentifier42566836222::RootCauseNotKnown,
            10 => FailureModeIdentifier42566836222::AbnormalRateOfChange,
            9 => FailureModeIdentifier42566836222::AbnormalUpdateRate,
            8 => FailureModeIdentifier42566836222::AbnormalFrequency,
            7 => FailureModeIdentifier42566836222::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier42566836222::CurrentAboveNormal,
            5 => FailureModeIdentifier42566836222::CurrentBelowNormal,
            4 => FailureModeIdentifier42566836222::VoltageBelowNormal,
            3 => FailureModeIdentifier42566836222::VoltageAboveNormal,
            2 => FailureModeIdentifier42566836222::DataErratic,
            1 => FailureModeIdentifier42566836222::BelowNormalMostSevere,
            0 => FailureModeIdentifier42566836222::AboveNormalMostSevere,
            value => FailureModeIdentifier42566836222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashRedStopLamp2566836222 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashRedStopLamp2566836222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashRedStopLamp2566836222::UnavailableDoNotFlash,
            2 => FlashRedStopLamp2566836222::Reserved,
            1 => FlashRedStopLamp2566836222::FastFlash,
            0 => FlashRedStopLamp2566836222::SlowFlash,
            value => FlashRedStopLamp2566836222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashProtectLamp2566836222 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashProtectLamp2566836222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashProtectLamp2566836222::UnavailableDoNotFlash,
            2 => FlashProtectLamp2566836222::Reserved,
            1 => FlashProtectLamp2566836222::FastFlash,
            0 => FlashProtectLamp2566836222::SlowFlash,
            value => FlashProtectLamp2566836222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2566836222 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashMalfuncIndicatorLamp2566836222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashMalfuncIndicatorLamp2566836222::UnavailableDoNotFlash,
            2 => FlashMalfuncIndicatorLamp2566836222::Reserved,
            1 => FlashMalfuncIndicatorLamp2566836222::FastFlash,
            0 => FlashMalfuncIndicatorLamp2566836222::SlowFlash,
            value => FlashMalfuncIndicatorLamp2566836222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2566836222 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashAmberWarningLamp2566836222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashAmberWarningLamp2566836222::UnavailableDoNotFlash,
            2 => FlashAmberWarningLamp2566836222::Reserved,
            1 => FlashAmberWarningLamp2566836222::FastFlash,
            0 => FlashAmberWarningLamp2566836222::SlowFlash,
            value => FlashAmberWarningLamp2566836222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier32566836222 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier32566836222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier32566836222::NotAvailable,
            19 => FailureModeIdentifier32566836222::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier32566836222::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier32566836222::BelowNormalLeastSevere,
            16 => FailureModeIdentifier32566836222::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier32566836222::AboveNormalLeastSevere,
            14 => FailureModeIdentifier32566836222::SpecialIntstructions,
            13 => FailureModeIdentifier32566836222::OutOfCalibration,
            12 => FailureModeIdentifier32566836222::BadIntelligentDevice,
            11 => FailureModeIdentifier32566836222::RootCauseNotKnown,
            10 => FailureModeIdentifier32566836222::AbnormalRateOfChange,
            9 => FailureModeIdentifier32566836222::AbnormalUpdateRate,
            8 => FailureModeIdentifier32566836222::AbnormalFrequency,
            7 => FailureModeIdentifier32566836222::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier32566836222::CurrentAboveNormal,
            5 => FailureModeIdentifier32566836222::CurrentBelowNormal,
            4 => FailureModeIdentifier32566836222::VoltageBelowNormal,
            3 => FailureModeIdentifier32566836222::VoltageAboveNormal,
            2 => FailureModeIdentifier32566836222::DataErratic,
            1 => FailureModeIdentifier32566836222::BelowNormalMostSevere,
            0 => FailureModeIdentifier32566836222::AboveNormalMostSevere,
            value => FailureModeIdentifier32566836222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier22566836222 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier22566836222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier22566836222::NotAvailable,
            19 => FailureModeIdentifier22566836222::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier22566836222::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier22566836222::BelowNormalLeastSevere,
            16 => FailureModeIdentifier22566836222::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier22566836222::AboveNormalLeastSevere,
            14 => FailureModeIdentifier22566836222::SpecialIntstructions,
            13 => FailureModeIdentifier22566836222::OutOfCalibration,
            12 => FailureModeIdentifier22566836222::BadIntelligentDevice,
            11 => FailureModeIdentifier22566836222::RootCauseNotKnown,
            10 => FailureModeIdentifier22566836222::AbnormalRateOfChange,
            9 => FailureModeIdentifier22566836222::AbnormalUpdateRate,
            8 => FailureModeIdentifier22566836222::AbnormalFrequency,
            7 => FailureModeIdentifier22566836222::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier22566836222::CurrentAboveNormal,
            5 => FailureModeIdentifier22566836222::CurrentBelowNormal,
            4 => FailureModeIdentifier22566836222::VoltageBelowNormal,
            3 => FailureModeIdentifier22566836222::VoltageAboveNormal,
            2 => FailureModeIdentifier22566836222::DataErratic,
            1 => FailureModeIdentifier22566836222::BelowNormalMostSevere,
            0 => FailureModeIdentifier22566836222::AboveNormalMostSevere,
            value => FailureModeIdentifier22566836222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566836222 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier12566836222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier12566836222::NotAvailable,
            19 => FailureModeIdentifier12566836222::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier12566836222::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier12566836222::BelowNormalLeastSevere,
            16 => FailureModeIdentifier12566836222::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier12566836222::AboveNormalLeastSevere,
            14 => FailureModeIdentifier12566836222::SpecialIntstructions,
            13 => FailureModeIdentifier12566836222::OutOfCalibration,
            12 => FailureModeIdentifier12566836222::BadIntelligentDevice,
            11 => FailureModeIdentifier12566836222::RootCauseNotKnown,
            10 => FailureModeIdentifier12566836222::AbnormalRateOfChange,
            9 => FailureModeIdentifier12566836222::AbnormalUpdateRate,
            8 => FailureModeIdentifier12566836222::AbnormalFrequency,
            7 => FailureModeIdentifier12566836222::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier12566836222::CurrentAboveNormal,
            5 => FailureModeIdentifier12566836222::CurrentBelowNormal,
            4 => FailureModeIdentifier12566836222::VoltageBelowNormal,
            3 => FailureModeIdentifier12566836222::VoltageAboveNormal,
            2 => FailureModeIdentifier12566836222::DataErratic,
            1 => FailureModeIdentifier12566836222::BelowNormalMostSevere,
            0 => FailureModeIdentifier12566836222::AboveNormalMostSevere,
            value => FailureModeIdentifier12566836222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2566836222 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for MalfunctionIndicatorLampStatus2566836222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => MalfunctionIndicatorLampStatus2566836222::NotAvailable,
            2 => MalfunctionIndicatorLampStatus2566836222::Reserved,
            1 => MalfunctionIndicatorLampStatus2566836222::LampOn,
            0 => MalfunctionIndicatorLampStatus2566836222::LampOff,
            value => MalfunctionIndicatorLampStatus2566836222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RedStopLampState2566836222 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for RedStopLampState2566836222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RedStopLampState2566836222::NotAvailable,
            2 => RedStopLampState2566836222::Reserved,
            1 => RedStopLampState2566836222::LampOn,
            0 => RedStopLampState2566836222::LampOff,
            value => RedStopLampState2566836222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2566836222 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for AmberWarningLampStatus2566836222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AmberWarningLampStatus2566836222::NotAvailable,
            2 => AmberWarningLampStatus2566836222::Reserved,
            1 => AmberWarningLampStatus2566836222::LampOn,
            0 => AmberWarningLampStatus2566836222::LampOff,
            value => AmberWarningLampStatus2566836222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ProtectLampStatus2566836222 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for ProtectLampStatus2566836222 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ProtectLampStatus2566836222::NotAvailable,
            2 => ProtectLampStatus2566836222::Reserved,
            1 => ProtectLampStatus2566836222::LampOn,
            0 => ProtectLampStatus2566836222::LampOff,
            value => ProtectLampStatus2566836222::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MisfireMonitoringSupport2566835966 {
    NotAvailable,
    Reserved,
    TestSupported,
    TestNotSupported,
    XValue(u64),
}

impl From<u64> for MisfireMonitoringSupport2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => MisfireMonitoringSupport2566835966::NotAvailable,
            2 => MisfireMonitoringSupport2566835966::Reserved,
            1 => MisfireMonitoringSupport2566835966::TestSupported,
            0 => MisfireMonitoringSupport2566835966::TestNotSupported,
            value => MisfireMonitoringSupport2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ObdCompliance2566835966 {
    NotIntendedToMeetObdIiRequ,
    ObdI,
    ObdAndObdIi,
    ObdFederalEpa,
    ObdIiCaliforniaArb,
    ReserverForAssignmentBySae,
    XValue(u64),
}

impl From<u64> for ObdCompliance2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            5 => ObdCompliance2566835966::NotIntendedToMeetObdIiRequ,
            4 => ObdCompliance2566835966::ObdI,
            3 => ObdCompliance2566835966::ObdAndObdIi,
            2 => ObdCompliance2566835966::ObdFederalEpa,
            1 => ObdCompliance2566835966::ObdIiCaliforniaArb,
            0 => ObdCompliance2566835966::ReserverForAssignmentBySae,
            value => ObdCompliance2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SecondAirSystemMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(u64),
}

impl From<u64> for SecondAirSystemMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SecondAirSystemMonStatus2566835966::TestNotComplete,
            0 => SecondAirSystemMonStatus2566835966::TestComplete,
            value => SecondAirSystemMonStatus2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EvaporativeSystemMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(u64),
}

impl From<u64> for EvaporativeSystemMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EvaporativeSystemMonStatus2566835966::TestNotComplete,
            0 => EvaporativeSystemMonStatus2566835966::TestComplete,
            value => EvaporativeSystemMonStatus2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AcSystemRefrigerantMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(u64),
}

impl From<u64> for AcSystemRefrigerantMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => AcSystemRefrigerantMonStatus2566835966::TestNotComplete,
            0 => AcSystemRefrigerantMonStatus2566835966::TestComplete,
            value => AcSystemRefrigerantMonStatus2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OxygenSensorHeaterMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(u64),
}

impl From<u64> for OxygenSensorHeaterMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => OxygenSensorHeaterMonStatus2566835966::TestNotComplete,
            0 => OxygenSensorHeaterMonStatus2566835966::TestComplete,
            value => OxygenSensorHeaterMonStatus2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OxygenSensorMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(u64),
}

impl From<u64> for OxygenSensorMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => OxygenSensorMonStatus2566835966::TestNotComplete,
            0 => OxygenSensorMonStatus2566835966::TestComplete,
            value => OxygenSensorMonStatus2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EgrSystemMonitoringStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(u64),
}

impl From<u64> for EgrSystemMonitoringStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EgrSystemMonitoringStatus2566835966::TestNotComplete,
            0 => EgrSystemMonitoringStatus2566835966::TestComplete,
            value => EgrSystemMonitoringStatus2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CatalystMonStatus2566835966 {
    TestComplete,
    TestNotComplete,
    XValue(u64),
}

impl From<u64> for CatalystMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            0 => CatalystMonStatus2566835966::TestComplete,
            1 => CatalystMonStatus2566835966::TestNotComplete,
            value => CatalystMonStatus2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ColdStartAidSystemMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(u64),
}

impl From<u64> for ColdStartAidSystemMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => ColdStartAidSystemMonStatus2566835966::TestNotComplete,
            0 => ColdStartAidSystemMonStatus2566835966::TestComplete,
            value => ColdStartAidSystemMonStatus2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HeatedCatalystMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(u64),
}

impl From<u64> for HeatedCatalystMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => HeatedCatalystMonStatus2566835966::TestNotComplete,
            0 => HeatedCatalystMonStatus2566835966::TestComplete,
            value => HeatedCatalystMonStatus2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CatalystMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(u64),
}

impl From<u64> for CatalystMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => CatalystMonSupp2566835966::TestSupported,
            0 => CatalystMonSupp2566835966::TestNotSupported,
            value => CatalystMonSupp2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ColdStartAidSystemMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(u64),
}

impl From<u64> for ColdStartAidSystemMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => ColdStartAidSystemMonSupp2566835966::TestSupported,
            0 => ColdStartAidSystemMonSupp2566835966::TestNotSupported,
            value => ColdStartAidSystemMonSupp2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HeatedCatalystMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(u64),
}

impl From<u64> for HeatedCatalystMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => HeatedCatalystMonSupp2566835966::TestSupported,
            0 => HeatedCatalystMonSupp2566835966::TestNotSupported,
            value => HeatedCatalystMonSupp2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EvaporativeSystemMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(u64),
}

impl From<u64> for EvaporativeSystemMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EvaporativeSystemMonSupp2566835966::TestSupported,
            0 => EvaporativeSystemMonSupp2566835966::TestNotSupported,
            value => EvaporativeSystemMonSupp2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SecondAirSystemMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(u64),
}

impl From<u64> for SecondAirSystemMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SecondAirSystemMonSupp2566835966::TestSupported,
            0 => SecondAirSystemMonSupp2566835966::TestNotSupported,
            value => SecondAirSystemMonSupp2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AcSystemRefrigerantMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(u64),
}

impl From<u64> for AcSystemRefrigerantMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => AcSystemRefrigerantMonSupp2566835966::TestSupported,
            0 => AcSystemRefrigerantMonSupp2566835966::TestNotSupported,
            value => AcSystemRefrigerantMonSupp2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OxygenSensorMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(u64),
}

impl From<u64> for OxygenSensorMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => OxygenSensorMonSupp2566835966::TestSupported,
            0 => OxygenSensorMonSupp2566835966::TestNotSupported,
            value => OxygenSensorMonSupp2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum OxygenSensorHeaterMonSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(u64),
}

impl From<u64> for OxygenSensorHeaterMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => OxygenSensorHeaterMonSupp2566835966::TestSupported,
            0 => OxygenSensorHeaterMonSupp2566835966::TestNotSupported,
            value => OxygenSensorHeaterMonSupp2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EgrSystemMonitoringSupp2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(u64),
}

impl From<u64> for EgrSystemMonitoringSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => EgrSystemMonitoringSupp2566835966::TestSupported,
            0 => EgrSystemMonitoringSupp2566835966::TestNotSupported,
            value => EgrSystemMonitoringSupp2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MisfireMonitoringStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(u64),
}

impl From<u64> for MisfireMonitoringStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => MisfireMonitoringStatus2566835966::TestNotComplete,
            0 => MisfireMonitoringStatus2566835966::TestComplete,
            value => MisfireMonitoringStatus2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ComprehensiveCompMonStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(u64),
}

impl From<u64> for ComprehensiveCompMonStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => ComprehensiveCompMonStatus2566835966::TestNotComplete,
            0 => ComprehensiveCompMonStatus2566835966::TestComplete,
            value => ComprehensiveCompMonStatus2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FuelSystemMonitoringStatus2566835966 {
    TestNotComplete,
    TestComplete,
    XValue(u64),
}

impl From<u64> for FuelSystemMonitoringStatus2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => FuelSystemMonitoringStatus2566835966::TestNotComplete,
            0 => FuelSystemMonitoringStatus2566835966::TestComplete,
            value => FuelSystemMonitoringStatus2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ComprehensiveComponentMonSupp2566835966 {
    NotAvailable,
    Reserved,
    TestSupported,
    TestNotSupported,
    XValue(u64),
}

impl From<u64> for ComprehensiveComponentMonSupp2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ComprehensiveComponentMonSupp2566835966::NotAvailable,
            2 => ComprehensiveComponentMonSupp2566835966::Reserved,
            1 => ComprehensiveComponentMonSupp2566835966::TestSupported,
            0 => ComprehensiveComponentMonSupp2566835966::TestNotSupported,
            value => ComprehensiveComponentMonSupp2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FuelSystemMonitoringSupport2566835966 {
    TestSupported,
    TestNotSupported,
    XValue(u64),
}

impl From<u64> for FuelSystemMonitoringSupport2566835966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => FuelSystemMonitoringSupport2566835966::TestSupported,
            0 => FuelSystemMonitoringSupport2566835966::TestNotSupported,
            value => FuelSystemMonitoringSupport2566835966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566835710 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier12566835710 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier12566835710::NotAvailable,
            19 => FailureModeIdentifier12566835710::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier12566835710::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier12566835710::BelowNormalLeastSevere,
            16 => FailureModeIdentifier12566835710::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier12566835710::AboveNormalLeastSevere,
            14 => FailureModeIdentifier12566835710::SpecialIntstructions,
            13 => FailureModeIdentifier12566835710::OutOfCalibration,
            12 => FailureModeIdentifier12566835710::BadIntelligentDevice,
            11 => FailureModeIdentifier12566835710::RootCauseNotKnown,
            10 => FailureModeIdentifier12566835710::AbnormalRateOfChange,
            9 => FailureModeIdentifier12566835710::AbnormalUpdateRate,
            8 => FailureModeIdentifier12566835710::AbnormalFrequency,
            7 => FailureModeIdentifier12566835710::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier12566835710::CurrentAboveNormal,
            5 => FailureModeIdentifier12566835710::CurrentBelowNormal,
            4 => FailureModeIdentifier12566835710::VoltageBelowNormal,
            3 => FailureModeIdentifier12566835710::VoltageAboveNormal,
            2 => FailureModeIdentifier12566835710::DataErratic,
            1 => FailureModeIdentifier12566835710::BelowNormalMostSevere,
            0 => FailureModeIdentifier12566835710::AboveNormalMostSevere,
            value => FailureModeIdentifier12566835710::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EngTorqueMode2566835710 {
    NotAvailable,
    RemoteAccelerator,
    BrakingSystem,
    HighSpeedGovernor,
    TorqueLimiting,
    AbsControl,
    TransmissionControl,
    AsrControl,
    RoadSpeedGovernor,
    PtoGovernor,
    CruiseControl,
    AcceleratorPedalOperatorSelec,
    LowIdleGovernorNoRequestDe,
    XValue(u64),
}

impl From<u64> for EngTorqueMode2566835710 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => EngTorqueMode2566835710::NotAvailable,
            11 => EngTorqueMode2566835710::RemoteAccelerator,
            10 => EngTorqueMode2566835710::BrakingSystem,
            9 => EngTorqueMode2566835710::HighSpeedGovernor,
            8 => EngTorqueMode2566835710::TorqueLimiting,
            7 => EngTorqueMode2566835710::AbsControl,
            6 => EngTorqueMode2566835710::TransmissionControl,
            5 => EngTorqueMode2566835710::AsrControl,
            4 => EngTorqueMode2566835710::RoadSpeedGovernor,
            3 => EngTorqueMode2566835710::PtoGovernor,
            2 => EngTorqueMode2566835710::CruiseControl,
            1 => EngTorqueMode2566835710::AcceleratorPedalOperatorSelec,
            0 => EngTorqueMode2566835710::LowIdleGovernorNoRequestDe,
            value => EngTorqueMode2566835710::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566764542 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier12566764542 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier12566764542::NotAvailable,
            19 => FailureModeIdentifier12566764542::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier12566764542::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier12566764542::BelowNormalLeastSevere,
            16 => FailureModeIdentifier12566764542::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier12566764542::AboveNormalLeastSevere,
            14 => FailureModeIdentifier12566764542::SpecialIntstructions,
            13 => FailureModeIdentifier12566764542::OutOfCalibration,
            12 => FailureModeIdentifier12566764542::BadIntelligentDevice,
            11 => FailureModeIdentifier12566764542::RootCauseNotKnown,
            10 => FailureModeIdentifier12566764542::AbnormalRateOfChange,
            9 => FailureModeIdentifier12566764542::AbnormalUpdateRate,
            8 => FailureModeIdentifier12566764542::AbnormalFrequency,
            7 => FailureModeIdentifier12566764542::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier12566764542::CurrentAboveNormal,
            5 => FailureModeIdentifier12566764542::CurrentBelowNormal,
            4 => FailureModeIdentifier12566764542::VoltageBelowNormal,
            3 => FailureModeIdentifier12566764542::VoltageAboveNormal,
            2 => FailureModeIdentifier12566764542::DataErratic,
            1 => FailureModeIdentifier12566764542::BelowNormalMostSevere,
            0 => FailureModeIdentifier12566764542::AboveNormalMostSevere,
            value => FailureModeIdentifier12566764542::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SpnSupportTypeStr32566764286 {
    SupportedInScaledTestResults,
    NotSupportedInScaledTestResults,
    XValue(u64),
}

impl From<u64> for SpnSupportTypeStr32566764286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SpnSupportTypeStr32566764286::SupportedInScaledTestResults,
            0 => SpnSupportTypeStr32566764286::NotSupportedInScaledTestResults,
            value => SpnSupportTypeStr32566764286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SpnSupportTypeStr22566764286 {
    SupportedInScaledTestResults,
    NotSupportedInScaledTestResults,
    XValue(u64),
}

impl From<u64> for SpnSupportTypeStr22566764286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SpnSupportTypeStr22566764286::SupportedInScaledTestResults,
            0 => SpnSupportTypeStr22566764286::NotSupportedInScaledTestResults,
            value => SpnSupportTypeStr22566764286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SpnSupportTypeEff32566764286 {
    SupportedInExFreezeFrame,
    NotSupportedInExFreezeFrame,
    XValue(u64),
}

impl From<u64> for SpnSupportTypeEff32566764286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SpnSupportTypeEff32566764286::SupportedInExFreezeFrame,
            0 => SpnSupportTypeEff32566764286::NotSupportedInExFreezeFrame,
            value => SpnSupportTypeEff32566764286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SpnSupportTypeEff22566764286 {
    SupportedInExFreezeFrame,
    NotSupportedInExFreezeFrame,
    XValue(u64),
}

impl From<u64> for SpnSupportTypeEff22566764286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SpnSupportTypeEff22566764286::SupportedInExFreezeFrame,
            0 => SpnSupportTypeEff22566764286::NotSupportedInExFreezeFrame,
            value => SpnSupportTypeEff22566764286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SpnSupportTypeDs32566764286 {
    SupportedInDataStream,
    NotSupportedInDataStream,
    XValue(u64),
}

impl From<u64> for SpnSupportTypeDs32566764286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SpnSupportTypeDs32566764286::SupportedInDataStream,
            0 => SpnSupportTypeDs32566764286::NotSupportedInDataStream,
            value => SpnSupportTypeDs32566764286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SpnSupportTypeDs22566764286 {
    SupportedInDataStream,
    NotSupportedInDataStream,
    XValue(u64),
}

impl From<u64> for SpnSupportTypeDs22566764286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SpnSupportTypeDs22566764286::SupportedInDataStream,
            0 => SpnSupportTypeDs22566764286::NotSupportedInDataStream,
            value => SpnSupportTypeDs22566764286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SpnSupportTypeStr12566764286 {
    SupportedInScaledTestResults,
    NotSupportedInScaledTestResults,
    XValue(u64),
}

impl From<u64> for SpnSupportTypeStr12566764286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SpnSupportTypeStr12566764286::SupportedInScaledTestResults,
            0 => SpnSupportTypeStr12566764286::NotSupportedInScaledTestResults,
            value => SpnSupportTypeStr12566764286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SpnSupportTypeDs12566764286 {
    SupportedInDataStream,
    NotSupportedInDataStream,
    XValue(u64),
}

impl From<u64> for SpnSupportTypeDs12566764286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SpnSupportTypeDs12566764286::SupportedInDataStream,
            0 => SpnSupportTypeDs12566764286::NotSupportedInDataStream,
            value => SpnSupportTypeDs12566764286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SpnSupportTypeEff12566764286 {
    SupportedInExFreezeFrame,
    NotSupportedInExFreezeFrame,
    XValue(u64),
}

impl From<u64> for SpnSupportTypeEff12566764286 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => SpnSupportTypeEff12566764286::SupportedInExFreezeFrame,
            0 => SpnSupportTypeEff12566764286::NotSupportedInExFreezeFrame,
            value => SpnSupportTypeEff12566764286::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashRedStopLamp2555576062 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashRedStopLamp2555576062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashRedStopLamp2555576062::UnavailableDoNotFlash,
            2 => FlashRedStopLamp2555576062::Reserved,
            1 => FlashRedStopLamp2555576062::FastFlash,
            0 => FlashRedStopLamp2555576062::SlowFlash,
            value => FlashRedStopLamp2555576062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashProtectLamp2555576062 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashProtectLamp2555576062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashProtectLamp2555576062::UnavailableDoNotFlash,
            2 => FlashProtectLamp2555576062::Reserved,
            1 => FlashProtectLamp2555576062::FastFlash,
            0 => FlashProtectLamp2555576062::SlowFlash,
            value => FlashProtectLamp2555576062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2555576062 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashMalfuncIndicatorLamp2555576062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashMalfuncIndicatorLamp2555576062::UnavailableDoNotFlash,
            2 => FlashMalfuncIndicatorLamp2555576062::Reserved,
            1 => FlashMalfuncIndicatorLamp2555576062::FastFlash,
            0 => FlashMalfuncIndicatorLamp2555576062::SlowFlash,
            value => FlashMalfuncIndicatorLamp2555576062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2555576062 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashAmberWarningLamp2555576062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashAmberWarningLamp2555576062::UnavailableDoNotFlash,
            2 => FlashAmberWarningLamp2555576062::Reserved,
            1 => FlashAmberWarningLamp2555576062::FastFlash,
            0 => FlashAmberWarningLamp2555576062::SlowFlash,
            value => FlashAmberWarningLamp2555576062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier52555576062 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier52555576062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier52555576062::NotAvailable,
            19 => FailureModeIdentifier52555576062::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier52555576062::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier52555576062::BelowNormalLeastSevere,
            16 => FailureModeIdentifier52555576062::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier52555576062::AboveNormalLeastSevere,
            14 => FailureModeIdentifier52555576062::SpecialIntstructions,
            13 => FailureModeIdentifier52555576062::OutOfCalibration,
            12 => FailureModeIdentifier52555576062::BadIntelligentDevice,
            11 => FailureModeIdentifier52555576062::RootCauseNotKnown,
            10 => FailureModeIdentifier52555576062::AbnormalRateOfChange,
            9 => FailureModeIdentifier52555576062::AbnormalUpdateRate,
            8 => FailureModeIdentifier52555576062::AbnormalFrequency,
            7 => FailureModeIdentifier52555576062::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier52555576062::CurrentAboveNormal,
            5 => FailureModeIdentifier52555576062::CurrentBelowNormal,
            4 => FailureModeIdentifier52555576062::VoltageBelowNormal,
            3 => FailureModeIdentifier52555576062::VoltageAboveNormal,
            2 => FailureModeIdentifier52555576062::DataErratic,
            1 => FailureModeIdentifier52555576062::BelowNormalMostSevere,
            0 => FailureModeIdentifier52555576062::AboveNormalMostSevere,
            value => FailureModeIdentifier52555576062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier42555576062 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier42555576062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier42555576062::NotAvailable,
            19 => FailureModeIdentifier42555576062::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier42555576062::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier42555576062::BelowNormalLeastSevere,
            16 => FailureModeIdentifier42555576062::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier42555576062::AboveNormalLeastSevere,
            14 => FailureModeIdentifier42555576062::SpecialIntstructions,
            13 => FailureModeIdentifier42555576062::OutOfCalibration,
            12 => FailureModeIdentifier42555576062::BadIntelligentDevice,
            11 => FailureModeIdentifier42555576062::RootCauseNotKnown,
            10 => FailureModeIdentifier42555576062::AbnormalRateOfChange,
            9 => FailureModeIdentifier42555576062::AbnormalUpdateRate,
            8 => FailureModeIdentifier42555576062::AbnormalFrequency,
            7 => FailureModeIdentifier42555576062::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier42555576062::CurrentAboveNormal,
            5 => FailureModeIdentifier42555576062::CurrentBelowNormal,
            4 => FailureModeIdentifier42555576062::VoltageBelowNormal,
            3 => FailureModeIdentifier42555576062::VoltageAboveNormal,
            2 => FailureModeIdentifier42555576062::DataErratic,
            1 => FailureModeIdentifier42555576062::BelowNormalMostSevere,
            0 => FailureModeIdentifier42555576062::AboveNormalMostSevere,
            value => FailureModeIdentifier42555576062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier12555576062 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier12555576062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier12555576062::NotAvailable,
            19 => FailureModeIdentifier12555576062::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier12555576062::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier12555576062::BelowNormalLeastSevere,
            16 => FailureModeIdentifier12555576062::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier12555576062::AboveNormalLeastSevere,
            14 => FailureModeIdentifier12555576062::SpecialIntstructions,
            13 => FailureModeIdentifier12555576062::OutOfCalibration,
            12 => FailureModeIdentifier12555576062::BadIntelligentDevice,
            11 => FailureModeIdentifier12555576062::RootCauseNotKnown,
            10 => FailureModeIdentifier12555576062::AbnormalRateOfChange,
            9 => FailureModeIdentifier12555576062::AbnormalUpdateRate,
            8 => FailureModeIdentifier12555576062::AbnormalFrequency,
            7 => FailureModeIdentifier12555576062::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier12555576062::CurrentAboveNormal,
            5 => FailureModeIdentifier12555576062::CurrentBelowNormal,
            4 => FailureModeIdentifier12555576062::VoltageBelowNormal,
            3 => FailureModeIdentifier12555576062::VoltageAboveNormal,
            2 => FailureModeIdentifier12555576062::DataErratic,
            1 => FailureModeIdentifier12555576062::BelowNormalMostSevere,
            0 => FailureModeIdentifier12555576062::AboveNormalMostSevere,
            value => FailureModeIdentifier12555576062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2555576062 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for MalfunctionIndicatorLampStatus2555576062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => MalfunctionIndicatorLampStatus2555576062::NotAvailable,
            2 => MalfunctionIndicatorLampStatus2555576062::Reserved,
            1 => MalfunctionIndicatorLampStatus2555576062::LampOn,
            0 => MalfunctionIndicatorLampStatus2555576062::LampOff,
            value => MalfunctionIndicatorLampStatus2555576062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RedStopLampState2555576062 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for RedStopLampState2555576062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RedStopLampState2555576062::NotAvailable,
            2 => RedStopLampState2555576062::Reserved,
            1 => RedStopLampState2555576062::LampOn,
            0 => RedStopLampState2555576062::LampOff,
            value => RedStopLampState2555576062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2555576062 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for AmberWarningLampStatus2555576062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AmberWarningLampStatus2555576062::NotAvailable,
            2 => AmberWarningLampStatus2555576062::Reserved,
            1 => AmberWarningLampStatus2555576062::LampOn,
            0 => AmberWarningLampStatus2555576062::LampOff,
            value => AmberWarningLampStatus2555576062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ProtectLampStatus2555576062 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for ProtectLampStatus2555576062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ProtectLampStatus2555576062::NotAvailable,
            2 => ProtectLampStatus2555576062::Reserved,
            1 => ProtectLampStatus2555576062::LampOn,
            0 => ProtectLampStatus2555576062::LampOff,
            value => ProtectLampStatus2555576062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier32555576062 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier32555576062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier32555576062::NotAvailable,
            19 => FailureModeIdentifier32555576062::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier32555576062::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier32555576062::BelowNormalLeastSevere,
            16 => FailureModeIdentifier32555576062::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier32555576062::AboveNormalLeastSevere,
            14 => FailureModeIdentifier32555576062::SpecialIntstructions,
            13 => FailureModeIdentifier32555576062::OutOfCalibration,
            12 => FailureModeIdentifier32555576062::BadIntelligentDevice,
            11 => FailureModeIdentifier32555576062::RootCauseNotKnown,
            10 => FailureModeIdentifier32555576062::AbnormalRateOfChange,
            9 => FailureModeIdentifier32555576062::AbnormalUpdateRate,
            8 => FailureModeIdentifier32555576062::AbnormalFrequency,
            7 => FailureModeIdentifier32555576062::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier32555576062::CurrentAboveNormal,
            5 => FailureModeIdentifier32555576062::CurrentBelowNormal,
            4 => FailureModeIdentifier32555576062::VoltageBelowNormal,
            3 => FailureModeIdentifier32555576062::VoltageAboveNormal,
            2 => FailureModeIdentifier32555576062::DataErratic,
            1 => FailureModeIdentifier32555576062::BelowNormalMostSevere,
            0 => FailureModeIdentifier32555576062::AboveNormalMostSevere,
            value => FailureModeIdentifier32555576062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier22555576062 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier22555576062 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier22555576062::NotAvailable,
            19 => FailureModeIdentifier22555576062::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier22555576062::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier22555576062::BelowNormalLeastSevere,
            16 => FailureModeIdentifier22555576062::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier22555576062::AboveNormalLeastSevere,
            14 => FailureModeIdentifier22555576062::SpecialIntstructions,
            13 => FailureModeIdentifier22555576062::OutOfCalibration,
            12 => FailureModeIdentifier22555576062::BadIntelligentDevice,
            11 => FailureModeIdentifier22555576062::RootCauseNotKnown,
            10 => FailureModeIdentifier22555576062::AbnormalRateOfChange,
            9 => FailureModeIdentifier22555576062::AbnormalUpdateRate,
            8 => FailureModeIdentifier22555576062::AbnormalFrequency,
            7 => FailureModeIdentifier22555576062::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier22555576062::CurrentAboveNormal,
            5 => FailureModeIdentifier22555576062::CurrentBelowNormal,
            4 => FailureModeIdentifier22555576062::VoltageBelowNormal,
            3 => FailureModeIdentifier22555576062::VoltageAboveNormal,
            2 => FailureModeIdentifier22555576062::DataErratic,
            1 => FailureModeIdentifier22555576062::BelowNormalMostSevere,
            0 => FailureModeIdentifier22555576062::AboveNormalMostSevere,
            value => FailureModeIdentifier22555576062::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier12562981630 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier12562981630 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier12562981630::NotAvailable,
            19 => FailureModeIdentifier12562981630::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier12562981630::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier12562981630::BelowNormalLeastSevere,
            16 => FailureModeIdentifier12562981630::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier12562981630::AboveNormalLeastSevere,
            14 => FailureModeIdentifier12562981630::SpecialIntstructions,
            13 => FailureModeIdentifier12562981630::OutOfCalibration,
            12 => FailureModeIdentifier12562981630::BadIntelligentDevice,
            11 => FailureModeIdentifier12562981630::RootCauseNotKnown,
            10 => FailureModeIdentifier12562981630::AbnormalRateOfChange,
            9 => FailureModeIdentifier12562981630::AbnormalUpdateRate,
            8 => FailureModeIdentifier12562981630::AbnormalFrequency,
            7 => FailureModeIdentifier12562981630::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier12562981630::CurrentAboveNormal,
            5 => FailureModeIdentifier12562981630::CurrentBelowNormal,
            4 => FailureModeIdentifier12562981630::VoltageBelowNormal,
            3 => FailureModeIdentifier12562981630::VoltageAboveNormal,
            2 => FailureModeIdentifier12562981630::DataErratic,
            1 => FailureModeIdentifier12562981630::BelowNormalMostSevere,
            0 => FailureModeIdentifier12562981630::AboveNormalMostSevere,
            value => FailureModeIdentifier12562981630::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier52566835198 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier52566835198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier52566835198::NotAvailable,
            19 => FailureModeIdentifier52566835198::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier52566835198::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier52566835198::BelowNormalLeastSevere,
            16 => FailureModeIdentifier52566835198::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier52566835198::AboveNormalLeastSevere,
            14 => FailureModeIdentifier52566835198::SpecialIntstructions,
            13 => FailureModeIdentifier52566835198::OutOfCalibration,
            12 => FailureModeIdentifier52566835198::BadIntelligentDevice,
            11 => FailureModeIdentifier52566835198::RootCauseNotKnown,
            10 => FailureModeIdentifier52566835198::AbnormalRateOfChange,
            9 => FailureModeIdentifier52566835198::AbnormalUpdateRate,
            8 => FailureModeIdentifier52566835198::AbnormalFrequency,
            7 => FailureModeIdentifier52566835198::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier52566835198::CurrentAboveNormal,
            5 => FailureModeIdentifier52566835198::CurrentBelowNormal,
            4 => FailureModeIdentifier52566835198::VoltageBelowNormal,
            3 => FailureModeIdentifier52566835198::VoltageAboveNormal,
            2 => FailureModeIdentifier52566835198::DataErratic,
            1 => FailureModeIdentifier52566835198::BelowNormalMostSevere,
            0 => FailureModeIdentifier52566835198::AboveNormalMostSevere,
            value => FailureModeIdentifier52566835198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier42566835198 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier42566835198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier42566835198::NotAvailable,
            19 => FailureModeIdentifier42566835198::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier42566835198::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier42566835198::BelowNormalLeastSevere,
            16 => FailureModeIdentifier42566835198::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier42566835198::AboveNormalLeastSevere,
            14 => FailureModeIdentifier42566835198::SpecialIntstructions,
            13 => FailureModeIdentifier42566835198::OutOfCalibration,
            12 => FailureModeIdentifier42566835198::BadIntelligentDevice,
            11 => FailureModeIdentifier42566835198::RootCauseNotKnown,
            10 => FailureModeIdentifier42566835198::AbnormalRateOfChange,
            9 => FailureModeIdentifier42566835198::AbnormalUpdateRate,
            8 => FailureModeIdentifier42566835198::AbnormalFrequency,
            7 => FailureModeIdentifier42566835198::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier42566835198::CurrentAboveNormal,
            5 => FailureModeIdentifier42566835198::CurrentBelowNormal,
            4 => FailureModeIdentifier42566835198::VoltageBelowNormal,
            3 => FailureModeIdentifier42566835198::VoltageAboveNormal,
            2 => FailureModeIdentifier42566835198::DataErratic,
            1 => FailureModeIdentifier42566835198::BelowNormalMostSevere,
            0 => FailureModeIdentifier42566835198::AboveNormalMostSevere,
            value => FailureModeIdentifier42566835198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566835198 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier12566835198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier12566835198::NotAvailable,
            19 => FailureModeIdentifier12566835198::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier12566835198::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier12566835198::BelowNormalLeastSevere,
            16 => FailureModeIdentifier12566835198::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier12566835198::AboveNormalLeastSevere,
            14 => FailureModeIdentifier12566835198::SpecialIntstructions,
            13 => FailureModeIdentifier12566835198::OutOfCalibration,
            12 => FailureModeIdentifier12566835198::BadIntelligentDevice,
            11 => FailureModeIdentifier12566835198::RootCauseNotKnown,
            10 => FailureModeIdentifier12566835198::AbnormalRateOfChange,
            9 => FailureModeIdentifier12566835198::AbnormalUpdateRate,
            8 => FailureModeIdentifier12566835198::AbnormalFrequency,
            7 => FailureModeIdentifier12566835198::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier12566835198::CurrentAboveNormal,
            5 => FailureModeIdentifier12566835198::CurrentBelowNormal,
            4 => FailureModeIdentifier12566835198::VoltageBelowNormal,
            3 => FailureModeIdentifier12566835198::VoltageAboveNormal,
            2 => FailureModeIdentifier12566835198::DataErratic,
            1 => FailureModeIdentifier12566835198::BelowNormalMostSevere,
            0 => FailureModeIdentifier12566835198::AboveNormalMostSevere,
            value => FailureModeIdentifier12566835198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2566835198 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for MalfunctionIndicatorLampStatus2566835198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => MalfunctionIndicatorLampStatus2566835198::NotAvailable,
            2 => MalfunctionIndicatorLampStatus2566835198::Reserved,
            1 => MalfunctionIndicatorLampStatus2566835198::LampOn,
            0 => MalfunctionIndicatorLampStatus2566835198::LampOff,
            value => MalfunctionIndicatorLampStatus2566835198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RedStopLampState2566835198 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for RedStopLampState2566835198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RedStopLampState2566835198::NotAvailable,
            2 => RedStopLampState2566835198::Reserved,
            1 => RedStopLampState2566835198::LampOn,
            0 => RedStopLampState2566835198::LampOff,
            value => RedStopLampState2566835198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2566835198 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for AmberWarningLampStatus2566835198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AmberWarningLampStatus2566835198::NotAvailable,
            2 => AmberWarningLampStatus2566835198::Reserved,
            1 => AmberWarningLampStatus2566835198::LampOn,
            0 => AmberWarningLampStatus2566835198::LampOff,
            value => AmberWarningLampStatus2566835198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ProtectLampStatus2566835198 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for ProtectLampStatus2566835198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ProtectLampStatus2566835198::NotAvailable,
            2 => ProtectLampStatus2566835198::Reserved,
            1 => ProtectLampStatus2566835198::LampOn,
            0 => ProtectLampStatus2566835198::LampOff,
            value => ProtectLampStatus2566835198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier32566835198 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier32566835198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier32566835198::NotAvailable,
            19 => FailureModeIdentifier32566835198::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier32566835198::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier32566835198::BelowNormalLeastSevere,
            16 => FailureModeIdentifier32566835198::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier32566835198::AboveNormalLeastSevere,
            14 => FailureModeIdentifier32566835198::SpecialIntstructions,
            13 => FailureModeIdentifier32566835198::OutOfCalibration,
            12 => FailureModeIdentifier32566835198::BadIntelligentDevice,
            11 => FailureModeIdentifier32566835198::RootCauseNotKnown,
            10 => FailureModeIdentifier32566835198::AbnormalRateOfChange,
            9 => FailureModeIdentifier32566835198::AbnormalUpdateRate,
            8 => FailureModeIdentifier32566835198::AbnormalFrequency,
            7 => FailureModeIdentifier32566835198::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier32566835198::CurrentAboveNormal,
            5 => FailureModeIdentifier32566835198::CurrentBelowNormal,
            4 => FailureModeIdentifier32566835198::VoltageBelowNormal,
            3 => FailureModeIdentifier32566835198::VoltageAboveNormal,
            2 => FailureModeIdentifier32566835198::DataErratic,
            1 => FailureModeIdentifier32566835198::BelowNormalMostSevere,
            0 => FailureModeIdentifier32566835198::AboveNormalMostSevere,
            value => FailureModeIdentifier32566835198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashRedStopLamp2566835198 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashRedStopLamp2566835198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashRedStopLamp2566835198::UnavailableDoNotFlash,
            2 => FlashRedStopLamp2566835198::Reserved,
            1 => FlashRedStopLamp2566835198::FastFlash,
            0 => FlashRedStopLamp2566835198::SlowFlash,
            value => FlashRedStopLamp2566835198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashProtectLamp2566835198 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashProtectLamp2566835198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashProtectLamp2566835198::UnavailableDoNotFlash,
            2 => FlashProtectLamp2566835198::Reserved,
            1 => FlashProtectLamp2566835198::FastFlash,
            0 => FlashProtectLamp2566835198::SlowFlash,
            value => FlashProtectLamp2566835198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2566835198 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashMalfuncIndicatorLamp2566835198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashMalfuncIndicatorLamp2566835198::UnavailableDoNotFlash,
            2 => FlashMalfuncIndicatorLamp2566835198::Reserved,
            1 => FlashMalfuncIndicatorLamp2566835198::FastFlash,
            0 => FlashMalfuncIndicatorLamp2566835198::SlowFlash,
            value => FlashMalfuncIndicatorLamp2566835198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2566835198 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashAmberWarningLamp2566835198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashAmberWarningLamp2566835198::UnavailableDoNotFlash,
            2 => FlashAmberWarningLamp2566835198::Reserved,
            1 => FlashAmberWarningLamp2566835198::FastFlash,
            0 => FlashAmberWarningLamp2566835198::SlowFlash,
            value => FlashAmberWarningLamp2566835198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier22566835198 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier22566835198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier22566835198::NotAvailable,
            19 => FailureModeIdentifier22566835198::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier22566835198::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier22566835198::BelowNormalLeastSevere,
            16 => FailureModeIdentifier22566835198::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier22566835198::AboveNormalLeastSevere,
            14 => FailureModeIdentifier22566835198::SpecialIntstructions,
            13 => FailureModeIdentifier22566835198::OutOfCalibration,
            12 => FailureModeIdentifier22566835198::BadIntelligentDevice,
            11 => FailureModeIdentifier22566835198::RootCauseNotKnown,
            10 => FailureModeIdentifier22566835198::AbnormalRateOfChange,
            9 => FailureModeIdentifier22566835198::AbnormalUpdateRate,
            8 => FailureModeIdentifier22566835198::AbnormalFrequency,
            7 => FailureModeIdentifier22566835198::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier22566835198::CurrentAboveNormal,
            5 => FailureModeIdentifier22566835198::CurrentBelowNormal,
            4 => FailureModeIdentifier22566835198::VoltageBelowNormal,
            3 => FailureModeIdentifier22566835198::VoltageAboveNormal,
            2 => FailureModeIdentifier22566835198::DataErratic,
            1 => FailureModeIdentifier22566835198::BelowNormalMostSevere,
            0 => FailureModeIdentifier22566835198::AboveNormalMostSevere,
            value => FailureModeIdentifier22566835198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Seed2564357886 {
    NoFurtherKeyRequiredOfTool,
    UseLongSeedOrKeyFromDataSecMsg,
    SeedCompletedBeginSendingKey,
    XValue(u64),
}

impl From<u64> for Seed2564357886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            255 => Seed2564357886::NoFurtherKeyRequiredOfTool,
            1 => Seed2564357886::UseLongSeedOrKeyFromDataSecMsg,
            0 => Seed2564357886::SeedCompletedBeginSendingKey,
            value => Seed2564357886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum EdcpExtension2564357886 {
    DataInErrIndAndDataInSeedIsTime,
    DataInErrorIndicator,
    ConcatenateDataAsLowerEdcParam,
    ConcatenateDataAsHigherEdcParam,
    Completed,
    NoErrIndicatorEdcParamAvailable,
    XValue(u64),
}

impl From<u64> for EdcpExtension2564357886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            9 => EdcpExtension2564357886::DataInErrIndAndDataInSeedIsTime,
            6 => EdcpExtension2564357886::DataInErrorIndicator,
            3 => EdcpExtension2564357886::ConcatenateDataAsLowerEdcParam,
            2 => EdcpExtension2564357886::ConcatenateDataAsHigherEdcParam,
            0 => EdcpExtension2564357886::Completed,
            255 => EdcpExtension2564357886::NoErrIndicatorEdcParamAvailable,
            value => EdcpExtension2564357886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ErrorIndicator2564357886 {
    NoErrorIndicatorAvailable,
    TransprtNotComplWithinTimeAllowd,
    TransportNotInitWithinTimeAllowd,
    NoResponseInTheTimeAllowed,
    ModuleExceedingNumberOfRetries,
    AbortFromExtToNormalSoftwareProc,
    VehicleNotInParkOrNotStationary,
    EngineRunning,
    NotInEngineeringOrDevelopmentMode,
    NotInDiagnosticMode,
    InvalidKey,
    InvalidUserLevel,
    InvalidPassword,
    SecurityErrorGeneral,
    NameDoesNotConformToExpectdValue,
    DataDoesNotConformToValueRanges,
    AddrForBootLoadExeInvalidBoundary,
    AddrForBootLoadExeOutsideExeMem,
    OpReqExeTransfAndEraseOfProgMem,
    OpRequiresPriorEraseOfProgramMem,
    OpRequiresPriorEraseOfDataMem,
    ReqMemoryExceededAvailableMemory,
    LengthNotValidForMemStructAndOp,
    AddressNotOnValidBoundary,
    AddressingOrDataGeneralError,
    InternalFailurePreventingReq,
    PromDidNotVerifyOnWrite,
    FlashDidNotVerifyOnWrite,
    RamDidNotVerifyOnWrite,
    EdcParaNotCorrectForDataStream,
    ProcessUnspecReqFromThisAddress,
    ProcessingEdcpGenerationReq,
    ProcessingBootLoadReq,
    ProcessingStatusReq,
    ProcessingWriteReq,
    ProcessingReadReq,
    ProcessingEraseReq,
    ProcessingForSomeoneElse,
    ErrorNotIdentified,
    NoError,
    XValue(u64),
}

impl From<u64> for ErrorIndicator2564357886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            16777215 => ErrorIndicator2564357886::NoErrorIndicatorAvailable,
            65540 => ErrorIndicator2564357886::TransprtNotComplWithinTimeAllowd,
            65539 => ErrorIndicator2564357886::TransportNotInitWithinTimeAllowd,
            65538 => ErrorIndicator2564357886::NoResponseInTheTimeAllowed,
            65537 => ErrorIndicator2564357886::ModuleExceedingNumberOfRetries,
            65536 => ErrorIndicator2564357886::AbortFromExtToNormalSoftwareProc,
            4103 => ErrorIndicator2564357886::VehicleNotInParkOrNotStationary,
            4102 => ErrorIndicator2564357886::EngineRunning,
            4101 => ErrorIndicator2564357886::NotInEngineeringOrDevelopmentMode,
            4100 => ErrorIndicator2564357886::NotInDiagnosticMode,
            4099 => ErrorIndicator2564357886::InvalidKey,
            4098 => ErrorIndicator2564357886::InvalidUserLevel,
            4097 => ErrorIndicator2564357886::InvalidPassword,
            4096 => ErrorIndicator2564357886::SecurityErrorGeneral,
            266 => ErrorIndicator2564357886::NameDoesNotConformToExpectdValue,
            265 => ErrorIndicator2564357886::DataDoesNotConformToValueRanges,
            264 => ErrorIndicator2564357886::AddrForBootLoadExeInvalidBoundary,
            263 => ErrorIndicator2564357886::AddrForBootLoadExeOutsideExeMem,
            262 => ErrorIndicator2564357886::OpReqExeTransfAndEraseOfProgMem,
            261 => ErrorIndicator2564357886::OpRequiresPriorEraseOfProgramMem,
            260 => ErrorIndicator2564357886::OpRequiresPriorEraseOfDataMem,
            259 => ErrorIndicator2564357886::ReqMemoryExceededAvailableMemory,
            258 => ErrorIndicator2564357886::LengthNotValidForMemStructAndOp,
            257 => ErrorIndicator2564357886::AddressNotOnValidBoundary,
            256 => ErrorIndicator2564357886::AddressingOrDataGeneralError,
            36 => ErrorIndicator2564357886::InternalFailurePreventingReq,
            35 => ErrorIndicator2564357886::PromDidNotVerifyOnWrite,
            34 => ErrorIndicator2564357886::FlashDidNotVerifyOnWrite,
            33 => ErrorIndicator2564357886::RamDidNotVerifyOnWrite,
            32 => ErrorIndicator2564357886::EdcParaNotCorrectForDataStream,
            31 => ErrorIndicator2564357886::ProcessUnspecReqFromThisAddress,
            23 => ErrorIndicator2564357886::ProcessingEdcpGenerationReq,
            22 => ErrorIndicator2564357886::ProcessingBootLoadReq,
            19 => ErrorIndicator2564357886::ProcessingStatusReq,
            18 => ErrorIndicator2564357886::ProcessingWriteReq,
            17 => ErrorIndicator2564357886::ProcessingReadReq,
            16 => ErrorIndicator2564357886::ProcessingEraseReq,
            2 => ErrorIndicator2564357886::ProcessingForSomeoneElse,
            1 => ErrorIndicator2564357886::ErrorNotIdentified,
            0 => ErrorIndicator2564357886::NoError,
            value => ErrorIndicator2564357886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Status2564357886 {
    Reserved,
    Reserved,
    OperationFailed,
    OperationCompleted,
    Reserved,
    Reserved,
    Busy,
    Proceed,
    XValue(u64),
}

impl From<u64> for Status2564357886 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => Status2564357886::Reserved,
            6 => Status2564357886::Reserved,
            5 => Status2564357886::OperationFailed,
            4 => Status2564357886::OperationCompleted,
            3 => Status2564357886::Reserved,
            2 => Status2564357886::Reserved,
            1 => Status2564357886::Busy,
            0 => Status2564357886::Proceed,
            value => Status2564357886::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum KeyOrUserLevel2564423422 {
    NoKeyAvailable,
    UseLongSeedOrKey,
    XValue(u64),
}

impl From<u64> for KeyOrUserLevel2564423422 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            65535 => KeyOrUserLevel2564423422::NoKeyAvailable,
            0 => KeyOrUserLevel2564423422::UseLongSeedOrKey,
            value => KeyOrUserLevel2564423422::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PointerExtension2564423422 {
    SpnSpace,
    XValue(u64),
}

impl From<u64> for PointerExtension2564423422 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            0 => PointerExtension2564423422::SpnSpace,
            value => PointerExtension2564423422::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Command2564423422 {
    EdcpGeneration,
    BootLoad,
    OperationFailed,
    OperationCompleted,
    StatusRequest,
    Write,
    Read,
    Erase,
    XValue(u64),
}

impl From<u64> for Command2564423422 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => Command2564423422::EdcpGeneration,
            6 => Command2564423422::BootLoad,
            5 => Command2564423422::OperationFailed,
            4 => Command2564423422::OperationCompleted,
            3 => Command2564423422::StatusRequest,
            2 => Command2564423422::Write,
            1 => Command2564423422::Read,
            0 => Command2564423422::Erase,
            value => Command2564423422::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PointerType2564423422 {
    DirectedSpatialAddressing,
    DirectMemoryAddressing,
    XValue(u64),
}

impl From<u64> for PointerType2564423422 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => PointerType2564423422::DirectedSpatialAddressing,
            0 => PointerType2564423422::DirectMemoryAddressing,
            value => PointerType2564423422::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum HoldSignal2564816638 {
    NotAvailable,
    DevicesWhoseBroadcastStateHa,
    AllDevices,
    XValue(u64),
}

impl From<u64> for HoldSignal2564816638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => HoldSignal2564816638::NotAvailable,
            1 => HoldSignal2564816638::DevicesWhoseBroadcastStateHa,
            0 => HoldSignal2564816638::AllDevices,
            value => HoldSignal2564816638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum J1939Network32564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u64),
}

impl From<u64> for J1939Network32564816638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => J1939Network32564816638::DonXtCare,
            2 => J1939Network32564816638::Reserved,
            1 => J1939Network32564816638::StartBroadcast,
            0 => J1939Network32564816638::StopBroadcast,
            value => J1939Network32564816638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum J1939Network22564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u64),
}

impl From<u64> for J1939Network22564816638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => J1939Network22564816638::DonXtCare,
            2 => J1939Network22564816638::Reserved,
            1 => J1939Network22564816638::StartBroadcast,
            0 => J1939Network22564816638::StopBroadcast,
            value => J1939Network22564816638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Iso91412564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u64),
}

impl From<u64> for Iso91412564816638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Iso91412564816638::DonXtCare,
            2 => Iso91412564816638::Reserved,
            1 => Iso91412564816638::StartBroadcast,
            0 => Iso91412564816638::StopBroadcast,
            value => Iso91412564816638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SaeJ18502564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u64),
}

impl From<u64> for SaeJ18502564816638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SaeJ18502564816638::DonXtCare,
            2 => SaeJ18502564816638::Reserved,
            1 => SaeJ18502564816638::StartBroadcast,
            0 => SaeJ18502564816638::StopBroadcast,
            value => SaeJ18502564816638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ManufacturerSpecificPort2564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u64),
}

impl From<u64> for ManufacturerSpecificPort2564816638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ManufacturerSpecificPort2564816638::DonXtCare,
            2 => ManufacturerSpecificPort2564816638::Reserved,
            1 => ManufacturerSpecificPort2564816638::StartBroadcast,
            0 => ManufacturerSpecificPort2564816638::StopBroadcast,
            value => ManufacturerSpecificPort2564816638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum CurrentDataLink2564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u64),
}

impl From<u64> for CurrentDataLink2564816638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => CurrentDataLink2564816638::DonXtCare,
            2 => CurrentDataLink2564816638::Reserved,
            1 => CurrentDataLink2564816638::StartBroadcast,
            0 => CurrentDataLink2564816638::StopBroadcast,
            value => CurrentDataLink2564816638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SaeJ15872564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u64),
}

impl From<u64> for SaeJ15872564816638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SaeJ15872564816638::DonXtCare,
            2 => SaeJ15872564816638::Reserved,
            1 => SaeJ15872564816638::StartBroadcast,
            0 => SaeJ15872564816638::StopBroadcast,
            value => SaeJ15872564816638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SaeJ19222564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u64),
}

impl From<u64> for SaeJ19222564816638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => SaeJ19222564816638::DonXtCare,
            2 => SaeJ19222564816638::Reserved,
            1 => SaeJ19222564816638::StartBroadcast,
            0 => SaeJ19222564816638::StopBroadcast,
            value => SaeJ19222564816638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum J1939Network12564816638 {
    DonXtCare,
    Reserved,
    StartBroadcast,
    StopBroadcast,
    XValue(u64),
}

impl From<u64> for J1939Network12564816638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => J1939Network12564816638::DonXtCare,
            2 => J1939Network12564816638::Reserved,
            1 => J1939Network12564816638::StartBroadcast,
            0 => J1939Network12564816638::StopBroadcast,
            value => J1939Network12564816638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum SuspendSignal2564816638 {
    NotAvailable,
    ResumingNormalBroadcastPattern,
    TemporarySuspensionOfSomeMessages,
    TemporarySuspensionOfAllBroadcasts,
    IndefiniteSuspensionOfSomeMessages,
    IndefiniteSuspensionOfAllBroadcasts,
    XValue(u64),
}

impl From<u64> for SuspendSignal2564816638 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => SuspendSignal2564816638::NotAvailable,
            14 => SuspendSignal2564816638::ResumingNormalBroadcastPattern,
            3 => SuspendSignal2564816638::TemporarySuspensionOfSomeMessages,
            2 => SuspendSignal2564816638::TemporarySuspensionOfAllBroadcasts,
            1 => SuspendSignal2564816638::IndefiniteSuspensionOfSomeMessages,
            0 => SuspendSignal2564816638::IndefiniteSuspensionOfAllBroadcasts,
            value => SuspendSignal2564816638::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashRedStopLamp2566837502 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashRedStopLamp2566837502 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashRedStopLamp2566837502::UnavailableDoNotFlash,
            2 => FlashRedStopLamp2566837502::Reserved,
            1 => FlashRedStopLamp2566837502::FastFlash,
            0 => FlashRedStopLamp2566837502::SlowFlash,
            value => FlashRedStopLamp2566837502::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashProtectLamp2566837502 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashProtectLamp2566837502 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashProtectLamp2566837502::UnavailableDoNotFlash,
            2 => FlashProtectLamp2566837502::Reserved,
            1 => FlashProtectLamp2566837502::FastFlash,
            0 => FlashProtectLamp2566837502::SlowFlash,
            value => FlashProtectLamp2566837502::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier52566837502 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier52566837502 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier52566837502::NotAvailable,
            19 => FailureModeIdentifier52566837502::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier52566837502::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier52566837502::BelowNormalLeastSevere,
            16 => FailureModeIdentifier52566837502::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier52566837502::AboveNormalLeastSevere,
            14 => FailureModeIdentifier52566837502::SpecialIntstructions,
            13 => FailureModeIdentifier52566837502::OutOfCalibration,
            12 => FailureModeIdentifier52566837502::BadIntelligentDevice,
            11 => FailureModeIdentifier52566837502::RootCauseNotKnown,
            10 => FailureModeIdentifier52566837502::AbnormalRateOfChange,
            9 => FailureModeIdentifier52566837502::AbnormalUpdateRate,
            8 => FailureModeIdentifier52566837502::AbnormalFrequency,
            7 => FailureModeIdentifier52566837502::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier52566837502::CurrentAboveNormal,
            5 => FailureModeIdentifier52566837502::CurrentBelowNormal,
            4 => FailureModeIdentifier52566837502::VoltageBelowNormal,
            3 => FailureModeIdentifier52566837502::VoltageAboveNormal,
            2 => FailureModeIdentifier52566837502::DataErratic,
            1 => FailureModeIdentifier52566837502::BelowNormalMostSevere,
            0 => FailureModeIdentifier52566837502::AboveNormalMostSevere,
            value => FailureModeIdentifier52566837502::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier42566837502 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier42566837502 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier42566837502::NotAvailable,
            19 => FailureModeIdentifier42566837502::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier42566837502::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier42566837502::BelowNormalLeastSevere,
            16 => FailureModeIdentifier42566837502::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier42566837502::AboveNormalLeastSevere,
            14 => FailureModeIdentifier42566837502::SpecialIntstructions,
            13 => FailureModeIdentifier42566837502::OutOfCalibration,
            12 => FailureModeIdentifier42566837502::BadIntelligentDevice,
            11 => FailureModeIdentifier42566837502::RootCauseNotKnown,
            10 => FailureModeIdentifier42566837502::AbnormalRateOfChange,
            9 => FailureModeIdentifier42566837502::AbnormalUpdateRate,
            8 => FailureModeIdentifier42566837502::AbnormalFrequency,
            7 => FailureModeIdentifier42566837502::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier42566837502::CurrentAboveNormal,
            5 => FailureModeIdentifier42566837502::CurrentBelowNormal,
            4 => FailureModeIdentifier42566837502::VoltageBelowNormal,
            3 => FailureModeIdentifier42566837502::VoltageAboveNormal,
            2 => FailureModeIdentifier42566837502::DataErratic,
            1 => FailureModeIdentifier42566837502::BelowNormalMostSevere,
            0 => FailureModeIdentifier42566837502::AboveNormalMostSevere,
            value => FailureModeIdentifier42566837502::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier32566837502 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier32566837502 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier32566837502::NotAvailable,
            19 => FailureModeIdentifier32566837502::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier32566837502::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier32566837502::BelowNormalLeastSevere,
            16 => FailureModeIdentifier32566837502::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier32566837502::AboveNormalLeastSevere,
            14 => FailureModeIdentifier32566837502::SpecialIntstructions,
            13 => FailureModeIdentifier32566837502::OutOfCalibration,
            12 => FailureModeIdentifier32566837502::BadIntelligentDevice,
            11 => FailureModeIdentifier32566837502::RootCauseNotKnown,
            10 => FailureModeIdentifier32566837502::AbnormalRateOfChange,
            9 => FailureModeIdentifier32566837502::AbnormalUpdateRate,
            8 => FailureModeIdentifier32566837502::AbnormalFrequency,
            7 => FailureModeIdentifier32566837502::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier32566837502::CurrentAboveNormal,
            5 => FailureModeIdentifier32566837502::CurrentBelowNormal,
            4 => FailureModeIdentifier32566837502::VoltageBelowNormal,
            3 => FailureModeIdentifier32566837502::VoltageAboveNormal,
            2 => FailureModeIdentifier32566837502::DataErratic,
            1 => FailureModeIdentifier32566837502::BelowNormalMostSevere,
            0 => FailureModeIdentifier32566837502::AboveNormalMostSevere,
            value => FailureModeIdentifier32566837502::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566837502 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier12566837502 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier12566837502::NotAvailable,
            19 => FailureModeIdentifier12566837502::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier12566837502::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier12566837502::BelowNormalLeastSevere,
            16 => FailureModeIdentifier12566837502::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier12566837502::AboveNormalLeastSevere,
            14 => FailureModeIdentifier12566837502::SpecialIntstructions,
            13 => FailureModeIdentifier12566837502::OutOfCalibration,
            12 => FailureModeIdentifier12566837502::BadIntelligentDevice,
            11 => FailureModeIdentifier12566837502::RootCauseNotKnown,
            10 => FailureModeIdentifier12566837502::AbnormalRateOfChange,
            9 => FailureModeIdentifier12566837502::AbnormalUpdateRate,
            8 => FailureModeIdentifier12566837502::AbnormalFrequency,
            7 => FailureModeIdentifier12566837502::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier12566837502::CurrentAboveNormal,
            5 => FailureModeIdentifier12566837502::CurrentBelowNormal,
            4 => FailureModeIdentifier12566837502::VoltageBelowNormal,
            3 => FailureModeIdentifier12566837502::VoltageAboveNormal,
            2 => FailureModeIdentifier12566837502::DataErratic,
            1 => FailureModeIdentifier12566837502::BelowNormalMostSevere,
            0 => FailureModeIdentifier12566837502::AboveNormalMostSevere,
            value => FailureModeIdentifier12566837502::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2566837502 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for MalfunctionIndicatorLampStatus2566837502 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => MalfunctionIndicatorLampStatus2566837502::NotAvailable,
            2 => MalfunctionIndicatorLampStatus2566837502::Reserved,
            1 => MalfunctionIndicatorLampStatus2566837502::LampOn,
            0 => MalfunctionIndicatorLampStatus2566837502::LampOff,
            value => MalfunctionIndicatorLampStatus2566837502::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RedStopLampState2566837502 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for RedStopLampState2566837502 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RedStopLampState2566837502::NotAvailable,
            2 => RedStopLampState2566837502::Reserved,
            1 => RedStopLampState2566837502::LampOn,
            0 => RedStopLampState2566837502::LampOff,
            value => RedStopLampState2566837502::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2566837502 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for AmberWarningLampStatus2566837502 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AmberWarningLampStatus2566837502::NotAvailable,
            2 => AmberWarningLampStatus2566837502::Reserved,
            1 => AmberWarningLampStatus2566837502::LampOn,
            0 => AmberWarningLampStatus2566837502::LampOff,
            value => AmberWarningLampStatus2566837502::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ProtectLampStatus2566837502 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for ProtectLampStatus2566837502 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ProtectLampStatus2566837502::NotAvailable,
            2 => ProtectLampStatus2566837502::Reserved,
            1 => ProtectLampStatus2566837502::LampOn,
            0 => ProtectLampStatus2566837502::LampOff,
            value => ProtectLampStatus2566837502::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2566837502 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashMalfuncIndicatorLamp2566837502 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashMalfuncIndicatorLamp2566837502::UnavailableDoNotFlash,
            2 => FlashMalfuncIndicatorLamp2566837502::Reserved,
            1 => FlashMalfuncIndicatorLamp2566837502::FastFlash,
            0 => FlashMalfuncIndicatorLamp2566837502::SlowFlash,
            value => FlashMalfuncIndicatorLamp2566837502::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2566837502 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashAmberWarningLamp2566837502 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashAmberWarningLamp2566837502::UnavailableDoNotFlash,
            2 => FlashAmberWarningLamp2566837502::Reserved,
            1 => FlashAmberWarningLamp2566837502::FastFlash,
            0 => FlashAmberWarningLamp2566837502::SlowFlash,
            value => FlashAmberWarningLamp2566837502::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier22566837502 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier22566837502 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier22566837502::NotAvailable,
            19 => FailureModeIdentifier22566837502::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier22566837502::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier22566837502::BelowNormalLeastSevere,
            16 => FailureModeIdentifier22566837502::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier22566837502::AboveNormalLeastSevere,
            14 => FailureModeIdentifier22566837502::SpecialIntstructions,
            13 => FailureModeIdentifier22566837502::OutOfCalibration,
            12 => FailureModeIdentifier22566837502::BadIntelligentDevice,
            11 => FailureModeIdentifier22566837502::RootCauseNotKnown,
            10 => FailureModeIdentifier22566837502::AbnormalRateOfChange,
            9 => FailureModeIdentifier22566837502::AbnormalUpdateRate,
            8 => FailureModeIdentifier22566837502::AbnormalFrequency,
            7 => FailureModeIdentifier22566837502::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier22566837502::CurrentAboveNormal,
            5 => FailureModeIdentifier22566837502::CurrentBelowNormal,
            4 => FailureModeIdentifier22566837502::VoltageBelowNormal,
            3 => FailureModeIdentifier22566837502::VoltageAboveNormal,
            2 => FailureModeIdentifier22566837502::DataErratic,
            1 => FailureModeIdentifier22566837502::BelowNormalMostSevere,
            0 => FailureModeIdentifier22566837502::AboveNormalMostSevere,
            value => FailureModeIdentifier22566837502::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier52566834942 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier52566834942 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier52566834942::NotAvailable,
            19 => FailureModeIdentifier52566834942::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier52566834942::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier52566834942::BelowNormalLeastSevere,
            16 => FailureModeIdentifier52566834942::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier52566834942::AboveNormalLeastSevere,
            14 => FailureModeIdentifier52566834942::SpecialIntstructions,
            13 => FailureModeIdentifier52566834942::OutOfCalibration,
            12 => FailureModeIdentifier52566834942::BadIntelligentDevice,
            11 => FailureModeIdentifier52566834942::RootCauseNotKnown,
            10 => FailureModeIdentifier52566834942::AbnormalRateOfChange,
            9 => FailureModeIdentifier52566834942::AbnormalUpdateRate,
            8 => FailureModeIdentifier52566834942::AbnormalFrequency,
            7 => FailureModeIdentifier52566834942::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier52566834942::CurrentAboveNormal,
            5 => FailureModeIdentifier52566834942::CurrentBelowNormal,
            4 => FailureModeIdentifier52566834942::VoltageBelowNormal,
            3 => FailureModeIdentifier52566834942::VoltageAboveNormal,
            2 => FailureModeIdentifier52566834942::DataErratic,
            1 => FailureModeIdentifier52566834942::BelowNormalMostSevere,
            0 => FailureModeIdentifier52566834942::AboveNormalMostSevere,
            value => FailureModeIdentifier52566834942::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier42566834942 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier42566834942 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier42566834942::NotAvailable,
            19 => FailureModeIdentifier42566834942::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier42566834942::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier42566834942::BelowNormalLeastSevere,
            16 => FailureModeIdentifier42566834942::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier42566834942::AboveNormalLeastSevere,
            14 => FailureModeIdentifier42566834942::SpecialIntstructions,
            13 => FailureModeIdentifier42566834942::OutOfCalibration,
            12 => FailureModeIdentifier42566834942::BadIntelligentDevice,
            11 => FailureModeIdentifier42566834942::RootCauseNotKnown,
            10 => FailureModeIdentifier42566834942::AbnormalRateOfChange,
            9 => FailureModeIdentifier42566834942::AbnormalUpdateRate,
            8 => FailureModeIdentifier42566834942::AbnormalFrequency,
            7 => FailureModeIdentifier42566834942::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier42566834942::CurrentAboveNormal,
            5 => FailureModeIdentifier42566834942::CurrentBelowNormal,
            4 => FailureModeIdentifier42566834942::VoltageBelowNormal,
            3 => FailureModeIdentifier42566834942::VoltageAboveNormal,
            2 => FailureModeIdentifier42566834942::DataErratic,
            1 => FailureModeIdentifier42566834942::BelowNormalMostSevere,
            0 => FailureModeIdentifier42566834942::AboveNormalMostSevere,
            value => FailureModeIdentifier42566834942::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier32566834942 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier32566834942 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier32566834942::NotAvailable,
            19 => FailureModeIdentifier32566834942::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier32566834942::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier32566834942::BelowNormalLeastSevere,
            16 => FailureModeIdentifier32566834942::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier32566834942::AboveNormalLeastSevere,
            14 => FailureModeIdentifier32566834942::SpecialIntstructions,
            13 => FailureModeIdentifier32566834942::OutOfCalibration,
            12 => FailureModeIdentifier32566834942::BadIntelligentDevice,
            11 => FailureModeIdentifier32566834942::RootCauseNotKnown,
            10 => FailureModeIdentifier32566834942::AbnormalRateOfChange,
            9 => FailureModeIdentifier32566834942::AbnormalUpdateRate,
            8 => FailureModeIdentifier32566834942::AbnormalFrequency,
            7 => FailureModeIdentifier32566834942::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier32566834942::CurrentAboveNormal,
            5 => FailureModeIdentifier32566834942::CurrentBelowNormal,
            4 => FailureModeIdentifier32566834942::VoltageBelowNormal,
            3 => FailureModeIdentifier32566834942::VoltageAboveNormal,
            2 => FailureModeIdentifier32566834942::DataErratic,
            1 => FailureModeIdentifier32566834942::BelowNormalMostSevere,
            0 => FailureModeIdentifier32566834942::AboveNormalMostSevere,
            value => FailureModeIdentifier32566834942::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashRedStopLamp2566834942 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashRedStopLamp2566834942 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashRedStopLamp2566834942::UnavailableDoNotFlash,
            2 => FlashRedStopLamp2566834942::Reserved,
            1 => FlashRedStopLamp2566834942::FastFlash,
            0 => FlashRedStopLamp2566834942::SlowFlash,
            value => FlashRedStopLamp2566834942::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashProtectLamp2566834942 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashProtectLamp2566834942 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashProtectLamp2566834942::UnavailableDoNotFlash,
            2 => FlashProtectLamp2566834942::Reserved,
            1 => FlashProtectLamp2566834942::FastFlash,
            0 => FlashProtectLamp2566834942::SlowFlash,
            value => FlashProtectLamp2566834942::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2566834942 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashMalfuncIndicatorLamp2566834942 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashMalfuncIndicatorLamp2566834942::UnavailableDoNotFlash,
            2 => FlashMalfuncIndicatorLamp2566834942::Reserved,
            1 => FlashMalfuncIndicatorLamp2566834942::FastFlash,
            0 => FlashMalfuncIndicatorLamp2566834942::SlowFlash,
            value => FlashMalfuncIndicatorLamp2566834942::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2566834942 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashAmberWarningLamp2566834942 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashAmberWarningLamp2566834942::UnavailableDoNotFlash,
            2 => FlashAmberWarningLamp2566834942::Reserved,
            1 => FlashAmberWarningLamp2566834942::FastFlash,
            0 => FlashAmberWarningLamp2566834942::SlowFlash,
            value => FlashAmberWarningLamp2566834942::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2566834942 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for MalfunctionIndicatorLampStatus2566834942 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => MalfunctionIndicatorLampStatus2566834942::NotAvailable,
            2 => MalfunctionIndicatorLampStatus2566834942::Reserved,
            1 => MalfunctionIndicatorLampStatus2566834942::LampOn,
            0 => MalfunctionIndicatorLampStatus2566834942::LampOff,
            value => MalfunctionIndicatorLampStatus2566834942::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2566834942 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for AmberWarningLampStatus2566834942 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AmberWarningLampStatus2566834942::NotAvailable,
            2 => AmberWarningLampStatus2566834942::Reserved,
            1 => AmberWarningLampStatus2566834942::LampOn,
            0 => AmberWarningLampStatus2566834942::LampOff,
            value => AmberWarningLampStatus2566834942::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566834942 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier12566834942 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier12566834942::NotAvailable,
            19 => FailureModeIdentifier12566834942::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier12566834942::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier12566834942::BelowNormalLeastSevere,
            16 => FailureModeIdentifier12566834942::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier12566834942::AboveNormalLeastSevere,
            14 => FailureModeIdentifier12566834942::SpecialIntstructions,
            13 => FailureModeIdentifier12566834942::OutOfCalibration,
            12 => FailureModeIdentifier12566834942::BadIntelligentDevice,
            11 => FailureModeIdentifier12566834942::RootCauseNotKnown,
            10 => FailureModeIdentifier12566834942::AbnormalRateOfChange,
            9 => FailureModeIdentifier12566834942::AbnormalUpdateRate,
            8 => FailureModeIdentifier12566834942::AbnormalFrequency,
            7 => FailureModeIdentifier12566834942::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier12566834942::CurrentAboveNormal,
            5 => FailureModeIdentifier12566834942::CurrentBelowNormal,
            4 => FailureModeIdentifier12566834942::VoltageBelowNormal,
            3 => FailureModeIdentifier12566834942::VoltageAboveNormal,
            2 => FailureModeIdentifier12566834942::DataErratic,
            1 => FailureModeIdentifier12566834942::BelowNormalMostSevere,
            0 => FailureModeIdentifier12566834942::AboveNormalMostSevere,
            value => FailureModeIdentifier12566834942::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RedStopLampState2566834942 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for RedStopLampState2566834942 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RedStopLampState2566834942::NotAvailable,
            2 => RedStopLampState2566834942::Reserved,
            1 => RedStopLampState2566834942::LampOn,
            0 => RedStopLampState2566834942::LampOff,
            value => RedStopLampState2566834942::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ProtectLampStatus2566834942 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for ProtectLampStatus2566834942 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ProtectLampStatus2566834942::NotAvailable,
            2 => ProtectLampStatus2566834942::Reserved,
            1 => ProtectLampStatus2566834942::LampOn,
            0 => ProtectLampStatus2566834942::LampOff,
            value => ProtectLampStatus2566834942::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier22566834942 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier22566834942 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier22566834942::NotAvailable,
            19 => FailureModeIdentifier22566834942::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier22566834942::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier22566834942::BelowNormalLeastSevere,
            16 => FailureModeIdentifier22566834942::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier22566834942::AboveNormalLeastSevere,
            14 => FailureModeIdentifier22566834942::SpecialIntstructions,
            13 => FailureModeIdentifier22566834942::OutOfCalibration,
            12 => FailureModeIdentifier22566834942::BadIntelligentDevice,
            11 => FailureModeIdentifier22566834942::RootCauseNotKnown,
            10 => FailureModeIdentifier22566834942::AbnormalRateOfChange,
            9 => FailureModeIdentifier22566834942::AbnormalUpdateRate,
            8 => FailureModeIdentifier22566834942::AbnormalFrequency,
            7 => FailureModeIdentifier22566834942::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier22566834942::CurrentAboveNormal,
            5 => FailureModeIdentifier22566834942::CurrentBelowNormal,
            4 => FailureModeIdentifier22566834942::VoltageBelowNormal,
            3 => FailureModeIdentifier22566834942::VoltageAboveNormal,
            2 => FailureModeIdentifier22566834942::DataErratic,
            1 => FailureModeIdentifier22566834942::BelowNormalMostSevere,
            0 => FailureModeIdentifier22566834942::AboveNormalMostSevere,
            value => FailureModeIdentifier22566834942::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum IndustryGroup2566838526 {
    ReserveForSae,
    IndustrialProcessCtrlStationary,
    Marine,
    Construction,
    AgriculturalAndForestry,
    OnHighway,
    Global,
    XValue(u64),
}

impl From<u64> for IndustryGroup2566838526 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => IndustryGroup2566838526::ReserveForSae,
            5 => IndustryGroup2566838526::IndustrialProcessCtrlStationary,
            4 => IndustryGroup2566838526::Marine,
            3 => IndustryGroup2566838526::Construction,
            2 => IndustryGroup2566838526::AgriculturalAndForestry,
            1 => IndustryGroup2566838526::OnHighway,
            0 => IndustryGroup2566838526::Global,
            value => IndustryGroup2566838526::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum IndustryGroup2565799678 {
    ReserveForSae,
    IndustrialProcessCtrlStationary,
    Marine,
    Construction,
    AgriculturalAndForestry,
    OnHighway,
    Global,
    XValue(u64),
}

impl From<u64> for IndustryGroup2565799678 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => IndustryGroup2565799678::ReserveForSae,
            5 => IndustryGroup2565799678::IndustrialProcessCtrlStationary,
            4 => IndustryGroup2565799678::Marine,
            3 => IndustryGroup2565799678::Construction,
            2 => IndustryGroup2565799678::AgriculturalAndForestry,
            1 => IndustryGroup2565799678::OnHighway,
            0 => IndustryGroup2565799678::Global,
            value => IndustryGroup2565799678::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PgNumber2565668606 {
    NotAvailable,
    XValue(u64),
}

impl From<u64> for PgNumber2565668606 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            255 => PgNumber2565668606::NotAvailable,
            value => PgNumber2565668606::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ControlByte2565668606 {
    EAbort,
    EEoMack,
    Edpo,
    Ects,
    Erts,
    Abort,
    Bam,
    EoMa,
    Cts,
    Rts,
    XValue(u64),
}

impl From<u64> for ControlByte2565668606 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            24 => ControlByte2565668606::EAbort,
            23 => ControlByte2565668606::EEoMack,
            22 => ControlByte2565668606::Edpo,
            21 => ControlByte2565668606::Ects,
            20 => ControlByte2565668606::Erts,
            255 => ControlByte2565668606::Abort,
            32 => ControlByte2565668606::Bam,
            19 => ControlByte2565668606::EoMa,
            17 => ControlByte2565668606::Cts,
            16 => ControlByte2565668606::Rts,
            value => ControlByte2565668606::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum UseTransferMode2563374846 {
    Na,
    Undefined,
    Yes,
    No,
    XValue(u64),
}

impl From<u64> for UseTransferMode2563374846 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => UseTransferMode2563374846::Na,
            2 => UseTransferMode2563374846::Undefined,
            1 => UseTransferMode2563374846::Yes,
            0 => UseTransferMode2563374846::No,
            value => UseTransferMode2563374846::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier52566750462 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier52566750462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier52566750462::NotAvailable,
            19 => FailureModeIdentifier52566750462::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier52566750462::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier52566750462::BelowNormalLeastSevere,
            16 => FailureModeIdentifier52566750462::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier52566750462::AboveNormalLeastSevere,
            14 => FailureModeIdentifier52566750462::SpecialIntstructions,
            13 => FailureModeIdentifier52566750462::OutOfCalibration,
            12 => FailureModeIdentifier52566750462::BadIntelligentDevice,
            11 => FailureModeIdentifier52566750462::RootCauseNotKnown,
            10 => FailureModeIdentifier52566750462::AbnormalRateOfChange,
            9 => FailureModeIdentifier52566750462::AbnormalUpdateRate,
            8 => FailureModeIdentifier52566750462::AbnormalFrequency,
            7 => FailureModeIdentifier52566750462::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier52566750462::CurrentAboveNormal,
            5 => FailureModeIdentifier52566750462::CurrentBelowNormal,
            4 => FailureModeIdentifier52566750462::VoltageBelowNormal,
            3 => FailureModeIdentifier52566750462::VoltageAboveNormal,
            2 => FailureModeIdentifier52566750462::DataErratic,
            1 => FailureModeIdentifier52566750462::BelowNormalMostSevere,
            0 => FailureModeIdentifier52566750462::AboveNormalMostSevere,
            value => FailureModeIdentifier52566750462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier42566750462 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier42566750462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier42566750462::NotAvailable,
            19 => FailureModeIdentifier42566750462::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier42566750462::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier42566750462::BelowNormalLeastSevere,
            16 => FailureModeIdentifier42566750462::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier42566750462::AboveNormalLeastSevere,
            14 => FailureModeIdentifier42566750462::SpecialIntstructions,
            13 => FailureModeIdentifier42566750462::OutOfCalibration,
            12 => FailureModeIdentifier42566750462::BadIntelligentDevice,
            11 => FailureModeIdentifier42566750462::RootCauseNotKnown,
            10 => FailureModeIdentifier42566750462::AbnormalRateOfChange,
            9 => FailureModeIdentifier42566750462::AbnormalUpdateRate,
            8 => FailureModeIdentifier42566750462::AbnormalFrequency,
            7 => FailureModeIdentifier42566750462::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier42566750462::CurrentAboveNormal,
            5 => FailureModeIdentifier42566750462::CurrentBelowNormal,
            4 => FailureModeIdentifier42566750462::VoltageBelowNormal,
            3 => FailureModeIdentifier42566750462::VoltageAboveNormal,
            2 => FailureModeIdentifier42566750462::DataErratic,
            1 => FailureModeIdentifier42566750462::BelowNormalMostSevere,
            0 => FailureModeIdentifier42566750462::AboveNormalMostSevere,
            value => FailureModeIdentifier42566750462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier32566750462 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier32566750462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier32566750462::NotAvailable,
            19 => FailureModeIdentifier32566750462::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier32566750462::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier32566750462::BelowNormalLeastSevere,
            16 => FailureModeIdentifier32566750462::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier32566750462::AboveNormalLeastSevere,
            14 => FailureModeIdentifier32566750462::SpecialIntstructions,
            13 => FailureModeIdentifier32566750462::OutOfCalibration,
            12 => FailureModeIdentifier32566750462::BadIntelligentDevice,
            11 => FailureModeIdentifier32566750462::RootCauseNotKnown,
            10 => FailureModeIdentifier32566750462::AbnormalRateOfChange,
            9 => FailureModeIdentifier32566750462::AbnormalUpdateRate,
            8 => FailureModeIdentifier32566750462::AbnormalFrequency,
            7 => FailureModeIdentifier32566750462::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier32566750462::CurrentAboveNormal,
            5 => FailureModeIdentifier32566750462::CurrentBelowNormal,
            4 => FailureModeIdentifier32566750462::VoltageBelowNormal,
            3 => FailureModeIdentifier32566750462::VoltageAboveNormal,
            2 => FailureModeIdentifier32566750462::DataErratic,
            1 => FailureModeIdentifier32566750462::BelowNormalMostSevere,
            0 => FailureModeIdentifier32566750462::AboveNormalMostSevere,
            value => FailureModeIdentifier32566750462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashRedStopLamp2566750462 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashRedStopLamp2566750462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashRedStopLamp2566750462::UnavailableDoNotFlash,
            2 => FlashRedStopLamp2566750462::Reserved,
            1 => FlashRedStopLamp2566750462::FastFlash,
            0 => FlashRedStopLamp2566750462::SlowFlash,
            value => FlashRedStopLamp2566750462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashProtectLamp2566750462 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashProtectLamp2566750462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashProtectLamp2566750462::UnavailableDoNotFlash,
            2 => FlashProtectLamp2566750462::Reserved,
            1 => FlashProtectLamp2566750462::FastFlash,
            0 => FlashProtectLamp2566750462::SlowFlash,
            value => FlashProtectLamp2566750462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2566750462 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashMalfuncIndicatorLamp2566750462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashMalfuncIndicatorLamp2566750462::UnavailableDoNotFlash,
            2 => FlashMalfuncIndicatorLamp2566750462::Reserved,
            1 => FlashMalfuncIndicatorLamp2566750462::FastFlash,
            0 => FlashMalfuncIndicatorLamp2566750462::SlowFlash,
            value => FlashMalfuncIndicatorLamp2566750462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2566750462 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashAmberWarningLamp2566750462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashAmberWarningLamp2566750462::UnavailableDoNotFlash,
            2 => FlashAmberWarningLamp2566750462::Reserved,
            1 => FlashAmberWarningLamp2566750462::FastFlash,
            0 => FlashAmberWarningLamp2566750462::SlowFlash,
            value => FlashAmberWarningLamp2566750462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2566750462 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for MalfunctionIndicatorLampStatus2566750462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => MalfunctionIndicatorLampStatus2566750462::NotAvailable,
            2 => MalfunctionIndicatorLampStatus2566750462::Reserved,
            1 => MalfunctionIndicatorLampStatus2566750462::LampOn,
            0 => MalfunctionIndicatorLampStatus2566750462::LampOff,
            value => MalfunctionIndicatorLampStatus2566750462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2566750462 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for AmberWarningLampStatus2566750462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AmberWarningLampStatus2566750462::NotAvailable,
            2 => AmberWarningLampStatus2566750462::Reserved,
            1 => AmberWarningLampStatus2566750462::LampOn,
            0 => AmberWarningLampStatus2566750462::LampOff,
            value => AmberWarningLampStatus2566750462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566750462 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier12566750462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier12566750462::NotAvailable,
            19 => FailureModeIdentifier12566750462::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier12566750462::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier12566750462::BelowNormalLeastSevere,
            16 => FailureModeIdentifier12566750462::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier12566750462::AboveNormalLeastSevere,
            14 => FailureModeIdentifier12566750462::SpecialIntstructions,
            13 => FailureModeIdentifier12566750462::OutOfCalibration,
            12 => FailureModeIdentifier12566750462::BadIntelligentDevice,
            11 => FailureModeIdentifier12566750462::RootCauseNotKnown,
            10 => FailureModeIdentifier12566750462::AbnormalRateOfChange,
            9 => FailureModeIdentifier12566750462::AbnormalUpdateRate,
            8 => FailureModeIdentifier12566750462::AbnormalFrequency,
            7 => FailureModeIdentifier12566750462::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier12566750462::CurrentAboveNormal,
            5 => FailureModeIdentifier12566750462::CurrentBelowNormal,
            4 => FailureModeIdentifier12566750462::VoltageBelowNormal,
            3 => FailureModeIdentifier12566750462::VoltageAboveNormal,
            2 => FailureModeIdentifier12566750462::DataErratic,
            1 => FailureModeIdentifier12566750462::BelowNormalMostSevere,
            0 => FailureModeIdentifier12566750462::AboveNormalMostSevere,
            value => FailureModeIdentifier12566750462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RedStopLampState2566750462 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for RedStopLampState2566750462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RedStopLampState2566750462::NotAvailable,
            2 => RedStopLampState2566750462::Reserved,
            1 => RedStopLampState2566750462::LampOn,
            0 => RedStopLampState2566750462::LampOff,
            value => RedStopLampState2566750462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ProtectLampStatus2566750462 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for ProtectLampStatus2566750462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ProtectLampStatus2566750462::NotAvailable,
            2 => ProtectLampStatus2566750462::Reserved,
            1 => ProtectLampStatus2566750462::LampOn,
            0 => ProtectLampStatus2566750462::LampOff,
            value => ProtectLampStatus2566750462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier22566750462 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier22566750462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier22566750462::NotAvailable,
            19 => FailureModeIdentifier22566750462::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier22566750462::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier22566750462::BelowNormalLeastSevere,
            16 => FailureModeIdentifier22566750462::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier22566750462::AboveNormalLeastSevere,
            14 => FailureModeIdentifier22566750462::SpecialIntstructions,
            13 => FailureModeIdentifier22566750462::OutOfCalibration,
            12 => FailureModeIdentifier22566750462::BadIntelligentDevice,
            11 => FailureModeIdentifier22566750462::RootCauseNotKnown,
            10 => FailureModeIdentifier22566750462::AbnormalRateOfChange,
            9 => FailureModeIdentifier22566750462::AbnormalUpdateRate,
            8 => FailureModeIdentifier22566750462::AbnormalFrequency,
            7 => FailureModeIdentifier22566750462::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier22566750462::CurrentAboveNormal,
            5 => FailureModeIdentifier22566750462::CurrentBelowNormal,
            4 => FailureModeIdentifier22566750462::VoltageBelowNormal,
            3 => FailureModeIdentifier22566750462::VoltageAboveNormal,
            2 => FailureModeIdentifier22566750462::DataErratic,
            1 => FailureModeIdentifier22566750462::BelowNormalMostSevere,
            0 => FailureModeIdentifier22566750462::AboveNormalMostSevere,
            value => FailureModeIdentifier22566750462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier52566750974 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier52566750974 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier52566750974::NotAvailable,
            19 => FailureModeIdentifier52566750974::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier52566750974::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier52566750974::BelowNormalLeastSevere,
            16 => FailureModeIdentifier52566750974::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier52566750974::AboveNormalLeastSevere,
            14 => FailureModeIdentifier52566750974::SpecialIntstructions,
            13 => FailureModeIdentifier52566750974::OutOfCalibration,
            12 => FailureModeIdentifier52566750974::BadIntelligentDevice,
            11 => FailureModeIdentifier52566750974::RootCauseNotKnown,
            10 => FailureModeIdentifier52566750974::AbnormalRateOfChange,
            9 => FailureModeIdentifier52566750974::AbnormalUpdateRate,
            8 => FailureModeIdentifier52566750974::AbnormalFrequency,
            7 => FailureModeIdentifier52566750974::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier52566750974::CurrentAboveNormal,
            5 => FailureModeIdentifier52566750974::CurrentBelowNormal,
            4 => FailureModeIdentifier52566750974::VoltageBelowNormal,
            3 => FailureModeIdentifier52566750974::VoltageAboveNormal,
            2 => FailureModeIdentifier52566750974::DataErratic,
            1 => FailureModeIdentifier52566750974::BelowNormalMostSevere,
            0 => FailureModeIdentifier52566750974::AboveNormalMostSevere,
            value => FailureModeIdentifier52566750974::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier42566750974 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier42566750974 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier42566750974::NotAvailable,
            19 => FailureModeIdentifier42566750974::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier42566750974::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier42566750974::BelowNormalLeastSevere,
            16 => FailureModeIdentifier42566750974::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier42566750974::AboveNormalLeastSevere,
            14 => FailureModeIdentifier42566750974::SpecialIntstructions,
            13 => FailureModeIdentifier42566750974::OutOfCalibration,
            12 => FailureModeIdentifier42566750974::BadIntelligentDevice,
            11 => FailureModeIdentifier42566750974::RootCauseNotKnown,
            10 => FailureModeIdentifier42566750974::AbnormalRateOfChange,
            9 => FailureModeIdentifier42566750974::AbnormalUpdateRate,
            8 => FailureModeIdentifier42566750974::AbnormalFrequency,
            7 => FailureModeIdentifier42566750974::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier42566750974::CurrentAboveNormal,
            5 => FailureModeIdentifier42566750974::CurrentBelowNormal,
            4 => FailureModeIdentifier42566750974::VoltageBelowNormal,
            3 => FailureModeIdentifier42566750974::VoltageAboveNormal,
            2 => FailureModeIdentifier42566750974::DataErratic,
            1 => FailureModeIdentifier42566750974::BelowNormalMostSevere,
            0 => FailureModeIdentifier42566750974::AboveNormalMostSevere,
            value => FailureModeIdentifier42566750974::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier32566750974 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier32566750974 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier32566750974::NotAvailable,
            19 => FailureModeIdentifier32566750974::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier32566750974::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier32566750974::BelowNormalLeastSevere,
            16 => FailureModeIdentifier32566750974::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier32566750974::AboveNormalLeastSevere,
            14 => FailureModeIdentifier32566750974::SpecialIntstructions,
            13 => FailureModeIdentifier32566750974::OutOfCalibration,
            12 => FailureModeIdentifier32566750974::BadIntelligentDevice,
            11 => FailureModeIdentifier32566750974::RootCauseNotKnown,
            10 => FailureModeIdentifier32566750974::AbnormalRateOfChange,
            9 => FailureModeIdentifier32566750974::AbnormalUpdateRate,
            8 => FailureModeIdentifier32566750974::AbnormalFrequency,
            7 => FailureModeIdentifier32566750974::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier32566750974::CurrentAboveNormal,
            5 => FailureModeIdentifier32566750974::CurrentBelowNormal,
            4 => FailureModeIdentifier32566750974::VoltageBelowNormal,
            3 => FailureModeIdentifier32566750974::VoltageAboveNormal,
            2 => FailureModeIdentifier32566750974::DataErratic,
            1 => FailureModeIdentifier32566750974::BelowNormalMostSevere,
            0 => FailureModeIdentifier32566750974::AboveNormalMostSevere,
            value => FailureModeIdentifier32566750974::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashRedStopLamp2566750974 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashRedStopLamp2566750974 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashRedStopLamp2566750974::UnavailableDoNotFlash,
            2 => FlashRedStopLamp2566750974::Reserved,
            1 => FlashRedStopLamp2566750974::FastFlash,
            0 => FlashRedStopLamp2566750974::SlowFlash,
            value => FlashRedStopLamp2566750974::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashProtectLamp2566750974 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashProtectLamp2566750974 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashProtectLamp2566750974::UnavailableDoNotFlash,
            2 => FlashProtectLamp2566750974::Reserved,
            1 => FlashProtectLamp2566750974::FastFlash,
            0 => FlashProtectLamp2566750974::SlowFlash,
            value => FlashProtectLamp2566750974::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashMalfuncIndicatorLamp2566750974 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashMalfuncIndicatorLamp2566750974 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashMalfuncIndicatorLamp2566750974::UnavailableDoNotFlash,
            2 => FlashMalfuncIndicatorLamp2566750974::Reserved,
            1 => FlashMalfuncIndicatorLamp2566750974::FastFlash,
            0 => FlashMalfuncIndicatorLamp2566750974::SlowFlash,
            value => FlashMalfuncIndicatorLamp2566750974::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FlashAmberWarningLamp2566750974 {
    UnavailableDoNotFlash,
    Reserved,
    FastFlash,
    SlowFlash,
    XValue(u64),
}

impl From<u64> for FlashAmberWarningLamp2566750974 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FlashAmberWarningLamp2566750974::UnavailableDoNotFlash,
            2 => FlashAmberWarningLamp2566750974::Reserved,
            1 => FlashAmberWarningLamp2566750974::FastFlash,
            0 => FlashAmberWarningLamp2566750974::SlowFlash,
            value => FlashAmberWarningLamp2566750974::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum MalfunctionIndicatorLampStatus2566750974 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for MalfunctionIndicatorLampStatus2566750974 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => MalfunctionIndicatorLampStatus2566750974::NotAvailable,
            2 => MalfunctionIndicatorLampStatus2566750974::Reserved,
            1 => MalfunctionIndicatorLampStatus2566750974::LampOn,
            0 => MalfunctionIndicatorLampStatus2566750974::LampOff,
            value => MalfunctionIndicatorLampStatus2566750974::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AmberWarningLampStatus2566750974 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for AmberWarningLampStatus2566750974 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AmberWarningLampStatus2566750974::NotAvailable,
            2 => AmberWarningLampStatus2566750974::Reserved,
            1 => AmberWarningLampStatus2566750974::LampOn,
            0 => AmberWarningLampStatus2566750974::LampOff,
            value => AmberWarningLampStatus2566750974::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier12566750974 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier12566750974 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier12566750974::NotAvailable,
            19 => FailureModeIdentifier12566750974::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier12566750974::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier12566750974::BelowNormalLeastSevere,
            16 => FailureModeIdentifier12566750974::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier12566750974::AboveNormalLeastSevere,
            14 => FailureModeIdentifier12566750974::SpecialIntstructions,
            13 => FailureModeIdentifier12566750974::OutOfCalibration,
            12 => FailureModeIdentifier12566750974::BadIntelligentDevice,
            11 => FailureModeIdentifier12566750974::RootCauseNotKnown,
            10 => FailureModeIdentifier12566750974::AbnormalRateOfChange,
            9 => FailureModeIdentifier12566750974::AbnormalUpdateRate,
            8 => FailureModeIdentifier12566750974::AbnormalFrequency,
            7 => FailureModeIdentifier12566750974::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier12566750974::CurrentAboveNormal,
            5 => FailureModeIdentifier12566750974::CurrentBelowNormal,
            4 => FailureModeIdentifier12566750974::VoltageBelowNormal,
            3 => FailureModeIdentifier12566750974::VoltageAboveNormal,
            2 => FailureModeIdentifier12566750974::DataErratic,
            1 => FailureModeIdentifier12566750974::BelowNormalMostSevere,
            0 => FailureModeIdentifier12566750974::AboveNormalMostSevere,
            value => FailureModeIdentifier12566750974::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RedStopLampState2566750974 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for RedStopLampState2566750974 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RedStopLampState2566750974::NotAvailable,
            2 => RedStopLampState2566750974::Reserved,
            1 => RedStopLampState2566750974::LampOn,
            0 => RedStopLampState2566750974::LampOff,
            value => RedStopLampState2566750974::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ProtectLampStatus2566750974 {
    NotAvailable,
    Reserved,
    LampOn,
    LampOff,
    XValue(u64),
}

impl From<u64> for ProtectLampStatus2566750974 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ProtectLampStatus2566750974::NotAvailable,
            2 => ProtectLampStatus2566750974::Reserved,
            1 => ProtectLampStatus2566750974::LampOn,
            0 => ProtectLampStatus2566750974::LampOff,
            value => ProtectLampStatus2566750974::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FailureModeIdentifier22566750974 {
    NotAvailable,
    ReceivedNetworkDataInError,
    BelowNormalModeratelsSevere,
    BelowNormalLeastSevere,
    AboveNormalModeratelySevere,
    AboveNormalLeastSevere,
    SpecialIntstructions,
    OutOfCalibration,
    BadIntelligentDevice,
    RootCauseNotKnown,
    AbnormalRateOfChange,
    AbnormalUpdateRate,
    AbnormalFrequency,
    MechanicalSystemNotResponding,
    CurrentAboveNormal,
    CurrentBelowNormal,
    VoltageBelowNormal,
    VoltageAboveNormal,
    DataErratic,
    BelowNormalMostSevere,
    AboveNormalMostSevere,
    XValue(u64),
}

impl From<u64> for FailureModeIdentifier22566750974 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            31 => FailureModeIdentifier22566750974::NotAvailable,
            19 => FailureModeIdentifier22566750974::ReceivedNetworkDataInError,
            18 => FailureModeIdentifier22566750974::BelowNormalModeratelsSevere,
            17 => FailureModeIdentifier22566750974::BelowNormalLeastSevere,
            16 => FailureModeIdentifier22566750974::AboveNormalModeratelySevere,
            15 => FailureModeIdentifier22566750974::AboveNormalLeastSevere,
            14 => FailureModeIdentifier22566750974::SpecialIntstructions,
            13 => FailureModeIdentifier22566750974::OutOfCalibration,
            12 => FailureModeIdentifier22566750974::BadIntelligentDevice,
            11 => FailureModeIdentifier22566750974::RootCauseNotKnown,
            10 => FailureModeIdentifier22566750974::AbnormalRateOfChange,
            9 => FailureModeIdentifier22566750974::AbnormalUpdateRate,
            8 => FailureModeIdentifier22566750974::AbnormalFrequency,
            7 => FailureModeIdentifier22566750974::MechanicalSystemNotResponding,
            6 => FailureModeIdentifier22566750974::CurrentAboveNormal,
            5 => FailureModeIdentifier22566750974::CurrentBelowNormal,
            4 => FailureModeIdentifier22566750974::VoltageBelowNormal,
            3 => FailureModeIdentifier22566750974::VoltageAboveNormal,
            2 => FailureModeIdentifier22566750974::DataErratic,
            1 => FailureModeIdentifier22566750974::BelowNormalMostSevere,
            0 => FailureModeIdentifier22566750974::AboveNormalMostSevere,
            value => FailureModeIdentifier22566750974::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AetcDataCollectionStandard2566754558 {
    NotAvailable,
    X1101notDefined,
    Saej1995,
    XValue(u64),
}

impl From<u64> for AetcDataCollectionStandard2566754558 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => AetcDataCollectionStandard2566754558::NotAvailable,
            1 => AetcDataCollectionStandard2566754558::X1101notDefined,
            0 => AetcDataCollectionStandard2566754558::Saej1995,
            value => AetcDataCollectionStandard2566754558::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RightHeadlampLightDistribution2566749950 {
    NotAvailable,
    X1110reserved,
    DffrntLghtDstrbtnsNtAvlblNafsDs,
    LghtDstrbtnFlrMdlIsDmgdCrrntPsM,
    LghtDstrbtnFlSfPsMdlIsDmgdCrrnt,
    LghtDstrbtnAdvrsWthrAdvrsWthrLg,
    LghtDstrbtnHghBmHghBmDstrbtnOfT,
    LghtDstrbtnMtrwyTskOfMtrwyLghtI,
    LghtDstrbtnCntryCntryLghtIsMstl,
    LghtDstrbtnTwnBscLghtDstrbtnFrT,
    XValue(u64),
}

impl From<u64> for RightHeadlampLightDistribution2566749950 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => RightHeadlampLightDistribution2566749950::NotAvailable,
            8 => RightHeadlampLightDistribution2566749950::X1110reserved,
            7 => RightHeadlampLightDistribution2566749950::DffrntLghtDstrbtnsNtAvlblNafsDs,
            6 => RightHeadlampLightDistribution2566749950::LghtDstrbtnFlrMdlIsDmgdCrrntPsM,
            5 => RightHeadlampLightDistribution2566749950::LghtDstrbtnFlSfPsMdlIsDmgdCrrnt,
            4 => RightHeadlampLightDistribution2566749950::LghtDstrbtnAdvrsWthrAdvrsWthrLg,
            3 => RightHeadlampLightDistribution2566749950::LghtDstrbtnHghBmHghBmDstrbtnOfT,
            2 => RightHeadlampLightDistribution2566749950::LghtDstrbtnMtrwyTskOfMtrwyLghtI,
            1 => RightHeadlampLightDistribution2566749950::LghtDstrbtnCntryCntryLghtIsMstl,
            0 => RightHeadlampLightDistribution2566749950::LghtDstrbtnTwnBscLghtDstrbtnFrT,
            value => RightHeadlampLightDistribution2566749950::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LeftHeadlampLightDistribution2566749950 {
    NotAvailable,
    X1110reserved,
    DffrntLghtDstrbtnsNtAvlblNafsDs,
    LghtDstrbtnFlrMdlIsDmgdCrrntPsM,
    LghtDstrbtnFlSfPsMdlIsDmgdCrrnt,
    LghtDstrbtnAdvrsWthrAdvrsWthrLg,
    LghtDstrbtnHghBmHghBmDstrbtnOfT,
    LghtDstrbtnMtrwyTskOfMtrwyLghtI,
    LghtDstrbtnCntryCntryLghtIsMstl,
    LghtDstrbtnTwnBscLghtDstrbtnFrT,
    XValue(u64),
}

impl From<u64> for LeftHeadlampLightDistribution2566749950 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => LeftHeadlampLightDistribution2566749950::NotAvailable,
            8 => LeftHeadlampLightDistribution2566749950::X1110reserved,
            7 => LeftHeadlampLightDistribution2566749950::DffrntLghtDstrbtnsNtAvlblNafsDs,
            6 => LeftHeadlampLightDistribution2566749950::LghtDstrbtnFlrMdlIsDmgdCrrntPsM,
            5 => LeftHeadlampLightDistribution2566749950::LghtDstrbtnFlSfPsMdlIsDmgdCrrnt,
            4 => LeftHeadlampLightDistribution2566749950::LghtDstrbtnAdvrsWthrAdvrsWthrLg,
            3 => LeftHeadlampLightDistribution2566749950::LghtDstrbtnHghBmHghBmDstrbtnOfT,
            2 => LeftHeadlampLightDistribution2566749950::LghtDstrbtnMtrwyTskOfMtrwyLghtI,
            1 => LeftHeadlampLightDistribution2566749950::LghtDstrbtnCntryCntryLghtIsMstl,
            0 => LeftHeadlampLightDistribution2566749950::LghtDstrbtnTwnBscLghtDstrbtnFrT,
            value => LeftHeadlampLightDistribution2566749950::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RghtHeadlampDynamicBendingLight2566749950 {
    NotAvailable,
    X110reserved,
    DynmcBndngLghtFlrBndngLghtDsNtW,
    DynmcBndngLghtFlSfPsBndngLghtIs,
    DynmcBndngLghtIsWrkngPrprlyNrml,
    DynmcBndngLghtDctvtdThrIsNPrblm,
    XValue(u64),
}

impl From<u64> for RghtHeadlampDynamicBendingLight2566749950 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => RghtHeadlampDynamicBendingLight2566749950::NotAvailable,
            4 => RghtHeadlampDynamicBendingLight2566749950::X110reserved,
            3 => RghtHeadlampDynamicBendingLight2566749950::DynmcBndngLghtFlrBndngLghtDsNtW,
            2 => RghtHeadlampDynamicBendingLight2566749950::DynmcBndngLghtFlSfPsBndngLghtIs,
            1 => RghtHeadlampDynamicBendingLight2566749950::DynmcBndngLghtIsWrkngPrprlyNrml,
            0 => RghtHeadlampDynamicBendingLight2566749950::DynmcBndngLghtDctvtdThrIsNPrblm,
            value => RghtHeadlampDynamicBendingLight2566749950::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum LeftHeadlampDynamicBendingLight2566749950 {
    NotAvailable,
    X110reserved,
    DynmcBndngLghtFlrBndngLghtDsNtW,
    DynmcBndngLghtFlSfPsBndngLghtIs,
    DynmcBndngLghtIsWrkngPrprlyNrml,
    DynmcBndngLghtDctvtdThrIsNPrblm,
    XValue(u64),
}

impl From<u64> for LeftHeadlampDynamicBendingLight2566749950 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => LeftHeadlampDynamicBendingLight2566749950::NotAvailable,
            4 => LeftHeadlampDynamicBendingLight2566749950::X110reserved,
            3 => LeftHeadlampDynamicBendingLight2566749950::DynmcBndngLghtFlrBndngLghtDsNtW,
            2 => LeftHeadlampDynamicBendingLight2566749950::DynmcBndngLghtFlSfPsBndngLghtIs,
            1 => LeftHeadlampDynamicBendingLight2566749950::DynmcBndngLghtIsWrkngPrprlyNrml,
            0 => LeftHeadlampDynamicBendingLight2566749950::DynmcBndngLghtDctvtdThrIsNPrblm,
            value => LeftHeadlampDynamicBendingLight2566749950::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt1IntkGsSnsrHeaterCtrl2565869310 {
    HeaterOff,
    Preheat1,
    Preheat2,
    Automatic,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt1IntkGsSnsrHeaterCtrl2565869310 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt1IntkGsSnsrHeaterCtrl2565869310::HeaterOff,
            2 => Aftrtrtmnt1IntkGsSnsrHeaterCtrl2565869310::Preheat1,
            1 => Aftrtrtmnt1IntkGsSnsrHeaterCtrl2565869310::Preheat2,
            0 => Aftrtrtmnt1IntkGsSnsrHeaterCtrl2565869310::Automatic,
            value => Aftrtrtmnt1IntkGsSnsrHeaterCtrl2565869310::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt1IntkWdRngO2RdngStble2565869310 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt1IntkWdRngO2RdngStble2565869310 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt1IntkWdRngO2RdngStble2565869310::NotAvailable,
            2 => Aftrtrtmnt1IntkWdRngO2RdngStble2565869310::Error,
            1 => Aftrtrtmnt1IntkWdRngO2RdngStble2565869310::Stable,
            0 => Aftrtrtmnt1IntkWdRngO2RdngStble2565869310::NotStable,
            value => Aftrtrtmnt1IntkWdRngO2RdngStble2565869310::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt1IntkNOxReadingStable2565869310 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt1IntkNOxReadingStable2565869310 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt1IntkNOxReadingStable2565869310::NotAvailable,
            2 => Aftrtrtmnt1IntkNOxReadingStable2565869310::Error,
            1 => Aftrtrtmnt1IntkNOxReadingStable2565869310::Stable,
            0 => Aftrtrtmnt1IntkNOxReadingStable2565869310::NotStable,
            value => Aftrtrtmnt1IntkNOxReadingStable2565869310::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt1IntkGsSnsrPwrInRange2565869310 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt1IntkGsSnsrPwrInRange2565869310 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt1IntkGsSnsrPwrInRange2565869310::NotAvailable,
            2 => Aftrtrtmnt1IntkGsSnsrPwrInRange2565869310::Error,
            1 => Aftrtrtmnt1IntkGsSnsrPwrInRange2565869310::InRange,
            0 => Aftrtrtmnt1IntkGsSnsrPwrInRange2565869310::NotInRange,
            value => Aftrtrtmnt1IntkGsSnsrPwrInRange2565869310::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt1OtltGsSnsrHeaterCtrl2565869566 {
    HeaterOff,
    Preheat1,
    Preheat2,
    Automatic,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt1OtltGsSnsrHeaterCtrl2565869566 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt1OtltGsSnsrHeaterCtrl2565869566::HeaterOff,
            2 => Aftrtrtmnt1OtltGsSnsrHeaterCtrl2565869566::Preheat1,
            1 => Aftrtrtmnt1OtltGsSnsrHeaterCtrl2565869566::Preheat2,
            0 => Aftrtrtmnt1OtltGsSnsrHeaterCtrl2565869566::Automatic,
            value => Aftrtrtmnt1OtltGsSnsrHeaterCtrl2565869566::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt1OtltWdRngO2RdngStble2565869566 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt1OtltWdRngO2RdngStble2565869566 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt1OtltWdRngO2RdngStble2565869566::NotAvailable,
            2 => Aftrtrtmnt1OtltWdRngO2RdngStble2565869566::Error,
            1 => Aftrtrtmnt1OtltWdRngO2RdngStble2565869566::Stable,
            0 => Aftrtrtmnt1OtltWdRngO2RdngStble2565869566::NotStable,
            value => Aftrtrtmnt1OtltWdRngO2RdngStble2565869566::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt1OtltNOxReadingStable2565869566 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt1OtltNOxReadingStable2565869566 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt1OtltNOxReadingStable2565869566::NotAvailable,
            2 => Aftrtrtmnt1OtltNOxReadingStable2565869566::Error,
            1 => Aftrtrtmnt1OtltNOxReadingStable2565869566::Stable,
            0 => Aftrtrtmnt1OtltNOxReadingStable2565869566::NotStable,
            value => Aftrtrtmnt1OtltNOxReadingStable2565869566::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt1OtletGasSensorAtTemp2565869566 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt1OtletGasSensorAtTemp2565869566 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt1OtletGasSensorAtTemp2565869566::NotAvailable,
            2 => Aftrtrtmnt1OtletGasSensorAtTemp2565869566::Error,
            1 => Aftrtrtmnt1OtletGasSensorAtTemp2565869566::InRange,
            0 => Aftrtrtmnt1OtletGasSensorAtTemp2565869566::NotInRange,
            value => Aftrtrtmnt1OtletGasSensorAtTemp2565869566::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt1OtltGsSnsrPwrInRange2565869566 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt1OtltGsSnsrPwrInRange2565869566 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt1OtltGsSnsrPwrInRange2565869566::NotAvailable,
            2 => Aftrtrtmnt1OtltGsSnsrPwrInRange2565869566::Error,
            1 => Aftrtrtmnt1OtltGsSnsrPwrInRange2565869566::InRange,
            0 => Aftrtrtmnt1OtltGsSnsrPwrInRange2565869566::NotInRange,
            value => Aftrtrtmnt1OtltGsSnsrPwrInRange2565869566::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt2IntkGsSnsrHeaterCtrl2565869822 {
    HeaterOff,
    Preheat1,
    Preheat2,
    Automatic,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt2IntkGsSnsrHeaterCtrl2565869822 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt2IntkGsSnsrHeaterCtrl2565869822::HeaterOff,
            2 => Aftrtrtmnt2IntkGsSnsrHeaterCtrl2565869822::Preheat1,
            1 => Aftrtrtmnt2IntkGsSnsrHeaterCtrl2565869822::Preheat2,
            0 => Aftrtrtmnt2IntkGsSnsrHeaterCtrl2565869822::Automatic,
            value => Aftrtrtmnt2IntkGsSnsrHeaterCtrl2565869822::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt2IntkWdRngO2RdngStble2565869822 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt2IntkWdRngO2RdngStble2565869822 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt2IntkWdRngO2RdngStble2565869822::NotAvailable,
            2 => Aftrtrtmnt2IntkWdRngO2RdngStble2565869822::Error,
            1 => Aftrtrtmnt2IntkWdRngO2RdngStble2565869822::Stable,
            0 => Aftrtrtmnt2IntkWdRngO2RdngStble2565869822::NotStable,
            value => Aftrtrtmnt2IntkWdRngO2RdngStble2565869822::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt2IntkNOxReadingStable2565869822 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt2IntkNOxReadingStable2565869822 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt2IntkNOxReadingStable2565869822::NotAvailable,
            2 => Aftrtrtmnt2IntkNOxReadingStable2565869822::Error,
            1 => Aftrtrtmnt2IntkNOxReadingStable2565869822::Stable,
            0 => Aftrtrtmnt2IntkNOxReadingStable2565869822::NotStable,
            value => Aftrtrtmnt2IntkNOxReadingStable2565869822::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt2IntkeGasSensorAtTemp2565869822 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt2IntkeGasSensorAtTemp2565869822 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt2IntkeGasSensorAtTemp2565869822::NotAvailable,
            2 => Aftrtrtmnt2IntkeGasSensorAtTemp2565869822::Error,
            1 => Aftrtrtmnt2IntkeGasSensorAtTemp2565869822::InRange,
            0 => Aftrtrtmnt2IntkeGasSensorAtTemp2565869822::NotInRange,
            value => Aftrtrtmnt2IntkeGasSensorAtTemp2565869822::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt2IntkGsSnsrPwrInRange2565869822 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt2IntkGsSnsrPwrInRange2565869822 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt2IntkGsSnsrPwrInRange2565869822::NotAvailable,
            2 => Aftrtrtmnt2IntkGsSnsrPwrInRange2565869822::Error,
            1 => Aftrtrtmnt2IntkGsSnsrPwrInRange2565869822::InRange,
            0 => Aftrtrtmnt2IntkGsSnsrPwrInRange2565869822::NotInRange,
            value => Aftrtrtmnt2IntkGsSnsrPwrInRange2565869822::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt2OtltGsSnsrHeaterCtrl2565870078 {
    HeaterOff,
    Preheat1,
    Preheat2,
    Automatic,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt2OtltGsSnsrHeaterCtrl2565870078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt2OtltGsSnsrHeaterCtrl2565870078::HeaterOff,
            2 => Aftrtrtmnt2OtltGsSnsrHeaterCtrl2565870078::Preheat1,
            1 => Aftrtrtmnt2OtltGsSnsrHeaterCtrl2565870078::Preheat2,
            0 => Aftrtrtmnt2OtltGsSnsrHeaterCtrl2565870078::Automatic,
            value => Aftrtrtmnt2OtltGsSnsrHeaterCtrl2565870078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt2OtltWdRngO2RdngStble2565870078 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt2OtltWdRngO2RdngStble2565870078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt2OtltWdRngO2RdngStble2565870078::NotAvailable,
            2 => Aftrtrtmnt2OtltWdRngO2RdngStble2565870078::Error,
            1 => Aftrtrtmnt2OtltWdRngO2RdngStble2565870078::Stable,
            0 => Aftrtrtmnt2OtltWdRngO2RdngStble2565870078::NotStable,
            value => Aftrtrtmnt2OtltWdRngO2RdngStble2565870078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt2OtltNOxReadingStable2565870078 {
    NotAvailable,
    Error,
    Stable,
    NotStable,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt2OtltNOxReadingStable2565870078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt2OtltNOxReadingStable2565870078::NotAvailable,
            2 => Aftrtrtmnt2OtltNOxReadingStable2565870078::Error,
            1 => Aftrtrtmnt2OtltNOxReadingStable2565870078::Stable,
            0 => Aftrtrtmnt2OtltNOxReadingStable2565870078::NotStable,
            value => Aftrtrtmnt2OtltNOxReadingStable2565870078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt2OtletGasSensorAtTemp2565870078 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt2OtletGasSensorAtTemp2565870078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt2OtletGasSensorAtTemp2565870078::NotAvailable,
            2 => Aftrtrtmnt2OtletGasSensorAtTemp2565870078::Error,
            1 => Aftrtrtmnt2OtletGasSensorAtTemp2565870078::InRange,
            0 => Aftrtrtmnt2OtletGasSensorAtTemp2565870078::NotInRange,
            value => Aftrtrtmnt2OtletGasSensorAtTemp2565870078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Aftrtrtmnt2OtltGsSnsrPwrInRange2565870078 {
    NotAvailable,
    Error,
    InRange,
    NotInRange,
    XValue(u64),
}

impl From<u64> for Aftrtrtmnt2OtltGsSnsrPwrInRange2565870078 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Aftrtrtmnt2OtltGsSnsrPwrInRange2565870078::NotAvailable,
            2 => Aftrtrtmnt2OtltGsSnsrPwrInRange2565870078::Error,
            1 => Aftrtrtmnt2OtltGsSnsrPwrInRange2565870078::InRange,
            0 => Aftrtrtmnt2OtltGsSnsrPwrInRange2565870078::NotInRange,
            value => Aftrtrtmnt2OtltGsSnsrPwrInRange2565870078::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ParticulateTrap1AshLoadPercent2566749182 {
    LevelIsTargetAshServiceInterval,
    XValue(u64),
}

impl From<u64> for ParticulateTrap1AshLoadPercent2566749182 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            4 => ParticulateTrap1AshLoadPercent2566749182::LevelIsTargetAshServiceInterval,
            value => ParticulateTrap1AshLoadPercent2566749182::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ParticulateTrap1SootLoadPercent2566749182 {
    LvlIsActvRgnerationTriggerLevel,
    XValue(u64),
}

impl From<u64> for ParticulateTrap1SootLoadPercent2566749182 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            4 => ParticulateTrap1SootLoadPercent2566749182::LvlIsActvRgnerationTriggerLevel,
            value => ParticulateTrap1SootLoadPercent2566749182::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ParticulateTrap2AshLoadPercent2566748926 {
    LevelIsTargetAshServiceInterval,
    XValue(u64),
}

impl From<u64> for ParticulateTrap2AshLoadPercent2566748926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            4 => ParticulateTrap2AshLoadPercent2566748926::LevelIsTargetAshServiceInterval,
            value => ParticulateTrap2AshLoadPercent2566748926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ParticulateTrap2SootLoadPercent2566748926 {
    LvlIsActvRgnerationTriggerLevel,
    XValue(u64),
}

impl From<u64> for ParticulateTrap2SootLoadPercent2566748926 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            4 => ParticulateTrap2SootLoadPercent2566748926::LvlIsActvRgnerationTriggerLevel,
            value => ParticulateTrap2SootLoadPercent2566748926::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO452561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO452561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO452561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO452561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO452561146622::AuxChannelOn,
            0 => AuxIO452561146622::AuxChannelOff,
            value => AuxIO452561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO462561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO462561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO462561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO462561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO462561146622::AuxChannelOn,
            0 => AuxIO462561146622::AuxChannelOff,
            value => AuxIO462561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO472561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO472561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO472561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO472561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO472561146622::AuxChannelOn,
            0 => AuxIO472561146622::AuxChannelOff,
            value => AuxIO472561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO482561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO482561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO482561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO482561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO482561146622::AuxChannelOn,
            0 => AuxIO482561146622::AuxChannelOff,
            value => AuxIO482561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO412561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO412561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO412561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO412561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO412561146622::AuxChannelOn,
            0 => AuxIO412561146622::AuxChannelOff,
            value => AuxIO412561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO422561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO422561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO422561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO422561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO422561146622::AuxChannelOn,
            0 => AuxIO422561146622::AuxChannelOff,
            value => AuxIO422561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO432561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO432561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO432561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO432561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO432561146622::AuxChannelOn,
            0 => AuxIO432561146622::AuxChannelOff,
            value => AuxIO432561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO442561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO442561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO442561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO442561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO442561146622::AuxChannelOn,
            0 => AuxIO442561146622::AuxChannelOff,
            value => AuxIO442561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO372561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO372561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO372561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO372561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO372561146622::AuxChannelOn,
            0 => AuxIO372561146622::AuxChannelOff,
            value => AuxIO372561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO382561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO382561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO382561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO382561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO382561146622::AuxChannelOn,
            0 => AuxIO382561146622::AuxChannelOff,
            value => AuxIO382561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO392561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO392561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO392561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO392561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO392561146622::AuxChannelOn,
            0 => AuxIO392561146622::AuxChannelOff,
            value => AuxIO392561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO402561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO402561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO402561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO402561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO402561146622::AuxChannelOn,
            0 => AuxIO402561146622::AuxChannelOff,
            value => AuxIO402561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO332561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO332561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO332561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO332561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO332561146622::AuxChannelOn,
            0 => AuxIO332561146622::AuxChannelOff,
            value => AuxIO332561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO342561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO342561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO342561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO342561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO342561146622::AuxChannelOn,
            0 => AuxIO342561146622::AuxChannelOff,
            value => AuxIO342561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO352561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO352561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO352561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO352561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO352561146622::AuxChannelOn,
            0 => AuxIO352561146622::AuxChannelOff,
            value => AuxIO352561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO362561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO362561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO362561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO362561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO362561146622::AuxChannelOn,
            0 => AuxIO362561146622::AuxChannelOff,
            value => AuxIO362561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO292561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO292561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO292561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO292561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO292561146622::AuxChannelOn,
            0 => AuxIO292561146622::AuxChannelOff,
            value => AuxIO292561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO302561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO302561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO302561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO302561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO302561146622::AuxChannelOn,
            0 => AuxIO302561146622::AuxChannelOff,
            value => AuxIO302561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO312561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO312561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO312561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO312561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO312561146622::AuxChannelOn,
            0 => AuxIO312561146622::AuxChannelOff,
            value => AuxIO312561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO322561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO322561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO322561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO322561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO322561146622::AuxChannelOn,
            0 => AuxIO322561146622::AuxChannelOff,
            value => AuxIO322561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO252561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO252561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO252561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO252561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO252561146622::AuxChannelOn,
            0 => AuxIO252561146622::AuxChannelOff,
            value => AuxIO252561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO262561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO262561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO262561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO262561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO262561146622::AuxChannelOn,
            0 => AuxIO262561146622::AuxChannelOff,
            value => AuxIO262561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO272561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO272561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO272561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO272561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO272561146622::AuxChannelOn,
            0 => AuxIO272561146622::AuxChannelOff,
            value => AuxIO272561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO282561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO282561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO282561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO282561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO282561146622::AuxChannelOn,
            0 => AuxIO282561146622::AuxChannelOff,
            value => AuxIO282561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO212561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO212561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO212561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO212561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO212561146622::AuxChannelOn,
            0 => AuxIO212561146622::AuxChannelOff,
            value => AuxIO212561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO222561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO222561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO222561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO222561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO222561146622::AuxChannelOn,
            0 => AuxIO222561146622::AuxChannelOff,
            value => AuxIO222561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO232561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO232561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO232561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO232561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO232561146622::AuxChannelOn,
            0 => AuxIO232561146622::AuxChannelOff,
            value => AuxIO232561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO242561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO242561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO242561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO242561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO242561146622::AuxChannelOn,
            0 => AuxIO242561146622::AuxChannelOff,
            value => AuxIO242561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO172561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO172561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO172561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO172561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO172561146622::AuxChannelOn,
            0 => AuxIO172561146622::AuxChannelOff,
            value => AuxIO172561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO182561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO182561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO182561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO182561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO182561146622::AuxChannelOn,
            0 => AuxIO182561146622::AuxChannelOff,
            value => AuxIO182561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO192561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO192561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO192561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO192561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO192561146622::AuxChannelOn,
            0 => AuxIO192561146622::AuxChannelOff,
            value => AuxIO192561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO202561146622 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO202561146622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO202561146622::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO202561146622::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO202561146622::AuxChannelOn,
            0 => AuxIO202561146622::AuxChannelOff,
            value => AuxIO202561146622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO772561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO772561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO772561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO772561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO772561081086::AuxChannelOn,
            0 => AuxIO772561081086::AuxChannelOff,
            value => AuxIO772561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO782561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO782561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO782561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO782561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO782561081086::AuxChannelOn,
            0 => AuxIO782561081086::AuxChannelOff,
            value => AuxIO782561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO792561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO792561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO792561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO792561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO792561081086::AuxChannelOn,
            0 => AuxIO792561081086::AuxChannelOff,
            value => AuxIO792561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO802561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO802561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO802561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO802561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO802561081086::AuxChannelOn,
            0 => AuxIO802561081086::AuxChannelOff,
            value => AuxIO802561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO732561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO732561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO732561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO732561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO732561081086::AuxChannelOn,
            0 => AuxIO732561081086::AuxChannelOff,
            value => AuxIO732561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO742561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO742561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO742561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO742561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO742561081086::AuxChannelOn,
            0 => AuxIO742561081086::AuxChannelOff,
            value => AuxIO742561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO752561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO752561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO752561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO752561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO752561081086::AuxChannelOn,
            0 => AuxIO752561081086::AuxChannelOff,
            value => AuxIO752561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO762561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO762561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO762561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO762561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO762561081086::AuxChannelOn,
            0 => AuxIO762561081086::AuxChannelOff,
            value => AuxIO762561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO692561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO692561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO692561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO692561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO692561081086::AuxChannelOn,
            0 => AuxIO692561081086::AuxChannelOff,
            value => AuxIO692561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO702561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO702561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO702561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO702561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO702561081086::AuxChannelOn,
            0 => AuxIO702561081086::AuxChannelOff,
            value => AuxIO702561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO712561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO712561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO712561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO712561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO712561081086::AuxChannelOn,
            0 => AuxIO712561081086::AuxChannelOff,
            value => AuxIO712561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO722561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO722561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO722561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO722561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO722561081086::AuxChannelOn,
            0 => AuxIO722561081086::AuxChannelOff,
            value => AuxIO722561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO652561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO652561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO652561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO652561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO652561081086::AuxChannelOn,
            0 => AuxIO652561081086::AuxChannelOff,
            value => AuxIO652561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO662561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO662561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO662561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO662561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO662561081086::AuxChannelOn,
            0 => AuxIO662561081086::AuxChannelOff,
            value => AuxIO662561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO672561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO672561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO672561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO672561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO672561081086::AuxChannelOn,
            0 => AuxIO672561081086::AuxChannelOff,
            value => AuxIO672561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO682561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO682561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO682561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO682561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO682561081086::AuxChannelOn,
            0 => AuxIO682561081086::AuxChannelOff,
            value => AuxIO682561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO612561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO612561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO612561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO612561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO612561081086::AuxChannelOn,
            0 => AuxIO612561081086::AuxChannelOff,
            value => AuxIO612561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO622561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO622561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO622561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO622561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO622561081086::AuxChannelOn,
            0 => AuxIO622561081086::AuxChannelOff,
            value => AuxIO622561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO632561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO632561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO632561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO632561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO632561081086::AuxChannelOn,
            0 => AuxIO632561081086::AuxChannelOff,
            value => AuxIO632561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO642561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO642561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO642561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO642561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO642561081086::AuxChannelOn,
            0 => AuxIO642561081086::AuxChannelOff,
            value => AuxIO642561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO572561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO572561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO572561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO572561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO572561081086::AuxChannelOn,
            0 => AuxIO572561081086::AuxChannelOff,
            value => AuxIO572561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO582561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO582561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO582561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO582561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO582561081086::AuxChannelOn,
            0 => AuxIO582561081086::AuxChannelOff,
            value => AuxIO582561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO592561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO592561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO592561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO592561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO592561081086::AuxChannelOn,
            0 => AuxIO592561081086::AuxChannelOff,
            value => AuxIO592561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO602561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO602561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO602561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO602561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO602561081086::AuxChannelOn,
            0 => AuxIO602561081086::AuxChannelOff,
            value => AuxIO602561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO532561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO532561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO532561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO532561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO532561081086::AuxChannelOn,
            0 => AuxIO532561081086::AuxChannelOff,
            value => AuxIO532561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO542561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO542561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO542561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO542561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO542561081086::AuxChannelOn,
            0 => AuxIO542561081086::AuxChannelOff,
            value => AuxIO542561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO552561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO552561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO552561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO552561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO552561081086::AuxChannelOn,
            0 => AuxIO552561081086::AuxChannelOff,
            value => AuxIO552561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO562561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO562561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO562561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO562561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO562561081086::AuxChannelOn,
            0 => AuxIO562561081086::AuxChannelOff,
            value => AuxIO562561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO492561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO492561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO492561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO492561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO492561081086::AuxChannelOn,
            0 => AuxIO492561081086::AuxChannelOff,
            value => AuxIO492561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO502561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO502561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO502561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO502561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO502561081086::AuxChannelOn,
            0 => AuxIO502561081086::AuxChannelOff,
            value => AuxIO502561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO512561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO512561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO512561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO512561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO512561081086::AuxChannelOn,
            0 => AuxIO512561081086::AuxChannelOff,
            value => AuxIO512561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO522561081086 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO522561081086 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO522561081086::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO522561081086::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO522561081086::AuxChannelOn,
            0 => AuxIO522561081086::AuxChannelOff,
            value => AuxIO522561081086::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO922561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO922561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO922561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO922561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO922561015550::AuxChannelOn,
            0 => AuxIO922561015550::AuxChannelOff,
            value => AuxIO922561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO852561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO852561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO852561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO852561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO852561015550::AuxChannelOn,
            0 => AuxIO852561015550::AuxChannelOff,
            value => AuxIO852561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO862561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO862561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO862561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO862561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO862561015550::AuxChannelOn,
            0 => AuxIO862561015550::AuxChannelOff,
            value => AuxIO862561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO872561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO872561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO872561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO872561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO872561015550::AuxChannelOn,
            0 => AuxIO872561015550::AuxChannelOff,
            value => AuxIO872561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO882561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO882561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO882561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO882561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO882561015550::AuxChannelOn,
            0 => AuxIO882561015550::AuxChannelOff,
            value => AuxIO882561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO812561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO812561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO812561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO812561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO812561015550::AuxChannelOn,
            0 => AuxIO812561015550::AuxChannelOff,
            value => AuxIO812561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO822561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO822561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO822561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO822561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO822561015550::AuxChannelOn,
            0 => AuxIO822561015550::AuxChannelOff,
            value => AuxIO822561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO832561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO832561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO832561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO832561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO832561015550::AuxChannelOn,
            0 => AuxIO832561015550::AuxChannelOff,
            value => AuxIO832561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO842561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO842561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO842561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO842561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO842561015550::AuxChannelOn,
            0 => AuxIO842561015550::AuxChannelOff,
            value => AuxIO842561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO1092561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO1092561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO1092561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO1092561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO1092561015550::AuxChannelOn,
            0 => AuxIO1092561015550::AuxChannelOff,
            value => AuxIO1092561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO1102561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO1102561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO1102561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO1102561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO1102561015550::AuxChannelOn,
            0 => AuxIO1102561015550::AuxChannelOff,
            value => AuxIO1102561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO1112561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO1112561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO1112561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO1112561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO1112561015550::AuxChannelOn,
            0 => AuxIO1112561015550::AuxChannelOff,
            value => AuxIO1112561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO1122561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO1122561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO1122561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO1122561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO1122561015550::AuxChannelOn,
            0 => AuxIO1122561015550::AuxChannelOff,
            value => AuxIO1122561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO1052561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO1052561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO1052561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO1052561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO1052561015550::AuxChannelOn,
            0 => AuxIO1052561015550::AuxChannelOff,
            value => AuxIO1052561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO1062561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO1062561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO1062561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO1062561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO1062561015550::AuxChannelOn,
            0 => AuxIO1062561015550::AuxChannelOff,
            value => AuxIO1062561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO1072561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO1072561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO1072561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO1072561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO1072561015550::AuxChannelOn,
            0 => AuxIO1072561015550::AuxChannelOff,
            value => AuxIO1072561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO1082561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO1082561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO1082561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO1082561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO1082561015550::AuxChannelOn,
            0 => AuxIO1082561015550::AuxChannelOff,
            value => AuxIO1082561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO1012561015550 {
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    NtAvlblTkNoActionDependingOnApp,
    XValue(u64),
}

impl From<u64> for AuxIO1012561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            2 => AuxIO1012561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO1012561015550::AuxChannelOn,
            0 => AuxIO1012561015550::AuxChannelOff,
            3 => AuxIO1012561015550::NtAvlblTkNoActionDependingOnApp,
            value => AuxIO1012561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO1022561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO1022561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO1022561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO1022561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO1022561015550::AuxChannelOn,
            0 => AuxIO1022561015550::AuxChannelOff,
            value => AuxIO1022561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO1032561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO1032561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO1032561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO1032561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO1032561015550::AuxChannelOn,
            0 => AuxIO1032561015550::AuxChannelOff,
            value => AuxIO1032561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO1042561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO1042561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO1042561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO1042561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO1042561015550::AuxChannelOn,
            0 => AuxIO1042561015550::AuxChannelOff,
            value => AuxIO1042561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO972561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO972561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO972561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO972561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO972561015550::AuxChannelOn,
            0 => AuxIO972561015550::AuxChannelOff,
            value => AuxIO972561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO982561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO982561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO982561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO982561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO982561015550::AuxChannelOn,
            0 => AuxIO982561015550::AuxChannelOff,
            value => AuxIO982561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO992561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO992561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO992561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO992561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO992561015550::AuxChannelOn,
            0 => AuxIO992561015550::AuxChannelOff,
            value => AuxIO992561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO1002561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO1002561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO1002561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO1002561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO1002561015550::AuxChannelOn,
            0 => AuxIO1002561015550::AuxChannelOff,
            value => AuxIO1002561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO932561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO932561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO932561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO932561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO932561015550::AuxChannelOn,
            0 => AuxIO932561015550::AuxChannelOff,
            value => AuxIO932561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO942561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO942561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO942561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO942561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO942561015550::AuxChannelOn,
            0 => AuxIO942561015550::AuxChannelOff,
            value => AuxIO942561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO952561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO952561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO952561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO952561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO952561015550::AuxChannelOn,
            0 => AuxIO952561015550::AuxChannelOff,
            value => AuxIO952561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO962561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO962561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO962561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO962561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO962561015550::AuxChannelOn,
            0 => AuxIO962561015550::AuxChannelOff,
            value => AuxIO962561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO892561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO892561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO892561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO892561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO892561015550::AuxChannelOn,
            0 => AuxIO892561015550::AuxChannelOff,
            value => AuxIO892561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO902561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO902561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO902561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO902561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO902561015550::AuxChannelOn,
            0 => AuxIO902561015550::AuxChannelOff,
            value => AuxIO902561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AuxIO912561015550 {
    NtAvlblTkNoActionDependingOnApp,
    ErrrIndctrNotUsedDependingOnApp,
    AuxChannelOn,
    AuxChannelOff,
    XValue(u64),
}

impl From<u64> for AuxIO912561015550 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AuxIO912561015550::NtAvlblTkNoActionDependingOnApp,
            2 => AuxIO912561015550::ErrrIndctrNotUsedDependingOnApp,
            1 => AuxIO912561015550::AuxChannelOn,
            0 => AuxIO912561015550::AuxChannelOff,
            value => AuxIO912561015550::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle5Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TrailerBrakeStrokeAxle5Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TrailerBrakeStrokeAxle5Right2566746622::NotAvailable,
            6 => TrailerBrakeStrokeAxle5Right2566746622::SensorError,
            5 => TrailerBrakeStrokeAxle5Right2566746622::Reserved,
            3 => TrailerBrakeStrokeAxle5Right2566746622::DraggingBrake,
            2 => TrailerBrakeStrokeAxle5Right2566746622::Overstroke,
            1 => TrailerBrakeStrokeAxle5Right2566746622::Nonfunctioning,
            0 => TrailerBrakeStrokeAxle5Right2566746622::Ok,
            value => TrailerBrakeStrokeAxle5Right2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle5Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TrailerBrakeStrokeAxle5Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TrailerBrakeStrokeAxle5Left2566746622::NotAvailable,
            6 => TrailerBrakeStrokeAxle5Left2566746622::SensorError,
            5 => TrailerBrakeStrokeAxle5Left2566746622::Reserved,
            3 => TrailerBrakeStrokeAxle5Left2566746622::DraggingBrake,
            2 => TrailerBrakeStrokeAxle5Left2566746622::Overstroke,
            1 => TrailerBrakeStrokeAxle5Left2566746622::Nonfunctioning,
            0 => TrailerBrakeStrokeAxle5Left2566746622::Ok,
            value => TrailerBrakeStrokeAxle5Left2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle4Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TrailerBrakeStrokeAxle4Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TrailerBrakeStrokeAxle4Right2566746622::NotAvailable,
            6 => TrailerBrakeStrokeAxle4Right2566746622::SensorError,
            5 => TrailerBrakeStrokeAxle4Right2566746622::Reserved,
            3 => TrailerBrakeStrokeAxle4Right2566746622::DraggingBrake,
            2 => TrailerBrakeStrokeAxle4Right2566746622::Overstroke,
            1 => TrailerBrakeStrokeAxle4Right2566746622::Nonfunctioning,
            0 => TrailerBrakeStrokeAxle4Right2566746622::Ok,
            value => TrailerBrakeStrokeAxle4Right2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle4Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TrailerBrakeStrokeAxle4Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TrailerBrakeStrokeAxle4Left2566746622::NotAvailable,
            6 => TrailerBrakeStrokeAxle4Left2566746622::SensorError,
            5 => TrailerBrakeStrokeAxle4Left2566746622::Reserved,
            3 => TrailerBrakeStrokeAxle4Left2566746622::DraggingBrake,
            2 => TrailerBrakeStrokeAxle4Left2566746622::Overstroke,
            1 => TrailerBrakeStrokeAxle4Left2566746622::Nonfunctioning,
            0 => TrailerBrakeStrokeAxle4Left2566746622::Ok,
            value => TrailerBrakeStrokeAxle4Left2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle3Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TrailerBrakeStrokeAxle3Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TrailerBrakeStrokeAxle3Right2566746622::NotAvailable,
            6 => TrailerBrakeStrokeAxle3Right2566746622::SensorError,
            5 => TrailerBrakeStrokeAxle3Right2566746622::Reserved,
            3 => TrailerBrakeStrokeAxle3Right2566746622::DraggingBrake,
            2 => TrailerBrakeStrokeAxle3Right2566746622::Overstroke,
            1 => TrailerBrakeStrokeAxle3Right2566746622::Nonfunctioning,
            0 => TrailerBrakeStrokeAxle3Right2566746622::Ok,
            value => TrailerBrakeStrokeAxle3Right2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle3Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TrailerBrakeStrokeAxle3Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TrailerBrakeStrokeAxle3Left2566746622::NotAvailable,
            6 => TrailerBrakeStrokeAxle3Left2566746622::SensorError,
            5 => TrailerBrakeStrokeAxle3Left2566746622::Reserved,
            3 => TrailerBrakeStrokeAxle3Left2566746622::DraggingBrake,
            2 => TrailerBrakeStrokeAxle3Left2566746622::Overstroke,
            1 => TrailerBrakeStrokeAxle3Left2566746622::Nonfunctioning,
            0 => TrailerBrakeStrokeAxle3Left2566746622::Ok,
            value => TrailerBrakeStrokeAxle3Left2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle2Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TrailerBrakeStrokeAxle2Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TrailerBrakeStrokeAxle2Right2566746622::NotAvailable,
            6 => TrailerBrakeStrokeAxle2Right2566746622::SensorError,
            5 => TrailerBrakeStrokeAxle2Right2566746622::Reserved,
            3 => TrailerBrakeStrokeAxle2Right2566746622::DraggingBrake,
            2 => TrailerBrakeStrokeAxle2Right2566746622::Overstroke,
            1 => TrailerBrakeStrokeAxle2Right2566746622::Nonfunctioning,
            0 => TrailerBrakeStrokeAxle2Right2566746622::Ok,
            value => TrailerBrakeStrokeAxle2Right2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle2Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TrailerBrakeStrokeAxle2Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TrailerBrakeStrokeAxle2Left2566746622::NotAvailable,
            6 => TrailerBrakeStrokeAxle2Left2566746622::SensorError,
            5 => TrailerBrakeStrokeAxle2Left2566746622::Reserved,
            3 => TrailerBrakeStrokeAxle2Left2566746622::DraggingBrake,
            2 => TrailerBrakeStrokeAxle2Left2566746622::Overstroke,
            1 => TrailerBrakeStrokeAxle2Left2566746622::Nonfunctioning,
            0 => TrailerBrakeStrokeAxle2Left2566746622::Ok,
            value => TrailerBrakeStrokeAxle2Left2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle1Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TrailerBrakeStrokeAxle1Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TrailerBrakeStrokeAxle1Right2566746622::NotAvailable,
            6 => TrailerBrakeStrokeAxle1Right2566746622::SensorError,
            5 => TrailerBrakeStrokeAxle1Right2566746622::Reserved,
            3 => TrailerBrakeStrokeAxle1Right2566746622::DraggingBrake,
            2 => TrailerBrakeStrokeAxle1Right2566746622::Overstroke,
            1 => TrailerBrakeStrokeAxle1Right2566746622::Nonfunctioning,
            0 => TrailerBrakeStrokeAxle1Right2566746622::Ok,
            value => TrailerBrakeStrokeAxle1Right2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TrailerBrakeStrokeAxle1Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TrailerBrakeStrokeAxle1Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TrailerBrakeStrokeAxle1Left2566746622::NotAvailable,
            6 => TrailerBrakeStrokeAxle1Left2566746622::SensorError,
            5 => TrailerBrakeStrokeAxle1Left2566746622::Reserved,
            3 => TrailerBrakeStrokeAxle1Left2566746622::DraggingBrake,
            2 => TrailerBrakeStrokeAxle1Left2566746622::Overstroke,
            1 => TrailerBrakeStrokeAxle1Left2566746622::Nonfunctioning,
            0 => TrailerBrakeStrokeAxle1Left2566746622::Ok,
            value => TrailerBrakeStrokeAxle1Left2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle5Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TractorBrakeStrokeAxle5Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TractorBrakeStrokeAxle5Right2566746622::NotAvailable,
            6 => TractorBrakeStrokeAxle5Right2566746622::SensorError,
            5 => TractorBrakeStrokeAxle5Right2566746622::Reserved,
            3 => TractorBrakeStrokeAxle5Right2566746622::DraggingBrake,
            2 => TractorBrakeStrokeAxle5Right2566746622::Overstroke,
            1 => TractorBrakeStrokeAxle5Right2566746622::Nonfunctioning,
            0 => TractorBrakeStrokeAxle5Right2566746622::Ok,
            value => TractorBrakeStrokeAxle5Right2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle5Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TractorBrakeStrokeAxle5Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TractorBrakeStrokeAxle5Left2566746622::NotAvailable,
            6 => TractorBrakeStrokeAxle5Left2566746622::SensorError,
            5 => TractorBrakeStrokeAxle5Left2566746622::Reserved,
            3 => TractorBrakeStrokeAxle5Left2566746622::DraggingBrake,
            2 => TractorBrakeStrokeAxle5Left2566746622::Overstroke,
            1 => TractorBrakeStrokeAxle5Left2566746622::Nonfunctioning,
            0 => TractorBrakeStrokeAxle5Left2566746622::Ok,
            value => TractorBrakeStrokeAxle5Left2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle4Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TractorBrakeStrokeAxle4Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TractorBrakeStrokeAxle4Right2566746622::NotAvailable,
            6 => TractorBrakeStrokeAxle4Right2566746622::SensorError,
            5 => TractorBrakeStrokeAxle4Right2566746622::Reserved,
            3 => TractorBrakeStrokeAxle4Right2566746622::DraggingBrake,
            2 => TractorBrakeStrokeAxle4Right2566746622::Overstroke,
            1 => TractorBrakeStrokeAxle4Right2566746622::Nonfunctioning,
            0 => TractorBrakeStrokeAxle4Right2566746622::Ok,
            value => TractorBrakeStrokeAxle4Right2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle4Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TractorBrakeStrokeAxle4Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TractorBrakeStrokeAxle4Left2566746622::NotAvailable,
            6 => TractorBrakeStrokeAxle4Left2566746622::SensorError,
            5 => TractorBrakeStrokeAxle4Left2566746622::Reserved,
            3 => TractorBrakeStrokeAxle4Left2566746622::DraggingBrake,
            2 => TractorBrakeStrokeAxle4Left2566746622::Overstroke,
            1 => TractorBrakeStrokeAxle4Left2566746622::Nonfunctioning,
            0 => TractorBrakeStrokeAxle4Left2566746622::Ok,
            value => TractorBrakeStrokeAxle4Left2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle3Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TractorBrakeStrokeAxle3Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TractorBrakeStrokeAxle3Right2566746622::NotAvailable,
            6 => TractorBrakeStrokeAxle3Right2566746622::SensorError,
            5 => TractorBrakeStrokeAxle3Right2566746622::Reserved,
            3 => TractorBrakeStrokeAxle3Right2566746622::DraggingBrake,
            2 => TractorBrakeStrokeAxle3Right2566746622::Overstroke,
            1 => TractorBrakeStrokeAxle3Right2566746622::Nonfunctioning,
            0 => TractorBrakeStrokeAxle3Right2566746622::Ok,
            value => TractorBrakeStrokeAxle3Right2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle3Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TractorBrakeStrokeAxle3Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TractorBrakeStrokeAxle3Left2566746622::NotAvailable,
            6 => TractorBrakeStrokeAxle3Left2566746622::SensorError,
            5 => TractorBrakeStrokeAxle3Left2566746622::Reserved,
            3 => TractorBrakeStrokeAxle3Left2566746622::DraggingBrake,
            2 => TractorBrakeStrokeAxle3Left2566746622::Overstroke,
            1 => TractorBrakeStrokeAxle3Left2566746622::Nonfunctioning,
            0 => TractorBrakeStrokeAxle3Left2566746622::Ok,
            value => TractorBrakeStrokeAxle3Left2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle2Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TractorBrakeStrokeAxle2Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TractorBrakeStrokeAxle2Right2566746622::NotAvailable,
            6 => TractorBrakeStrokeAxle2Right2566746622::SensorError,
            5 => TractorBrakeStrokeAxle2Right2566746622::Reserved,
            3 => TractorBrakeStrokeAxle2Right2566746622::DraggingBrake,
            2 => TractorBrakeStrokeAxle2Right2566746622::Overstroke,
            1 => TractorBrakeStrokeAxle2Right2566746622::Nonfunctioning,
            0 => TractorBrakeStrokeAxle2Right2566746622::Ok,
            value => TractorBrakeStrokeAxle2Right2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle2Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TractorBrakeStrokeAxle2Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TractorBrakeStrokeAxle2Left2566746622::NotAvailable,
            6 => TractorBrakeStrokeAxle2Left2566746622::SensorError,
            5 => TractorBrakeStrokeAxle2Left2566746622::Reserved,
            3 => TractorBrakeStrokeAxle2Left2566746622::DraggingBrake,
            2 => TractorBrakeStrokeAxle2Left2566746622::Overstroke,
            1 => TractorBrakeStrokeAxle2Left2566746622::Nonfunctioning,
            0 => TractorBrakeStrokeAxle2Left2566746622::Ok,
            value => TractorBrakeStrokeAxle2Left2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle1Right2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TractorBrakeStrokeAxle1Right2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TractorBrakeStrokeAxle1Right2566746622::NotAvailable,
            6 => TractorBrakeStrokeAxle1Right2566746622::SensorError,
            5 => TractorBrakeStrokeAxle1Right2566746622::Reserved,
            3 => TractorBrakeStrokeAxle1Right2566746622::DraggingBrake,
            2 => TractorBrakeStrokeAxle1Right2566746622::Overstroke,
            1 => TractorBrakeStrokeAxle1Right2566746622::Nonfunctioning,
            0 => TractorBrakeStrokeAxle1Right2566746622::Ok,
            value => TractorBrakeStrokeAxle1Right2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TractorBrakeStrokeAxle1Left2566746622 {
    NotAvailable,
    SensorError,
    Reserved,
    DraggingBrake,
    Overstroke,
    Nonfunctioning,
    Ok,
    XValue(u64),
}

impl From<u64> for TractorBrakeStrokeAxle1Left2566746622 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => TractorBrakeStrokeAxle1Left2566746622::NotAvailable,
            6 => TractorBrakeStrokeAxle1Left2566746622::SensorError,
            5 => TractorBrakeStrokeAxle1Left2566746622::Reserved,
            3 => TractorBrakeStrokeAxle1Left2566746622::DraggingBrake,
            2 => TractorBrakeStrokeAxle1Left2566746622::Overstroke,
            1 => TractorBrakeStrokeAxle1Left2566746622::Nonfunctioning,
            0 => TractorBrakeStrokeAxle1Left2566746622::Ok,
            value => TractorBrakeStrokeAxle1Left2566746622::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AirCompressorStatus2566827774 {
    NotAvailable,
    ErrorIndicator,
    CompressorActive,
    CompressorNotActive,
    XValue(u64),
}

impl From<u64> for AirCompressorStatus2566827774 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AirCompressorStatus2566827774::NotAvailable,
            2 => AirCompressorStatus2566827774::ErrorIndicator,
            1 => AirCompressorStatus2566827774::CompressorActive,
            0 => AirCompressorStatus2566827774::CompressorNotActive,
            value => AirCompressorStatus2566827774::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RqedAccDistanceMode2566803966 {
    NotAvailable,
    ErrorCondition,
    NotDefined,
    RqedAccDistanceMode5,
    RqedAccDistanceMode4,
    RqedAccDistanceMode3,
    RqedAccDistanceMode2,
    RqedAccDistanceMode1,
    XValue(u64),
}

impl From<u64> for RqedAccDistanceMode2566803966 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => RqedAccDistanceMode2566803966::NotAvailable,
            6 => RqedAccDistanceMode2566803966::ErrorCondition,
            5 => RqedAccDistanceMode2566803966::NotDefined,
            4 => RqedAccDistanceMode2566803966::RqedAccDistanceMode5,
            3 => RqedAccDistanceMode2566803966::RqedAccDistanceMode4,
            2 => RqedAccDistanceMode2566803966::RqedAccDistanceMode3,
            1 => RqedAccDistanceMode2566803966::RqedAccDistanceMode2,
            0 => RqedAccDistanceMode2566803966::RqedAccDistanceMode1,
            value => RqedAccDistanceMode2566803966::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AccDistanceAlertSignal2432593918 {
    TakeNoAction,
    Reserved,
    AccdasActive,
    AccdasNotActive,
    XValue(u64),
}

impl From<u64> for AccDistanceAlertSignal2432593918 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AccDistanceAlertSignal2432593918::TakeNoAction,
            2 => AccDistanceAlertSignal2432593918::Reserved,
            1 => AccDistanceAlertSignal2432593918::AccdasActive,
            0 => AccDistanceAlertSignal2432593918::AccdasNotActive,
            value => AccDistanceAlertSignal2432593918::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AccSystemShutoffWarning2432593918 {
    TakeNoAction,
    Reserved,
    AccssowActive,
    AccssowNotActive,
    XValue(u64),
}

impl From<u64> for AccSystemShutoffWarning2432593918 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AccSystemShutoffWarning2432593918::TakeNoAction,
            2 => AccSystemShutoffWarning2432593918::Reserved,
            1 => AccSystemShutoffWarning2432593918::AccssowActive,
            0 => AccSystemShutoffWarning2432593918::AccssowNotActive,
            value => AccSystemShutoffWarning2432593918::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AccTargetDetected2432593918 {
    TakeNoAction,
    Reserved,
    TargetDetected,
    NoTargetsDetected,
    XValue(u64),
}

impl From<u64> for AccTargetDetected2432593918 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => AccTargetDetected2432593918::TakeNoAction,
            2 => AccTargetDetected2432593918::Reserved,
            1 => AccTargetDetected2432593918::TargetDetected,
            0 => AccTargetDetected2432593918::NoTargetsDetected,
            value => AccTargetDetected2432593918::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AdptveCruiseCtrlSetDistanceMode2432593918 {
    NotAvailableNotValid,
    ErrorCondition,
    ConventionalCruiseCtrlMode,
    AccDistanceMode5,
    AccDistanceMode4,
    AccDistanceMode3,
    AccDistanceMode2,
    AccDistanceMode1,
    XValue(u64),
}

impl From<u64> for AdptveCruiseCtrlSetDistanceMode2432593918 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => AdptveCruiseCtrlSetDistanceMode2432593918::NotAvailableNotValid,
            6 => AdptveCruiseCtrlSetDistanceMode2432593918::ErrorCondition,
            5 => AdptveCruiseCtrlSetDistanceMode2432593918::ConventionalCruiseCtrlMode,
            4 => AdptveCruiseCtrlSetDistanceMode2432593918::AccDistanceMode5,
            3 => AdptveCruiseCtrlSetDistanceMode2432593918::AccDistanceMode4,
            2 => AdptveCruiseCtrlSetDistanceMode2432593918::AccDistanceMode3,
            1 => AdptveCruiseCtrlSetDistanceMode2432593918::AccDistanceMode2,
            0 => AdptveCruiseCtrlSetDistanceMode2432593918::AccDistanceMode1,
            value => AdptveCruiseCtrlSetDistanceMode2432593918::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum AdaptiveCruiseCtrlMode2432593918 {
    NotAvailableNotValid,
    DsbldErrrCndtnUsdTIndctThtAccIs,
    FinishMode,
    HldMdUsdTIndctThtAccHsLstThPrvs,
    OvertakeMode,
    DstncCtrlActvUsdTIndctThtAccIsO,
    SpeedCtrlActive,
    OffUsdTIndctAccIsEnbldInClbCnfg,
    XValue(u64),
}

impl From<u64> for AdaptiveCruiseCtrlMode2432593918 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => AdaptiveCruiseCtrlMode2432593918::NotAvailableNotValid,
            6 => AdaptiveCruiseCtrlMode2432593918::DsbldErrrCndtnUsdTIndctThtAccIs,
            5 => AdaptiveCruiseCtrlMode2432593918::FinishMode,
            4 => AdaptiveCruiseCtrlMode2432593918::HldMdUsdTIndctThtAccHsLstThPrvs,
            3 => AdaptiveCruiseCtrlMode2432593918::OvertakeMode,
            2 => AdaptiveCruiseCtrlMode2432593918::DstncCtrlActvUsdTIndctThtAccIsO,
            1 => AdaptiveCruiseCtrlMode2432593918::SpeedCtrlActive,
            0 => AdaptiveCruiseCtrlMode2432593918::OffUsdTIndctAccIsEnbldInClbCnfg,
            value => AdaptiveCruiseCtrlMode2432593918::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum ControlByte2565406462 {
    CannotRespond,
    AccessDenied,
    Nack,
    Ack,
    XValue(u64),
}

impl From<u64> for ControlByte2565406462 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => ControlByte2565406462::CannotRespond,
            2 => ControlByte2565406462::AccessDenied,
            1 => ControlByte2565406462::Nack,
            0 => ControlByte2565406462::Ack,
            value => ControlByte2565406462::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum Status2OfDoors2566803198 {
    NotAvailable,
    Error,
    AtLeast1BusDoorEnabled,
    AllBusDoorsAreDisabled,
    XValue(u64),
}

impl From<u64> for Status2OfDoors2566803198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => Status2OfDoors2566803198::NotAvailable,
            2 => Status2OfDoors2566803198::Error,
            1 => Status2OfDoors2566803198::AtLeast1BusDoorEnabled,
            0 => Status2OfDoors2566803198::AllBusDoorsAreDisabled,
            value => Status2OfDoors2566803198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RampWheelChairLiftPos2566803198 {
    NotAvailable,
    Error,
    OutsideBus,
    InsideBus,
    XValue(u64),
}

impl From<u64> for RampWheelChairLiftPos2566803198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => RampWheelChairLiftPos2566803198::NotAvailable,
            2 => RampWheelChairLiftPos2566803198::Error,
            1 => RampWheelChairLiftPos2566803198::OutsideBus,
            0 => RampWheelChairLiftPos2566803198::InsideBus,
            value => RampWheelChairLiftPos2566803198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PosOfDoors2566803198 {
    NotAvailable,
    Error,
    X1101notDefined,
    AllDoorsClosed,
    ClosingLastDoor,
    AtLeast1DoorIsOpen,
    XValue(u64),
}

impl From<u64> for PosOfDoors2566803198 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => PosOfDoors2566803198::NotAvailable,
            14 => PosOfDoors2566803198::Error,
            3 => PosOfDoors2566803198::X1101notDefined,
            2 => PosOfDoors2566803198::AllDoorsClosed,
            1 => PosOfDoors2566803198::ClosingLastDoor,
            0 => PosOfDoors2566803198::AtLeast1DoorIsOpen,
            value => PosOfDoors2566803198::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FifthWheelRollWarningIndicator2565870334 {
    NotAvailable,
    Error,
    LimitExceeded,
    LimitNotExceeded,
    XValue(u64),
}

impl From<u64> for FifthWheelRollWarningIndicator2565870334 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FifthWheelRollWarningIndicator2565870334::NotAvailable,
            2 => FifthWheelRollWarningIndicator2565870334::Error,
            1 => FifthWheelRollWarningIndicator2565870334::LimitExceeded,
            0 => FifthWheelRollWarningIndicator2565870334::LimitNotExceeded,
            value => FifthWheelRollWarningIndicator2565870334::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FifthWheelSliderLockIndicator2566762238 {
    NotAvailable,
    Error,
    Locked,
    NotLocked,
    XValue(u64),
}

impl From<u64> for FifthWheelSliderLockIndicator2566762238 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FifthWheelSliderLockIndicator2566762238::NotAvailable,
            2 => FifthWheelSliderLockIndicator2566762238::Error,
            1 => FifthWheelSliderLockIndicator2566762238::Locked,
            0 => FifthWheelSliderLockIndicator2566762238::NotLocked,
            value => FifthWheelSliderLockIndicator2566762238::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FfthWhlLckCoupleStatusIndicator2566762238 {
    NotAvailable,
    Error,
    SuccessfulCoupleDetected,
    IncmpltBdCplTrckShuldNotBeMoved,
    XValue(u64),
}

impl From<u64> for FfthWhlLckCoupleStatusIndicator2566762238 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FfthWhlLckCoupleStatusIndicator2566762238::NotAvailable,
            2 => FfthWhlLckCoupleStatusIndicator2566762238::Error,
            1 => FfthWhlLckCoupleStatusIndicator2566762238::SuccessfulCoupleDetected,
            0 => FfthWhlLckCoupleStatusIndicator2566762238::IncmpltBdCplTrckShuldNotBeMoved,
            value => FfthWhlLckCoupleStatusIndicator2566762238::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FfthWhlLckRadyToCoupleIndicator2566762238 {
    NotAvailable,
    Error,
    LockOpenReadyToCouple,
    LockNotOpenNotReadyToCouple,
    XValue(u64),
}

impl From<u64> for FfthWhlLckRadyToCoupleIndicator2566762238 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => FfthWhlLckRadyToCoupleIndicator2566762238::NotAvailable,
            2 => FfthWhlLckRadyToCoupleIndicator2566762238::Error,
            1 => FfthWhlLckRadyToCoupleIndicator2566762238::LockOpenReadyToCouple,
            0 => FfthWhlLckRadyToCoupleIndicator2566762238::LockNotOpenNotReadyToCouple,
            value => FfthWhlLckRadyToCoupleIndicator2566762238::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum FifthWheelErrorStatus2566762238 {
    NotAvailable,
    KingpinLockOpen,
    KingpinMissingMoreThan5Seconds,
    CouplingTimingError,
    CouplingSequenceErrorKingpin,
    CouplingSequenceError,
    NotUsed,
    KingpinLocksOpenAtStartup,
    LocksClosedNoKingpinAtStartup,
    ImproperCouple,
    XValue(u64),
}

impl From<u64> for FifthWheelErrorStatus2566762238 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => FifthWheelErrorStatus2566762238::NotAvailable,
            9 => FifthWheelErrorStatus2566762238::KingpinLockOpen,
            8 => FifthWheelErrorStatus2566762238::KingpinMissingMoreThan5Seconds,
            7 => FifthWheelErrorStatus2566762238::CouplingTimingError,
            6 => FifthWheelErrorStatus2566762238::CouplingSequenceErrorKingpin,
            5 => FifthWheelErrorStatus2566762238::CouplingSequenceError,
            14 => FifthWheelErrorStatus2566762238::NotUsed,
            2 => FifthWheelErrorStatus2566762238::KingpinLocksOpenAtStartup,
            1 => FifthWheelErrorStatus2566762238::LocksClosedNoKingpinAtStartup,
            0 => FifthWheelErrorStatus2566762238::ImproperCouple,
            value => FifthWheelErrorStatus2566762238::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PitchAndRollCompensated2364543998 {
    NotAvailable,
    CompensationOn,
    XValue(u64),
}

impl From<u64> for PitchAndRollCompensated2364543998 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => PitchAndRollCompensated2364543998::NotAvailable,
            0 => PitchAndRollCompensated2364543998::CompensationOn,
            value => PitchAndRollCompensated2364543998::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PitchRateFigureOfMerit2364543998 {
    NotAvailable,
    PtchRtDgrddDtIsSspctDtEnvrnmntl,
    XValue(u64),
}

impl From<u64> for PitchRateFigureOfMerit2364543998 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => PitchRateFigureOfMerit2364543998::NotAvailable,
            0 => PitchRateFigureOfMerit2364543998::PtchRtDgrddDtIsSspctDtEnvrnmntl,
            value => PitchRateFigureOfMerit2364543998::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum RollAngleFigureOfMerit2364543998 {
    NotAvailable,
    RllAnglDgrddDtIsSspctDtEnvrnmnt,
    XValue(u64),
}

impl From<u64> for RollAngleFigureOfMerit2364543998 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => RollAngleFigureOfMerit2364543998::NotAvailable,
            0 => RollAngleFigureOfMerit2364543998::RllAnglDgrddDtIsSspctDtEnvrnmnt,
            value => RollAngleFigureOfMerit2364543998::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum PitchAngleFigureOfMerit2364543998 {
    NotAvailable,
    PtchAnglDgrddDtIsSspctDtEnvrnmn,
    XValue(u64),
}

impl From<u64> for PitchAngleFigureOfMerit2364543998 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => PitchAngleFigureOfMerit2364543998::NotAvailable,
            0 => PitchAngleFigureOfMerit2364543998::PtchAnglDgrddDtIsSspctDtEnvrnmn,
            value => PitchAngleFigureOfMerit2364543998::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransOilLevelMeasurementStatus2566846718 {
    NotAvailable,
    Error,
    ConditionsNotValidOther,
    NotDefined,
    CndtionsNotValidEngSpeedTooHigh,
    CnditionsNotValidEngSpeedTooLow,
    CndtionsNotValidVehicleNotLevel,
    CndtnsNtVldVhclMvngOtptShftSpdT,
    CndtnsNtVldTrnsFluidTempTooHigh,
    CndtnsNtVldTransFluidTempTooLow,
    ConditionsNotValidTransInGear,
    CndtnsNtVldSttlngTmrStllCntngDw,
    CndtnsVldFrTrnsOlLvlMeasurement,
    XValue(u64),
}

impl From<u64> for TransOilLevelMeasurementStatus2566846718 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => TransOilLevelMeasurementStatus2566846718::NotAvailable,
            14 => TransOilLevelMeasurementStatus2566846718::Error,
            13 => TransOilLevelMeasurementStatus2566846718::ConditionsNotValidOther,
            12 => TransOilLevelMeasurementStatus2566846718::NotDefined,
            8 => TransOilLevelMeasurementStatus2566846718::CndtionsNotValidEngSpeedTooHigh,
            7 => TransOilLevelMeasurementStatus2566846718::CnditionsNotValidEngSpeedTooLow,
            6 => TransOilLevelMeasurementStatus2566846718::CndtionsNotValidVehicleNotLevel,
            5 => TransOilLevelMeasurementStatus2566846718::CndtnsNtVldVhclMvngOtptShftSpdT,
            4 => TransOilLevelMeasurementStatus2566846718::CndtnsNtVldTrnsFluidTempTooHigh,
            3 => TransOilLevelMeasurementStatus2566846718::CndtnsNtVldTransFluidTempTooLow,
            2 => TransOilLevelMeasurementStatus2566846718::ConditionsNotValidTransInGear,
            1 => TransOilLevelMeasurementStatus2566846718::CndtnsNtVldSttlngTmrStllCntngDw,
            0 => TransOilLevelMeasurementStatus2566846718::CndtnsVldFrTrnsOlLvlMeasurement,
            value => TransOilLevelMeasurementStatus2566846718::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum TransOilLevelCountdownTimer2566846718 {
    NotAvailable,
    Error,
    ThirteenMinutes,
    TwelveMinutes,
    ElevenMinutes,
    TenMinutes,
    NineMinutes,
    EightMinutes,
    SevenMinutes,
    SixMinutes,
    FiveMinutes,
    FourMinutes,
    ThreeMinutes,
    TwoMinutes,
    OneMinute,
    LessThan1Minute,
    XValue(u64),
}

impl From<u64> for TransOilLevelCountdownTimer2566846718 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            15 => TransOilLevelCountdownTimer2566846718::NotAvailable,
            14 => TransOilLevelCountdownTimer2566846718::Error,
            13 => TransOilLevelCountdownTimer2566846718::ThirteenMinutes,
            12 => TransOilLevelCountdownTimer2566846718::TwelveMinutes,
            11 => TransOilLevelCountdownTimer2566846718::ElevenMinutes,
            10 => TransOilLevelCountdownTimer2566846718::TenMinutes,
            9 => TransOilLevelCountdownTimer2566846718::NineMinutes,
            8 => TransOilLevelCountdownTimer2566846718::EightMinutes,
            7 => TransOilLevelCountdownTimer2566846718::SevenMinutes,
            6 => TransOilLevelCountdownTimer2566846718::SixMinutes,
            5 => TransOilLevelCountdownTimer2566846718::FiveMinutes,
            4 => TransOilLevelCountdownTimer2566846718::FourMinutes,
            3 => TransOilLevelCountdownTimer2566846718::ThreeMinutes,
            2 => TransOilLevelCountdownTimer2566846718::TwoMinutes,
            1 => TransOilLevelCountdownTimer2566846718::OneMinute,
            0 => TransOilLevelCountdownTimer2566846718::LessThan1Minute,
            value => TransOilLevelCountdownTimer2566846718::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum WrlessCommunicationNetworkType22566760702 {
    SatelliteNetwork,
    WirelessLan2,
    WirelessLan1,
    CellularNetwork2,
    CellularNetwork1,
    XValue(u64),
}

impl From<u64> for WrlessCommunicationNetworkType22566760702 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            4 => WrlessCommunicationNetworkType22566760702::SatelliteNetwork,
            3 => WrlessCommunicationNetworkType22566760702::WirelessLan2,
            2 => WrlessCommunicationNetworkType22566760702::WirelessLan1,
            1 => WrlessCommunicationNetworkType22566760702::CellularNetwork2,
            0 => WrlessCommunicationNetworkType22566760702::CellularNetwork1,
            value => WrlessCommunicationNetworkType22566760702::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum NetworkAntennaStatus22566760702 {
    On,
    Off,
    XValue(u64),
}

impl From<u64> for NetworkAntennaStatus22566760702 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => NetworkAntennaStatus22566760702::On,
            0 => NetworkAntennaStatus22566760702::Off,
            value => NetworkAntennaStatus22566760702::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum NetworkServiceStatus22566760702 {
    RoamingService,
    LocalService,
    XValue(u64),
}

impl From<u64> for NetworkServiceStatus22566760702 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => NetworkServiceStatus22566760702::RoamingService,
            0 => NetworkServiceStatus22566760702::LocalService,
            value => NetworkServiceStatus22566760702::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum NetworkTransceiverStatus22566760702 {
    On,
    Off,
    XValue(u64),
}

impl From<u64> for NetworkTransceiverStatus22566760702 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => NetworkTransceiverStatus22566760702::On,
            0 => NetworkTransceiverStatus22566760702::Off,
            value => NetworkTransceiverStatus22566760702::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum WrlessCommunicationNetworkType12566760958 {
    SatelliteNetwork,
    CellularNetwork2,
    CellularNetwork1,
    WirelessLan2,
    WirelessLan1,
    XValue(u64),
}

impl From<u64> for WrlessCommunicationNetworkType12566760958 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            4 => WrlessCommunicationNetworkType12566760958::SatelliteNetwork,
            1 => WrlessCommunicationNetworkType12566760958::CellularNetwork2,
            0 => WrlessCommunicationNetworkType12566760958::CellularNetwork1,
            3 => WrlessCommunicationNetworkType12566760958::WirelessLan2,
            2 => WrlessCommunicationNetworkType12566760958::WirelessLan1,
            value => WrlessCommunicationNetworkType12566760958::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum NetworkAntennaStatus12566760958 {
    On,
    Off,
    XValue(u64),
}

impl From<u64> for NetworkAntennaStatus12566760958 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => NetworkAntennaStatus12566760958::On,
            0 => NetworkAntennaStatus12566760958::Off,
            value => NetworkAntennaStatus12566760958::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum NetworkServiceStatus12566760958 {
    RoamingService,
    LocalService,
    XValue(u64),
}

impl From<u64> for NetworkServiceStatus12566760958 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => NetworkServiceStatus12566760958::RoamingService,
            0 => NetworkServiceStatus12566760958::LocalService,
            value => NetworkServiceStatus12566760958::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum NetworkTransceiverStatus12566760958 {
    On,
    Off,
    XValue(u64),
}

impl From<u64> for NetworkTransceiverStatus12566760958 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            1 => NetworkTransceiverStatus12566760958::On,
            0 => NetworkTransceiverStatus12566760958::Off,
            value => NetworkTransceiverStatus12566760958::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VoltageRegulatorEnabled2633869310 {
    NotAvailable,
    Error,
    RegulatingVoltage,
    NtRegulatingVoltageUnitDisabled,
    XValue(u64),
}

impl From<u64> for VoltageRegulatorEnabled2633869310 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => VoltageRegulatorEnabled2633869310::NotAvailable,
            2 => VoltageRegulatorEnabled2633869310::Error,
            1 => VoltageRegulatorEnabled2633869310::RegulatingVoltage,
            0 => VoltageRegulatorEnabled2633869310::NtRegulatingVoltageUnitDisabled,
            value => VoltageRegulatorEnabled2633869310::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VoltageRegulatorSoftStartState2633869310 {
    NotAvailable,
    Error,
    SoftStartIsActive,
    SoftStartIsInactive,
    XValue(u64),
}

impl From<u64> for VoltageRegulatorSoftStartState2633869310 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => VoltageRegulatorSoftStartState2633869310::NotAvailable,
            2 => VoltageRegulatorSoftStartState2633869310::Error,
            1 => VoltageRegulatorSoftStartState2633869310::SoftStartIsActive,
            0 => VoltageRegulatorSoftStartState2633869310::SoftStartIsInactive,
            value => VoltageRegulatorSoftStartState2633869310::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VltgRgltrUndrfrqncyCmpnstnEnbld2633869310 {
    NotAvailable,
    Error,
    UndrfrquencyCompensationEnabled,
    UndrfrqencyCompensationDisabled,
    XValue(u64),
}

impl From<u64> for VltgRgltrUndrfrqncyCmpnstnEnbld2633869310 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            3 => VltgRgltrUndrfrqncyCmpnstnEnbld2633869310::NotAvailable,
            2 => VltgRgltrUndrfrqncyCmpnstnEnbld2633869310::Error,
            1 => VltgRgltrUndrfrqncyCmpnstnEnbld2633869310::UndrfrquencyCompensationEnabled,
            0 => VltgRgltrUndrfrqncyCmpnstnEnbld2633869310::UndrfrqencyCompensationDisabled,
            value => VltgRgltrUndrfrqncyCmpnstnEnbld2633869310::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VltgRgltrVArPwrFctrOprtingMode2633869310 {
    NotAvailable,
    Error,
    Reserved,
    VArRegulationEnabled,
    PowerFactorRegulationEnabled,
    VArPwrFactorRegulationDisabled,
    XValue(u64),
}

impl From<u64> for VltgRgltrVArPwrFctrOprtingMode2633869310 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => VltgRgltrVArPwrFctrOprtingMode2633869310::NotAvailable,
            6 => VltgRgltrVArPwrFctrOprtingMode2633869310::Error,
            5 => VltgRgltrVArPwrFctrOprtingMode2633869310::Reserved,
            2 => VltgRgltrVArPwrFctrOprtingMode2633869310::VArRegulationEnabled,
            1 => VltgRgltrVArPwrFctrOprtingMode2633869310::PowerFactorRegulationEnabled,
            0 => VltgRgltrVArPwrFctrOprtingMode2633869310::VArPwrFactorRegulationDisabled,
            value => VltgRgltrVArPwrFctrOprtingMode2633869310::XValue(value),
        }
    }
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u64)]
pub enum VltgRglatorLoadCompensationMode2633869310 {
    NotAvailable,
    Error,
    Reserved,
    IrLineDropCompensationEnabled,
    VoltageDroopCompensationEnabled,
    LoadCompensationDisabled,
    XValue(u64),
}

impl From<u64> for VltgRglatorLoadCompensationMode2633869310 {
    #[allow(dead_code)]
    fn from(val: u64) -> Self {
        match val {
            7 => VltgRglatorLoadCompensationMode2633869310::NotAvailable,
            6 => VltgRglatorLoadCompensationMode2633869310::Error,
            5 => VltgRglatorLoadCompensationMode2633869310::Reserved,
            2 => VltgRglatorLoadCompensationMode2633869310::IrLineDropCompensationEnabled,
            1 => VltgRglatorLoadCompensationMode2633869310::VoltageDroopCompensationEnabled,
            0 => VltgRglatorLoadCompensationMode2633869310::LoadCompensationDisabled,
            value => VltgRglatorLoadCompensationMode2633869310::XValue(value),
        }
    }
}

/// Text Display
#[allow(dead_code)]
#[derive(Debug)]
pub struct Disp1 {
    frame_payload: Vec<u8>,
}

impl Disp1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Disp1 {
        Disp1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Disp1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2561212158 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Disp1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read TextDisplayIndex signal from can frame
    #[allow(dead_code)]
    pub fn textdisplayindex(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// This parameter describes the status for the display how to show the information.
    #[allow(dead_code)]
    pub fn textdisplayinstructions(&self) -> TextDisplayInstructions2561212158 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TextDisplayInstructions2561212158::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// Door ramp control
#[allow(dead_code)]
#[derive(Debug)]
pub struct Drc {
    frame_payload: Vec<u8>,
}

impl Drc {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Drc {
        Drc { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Drc, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566746366 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Drc::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read MovementStatusOfRamp3 signal from can frame
    #[allow(dead_code)]
    pub fn movementstatusoframp3(&self) -> MovementStatusOfRamp32566746366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MovementStatusOfRamp32566746366::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read EnableStatusOfRamp3 signal from can frame
    #[allow(dead_code)]
    pub fn enablestatusoframp3(&self) -> EnableStatusOfRamp32566746366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableStatusOfRamp32566746366::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Read RetractStatusOfRamp3 signal from can frame
    #[allow(dead_code)]
    pub fn retractstatusoframp3(&self) -> RetractStatusOfRamp32566746366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RetractStatusOfRamp32566746366::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Read MovementStatusOfRamp2 signal from can frame
    #[allow(dead_code)]
    pub fn movementstatusoframp2(&self) -> MovementStatusOfRamp22566746366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MovementStatusOfRamp22566746366::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Read EnableStatusOfRamp2 signal from can frame
    #[allow(dead_code)]
    pub fn enablestatusoframp2(&self) -> EnableStatusOfRamp22566746366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableStatusOfRamp22566746366::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Read RetractStatusOfRamp2 signal from can frame
    #[allow(dead_code)]
    pub fn retractstatusoframp2(&self) -> RetractStatusOfRamp22566746366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RetractStatusOfRamp22566746366::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Read MovementStatusOfRamp1 signal from can frame
    #[allow(dead_code)]
    pub fn movementstatusoframp1(&self) -> MovementStatusOfRamp12566746366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MovementStatusOfRamp12566746366::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Read EnableStatusOfRamp1 signal from can frame
    #[allow(dead_code)]
    pub fn enablestatusoframp1(&self) -> EnableStatusOfRamp12566746366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableStatusOfRamp12566746366::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Read RetractStatusOfRamp1 signal from can frame
    #[allow(dead_code)]
    pub fn retractstatusoframp1(&self) -> RetractStatusOfRamp12566746366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RetractStatusOfRamp12566746366::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Engine Configuration 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ec2 {
    frame_payload: Vec<u8>,
}

impl Ec2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ec2 {
        Ec2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ec2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566750206 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ec2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The number of cranking cycles that will be performed before ending the start attempt.
    #[allow(dead_code)]
    pub fn maxcrankattemptsperstartattempt(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Electronic Engine Controller 7
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eec7 {
    frame_payload: Vec<u8>,
}

impl Eec7 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eec7 {
        Eec7 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eec7, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566755582 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eec7::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The position of the second exhaust gas recirculation valve expressed as a percentage of full travel.
    #[allow(dead_code)]
    pub fn engexhstgsrcirculationvalve2pos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.002500
    }

    /// The position of the exhaust gas recirculation valve expressed as a percentage of full travel.
    #[allow(dead_code)]
    pub fn engexhstgsrecirculationvalvepos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.002500
    }
}

/// Electronic Engine Controller 8
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eec8 {
    frame_payload: Vec<u8>,
}

impl Eec8 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eec8 {
        Eec8 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eec8, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566746110 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eec8::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Desired percentage of maximum Exhaust Gas Recirculation (EGR) valve opening for valve 2.
    #[allow(dead_code)]
    pub fn engexhstgsrcrculationvalve2ctrl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.002500
    }
}

/// Engine Fluid Level/Pressure 5
#[allow(dead_code)]
#[derive(Debug)]
pub struct EflP5 {
    frame_payload: Vec<u8>,
}

impl EflP5 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> EflP5 {
        EflP5 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = EflP5, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566752510 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| EflP5::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #4.
    #[allow(dead_code)]
    pub fn engintkvlvacttonoilpressforcyl4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #3.
    #[allow(dead_code)]
    pub fn engintkvlvacttonoilpressforcyl3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #2.
    #[allow(dead_code)]
    pub fn engintkvlvacttonoilpressforcyl2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #1.
    #[allow(dead_code)]
    pub fn engintkvlvacttonoilpressforcyl1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// Engine Fluid Level/Pressure 6
#[allow(dead_code)]
#[derive(Debug)]
pub struct EflP6 {
    frame_payload: Vec<u8>,
}

impl EflP6 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> EflP6 {
        EflP6 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = EflP6, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566752254 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| EflP6::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #8.
    #[allow(dead_code)]
    pub fn engintkvlvacttonoilpressforcyl8(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #7.
    #[allow(dead_code)]
    pub fn engintkvlvacttonoilpressforcyl7(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #6.
    #[allow(dead_code)]
    pub fn engintkvlvacttonoilpressforcyl6(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #5.
    #[allow(dead_code)]
    pub fn engintkvlvacttonoilpressforcyl5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// Engine Fluid Level/Pressure 7
#[allow(dead_code)]
#[derive(Debug)]
pub struct EflP7 {
    frame_payload: Vec<u8>,
}

impl EflP7 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> EflP7 {
        EflP7 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = EflP7, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566751998 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| EflP7::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #12.
    #[allow(dead_code)]
    pub fn engintkvlvacttnoilpressforcyl12(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #11.
    #[allow(dead_code)]
    pub fn engintkvlvacttnoilpressforcyl11(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #10.
    #[allow(dead_code)]
    pub fn engintkvlvacttnoilpressforcyl10(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #9.
    #[allow(dead_code)]
    pub fn engintkvlvacttonoilpressforcyl9(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// Engine Fluid Level/Pressure 8
#[allow(dead_code)]
#[derive(Debug)]
pub struct EflP8 {
    frame_payload: Vec<u8>,
}

impl EflP8 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> EflP8 {
        EflP8 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = EflP8, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566751742 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| EflP8::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #16.
    #[allow(dead_code)]
    pub fn engintkvlvacttnoilpressforcyl16(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #15.
    #[allow(dead_code)]
    pub fn engintkvlvacttnoilpressforcyl15(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #14.
    #[allow(dead_code)]
    pub fn engintkvlvacttnoilpressforcyl14(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #13.
    #[allow(dead_code)]
    pub fn engintkvlvacttnoilpressforcyl13(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// Engine Fluid Level/Pressure 9
#[allow(dead_code)]
#[derive(Debug)]
pub struct EflP9 {
    frame_payload: Vec<u8>,
}

impl EflP9 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> EflP9 {
        EflP9 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = EflP9, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566751486 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| EflP9::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #20.
    #[allow(dead_code)]
    pub fn engintkvlvacttnoilpressforcyl20(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #19.
    #[allow(dead_code)]
    pub fn engintkvlvacttnoilpressforcyl19(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #18.
    #[allow(dead_code)]
    pub fn engintkvlvacttnoilpressforcyl18(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }

    /// The gage pressure of the oil in the hydraulic accumulator that powers the engine intake valve for cylinder #17.
    #[allow(dead_code)]
    pub fn engintkvlvacttnoilpressforcyl17(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// EGR Cooler Bypass
#[allow(dead_code)]
#[derive(Debug)]
pub struct Egrbv {
    frame_payload: Vec<u8>,
}

impl Egrbv {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Egrbv {
        Egrbv { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Egrbv, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2499641854 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Egrbv::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EGRCoolerBypassActuatorPostion signal from can frame
    #[allow(dead_code)]
    pub fn egrcoolerbypassactuatorpostion(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }
}

/// Engine Spark Voltage 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Esv1 {
    frame_payload: Vec<u8>,
}

impl Esv1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Esv1 {
        Esv1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Esv1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566748158 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Esv1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngSparkPlug4 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug3 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug2 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug1 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Engine Spark Voltage 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Esv2 {
    frame_payload: Vec<u8>,
}

impl Esv2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Esv2 {
        Esv2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Esv2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566747902 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Esv2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngSparkPlug8 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug8(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug7 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug7(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug6 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug6(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug5 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Engine Spark Voltage 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Esv3 {
    frame_payload: Vec<u8>,
}

impl Esv3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Esv3 {
        Esv3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Esv3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566747646 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Esv3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngSparkPlug12 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug12(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug11 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug11(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug10 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug10(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug9 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug9(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Engine Spark Voltage 4
#[allow(dead_code)]
#[derive(Debug)]
pub struct Esv4 {
    frame_payload: Vec<u8>,
}

impl Esv4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Esv4 {
        Esv4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Esv4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566747390 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Esv4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngSparkPlug16 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug16(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug15 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug15(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug14 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug14(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug13 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug13(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Engine Spark Voltage 5
#[allow(dead_code)]
#[derive(Debug)]
pub struct Esv5 {
    frame_payload: Vec<u8>,
}

impl Esv5 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Esv5 {
        Esv5 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Esv5, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566747134 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Esv5::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngSparkPlug20 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug20(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug19 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug19(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug18 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug18(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug17 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug17(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Engine Spark Voltage 6
#[allow(dead_code)]
#[derive(Debug)]
pub struct Esv6 {
    frame_payload: Vec<u8>,
}

impl Esv6 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Esv6 {
        Esv6 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Esv6, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566746878 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Esv6::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngSparkPlug24 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug24(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug23 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug23(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug22 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug22(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Read EngSparkPlug21 signal from can frame
    #[allow(dead_code)]
    pub fn engsparkplug21(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Forward Lane Image Command
#[allow(dead_code)]
#[derive(Debug)]
pub struct Flic {
    frame_payload: Vec<u8>,
}

impl Flic {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Flic {
        Flic { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Flic, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2561277694 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Flic::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read LaneDepartureWarningEnableCmd signal from can frame
    #[allow(dead_code)]
    pub fn lanedeparturewarningenablecmd(&self) -> LaneDepartureWarningEnableCmd2561277694 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LaneDepartureWarningEnableCmd2561277694::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// SAE J2012 DTC Display
#[allow(dead_code)]
#[derive(Debug)]
pub struct J2012 {
    frame_payload: Vec<u8>,
}

impl J2012 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> J2012 {
        J2012 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = J2012, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633861886 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| J2012::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Number of occurrences of the respective SAE J2012 DTC being conveyed.
    #[allow(dead_code)]
    pub fn j2012dtcoccurrencecount(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 49) & 0x7F) as f64
    }

    /// Indicates if the respective SAE J2012 DTC is active or previously active.
    #[allow(dead_code)]
    pub fn j2012dtcstatus(&self) -> J2012dtcStatus2633861886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        J2012dtcStatus2633861886::from((((frame_payload >> 48) & 0x1) as f64) as u64)
    }

    /// The number J2012 DTCs being conveyed in PGN 64906.
    #[allow(dead_code)]
    pub fn numberofj2012dtcs(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Particulate Trap Control 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ptc1 {
    frame_payload: Vec<u8>,
}

impl Ptc1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ptc1 {
        Ptc1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ptc1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566749438 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ptc1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read PrtcltTrpActvRgnrtnInhbtdDTVhclS signal from can frame
    #[allow(dead_code)]
    pub fn prtclttrpactvrgnrtninhbtddtvhcls(&self) -> PrtcltTrpActvRgnrtnInhbtdDtVhclS2566749438 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PrtcltTrpActvRgnrtnInhbtdDtVhclS2566749438::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Indicates the state of particulate trap active regeneration inhibition due to the transmission being out of neutral.
    #[allow(dead_code)]
    pub fn prtclttrpactvrgnrtninhbtddtotofn(&self) -> PrtcltTrpActvRgnrtnInhbtdDtOtOfN2566749438 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PrtcltTrpActvRgnrtnInhbtdDtOtOfN2566749438::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Indicates the state of particulate trap active regeneration inhibition due to the accelerator pedal being off idle.
    #[allow(dead_code)]
    pub fn prtclttrpactvrgnrtninhbtddtacclp(&self) -> PrtcltTrpActvRgnrtnInhbtdDtAcclP2566749438 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PrtcltTrpActvRgnrtnInhbtdDtAcclP2566749438::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Indicates the state of particulate trap active regeneration inhibition due to the PTO being active.
    #[allow(dead_code)]
    pub fn prtclttrpactvrgnrtninhbtddtptoac(&self) -> PrtcltTrpActvRgnrtnInhbtdDtptoAc2566749438 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PrtcltTrpActvRgnrtnInhbtdDtptoAc2566749438::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Indicates the state of particulate trap active regeneration inhibition due to the service brake being active.
    #[allow(dead_code)]
    pub fn prtclttrpactvrgnrtninhbtddtsrvcb(&self) -> PrtcltTrpActvRgnrtnInhbtdDtSrvcB2566749438 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PrtcltTrpActvRgnrtnInhbtdDtSrvcB2566749438::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Indicates the state of particulate trap active regeneration inhibition due to the clutch being disengaged.
    #[allow(dead_code)]
    pub fn prtclttrpactvrgnrtninhbtddtcltch(&self) -> PrtcltTrpActvRgnrtnInhbtdDtCltch2566749438 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PrtcltTrpActvRgnrtnInhbtdDtCltch2566749438::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Indicates the state of particulate trap active regeneration inhibition due to the Particulate Trap Regeneration Inhibit Switch.
    #[allow(dead_code)]
    pub fn prtclttrpactvrgnrtninhbtddtinhbt(&self) -> PrtcltTrpActvRgnrtnInhbtdDtInhbt2566749438 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PrtcltTrpActvRgnrtnInhbtdDtInhbt2566749438::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Indicates the state of particulate trap active regeneration inhibition.
    #[allow(dead_code)]
    pub fn prtclttrpactvrgnrtninhbtdstatus(&self) -> PrtcltTrpActvRgnrtnInhbtdStatus2566749438 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PrtcltTrpActvRgnrtnInhbtdStatus2566749438::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Indicates the state of the particulate trap regeneration need and urgency.
    #[allow(dead_code)]
    pub fn particulatetrapstatus(&self) -> ParticulateTrapStatus2566749438 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ParticulateTrapStatus2566749438::from((((frame_payload >> 12) & 0x7) as f64) as u64)
    }

    /// Indicates the state of particulate trap active regeneration.
    #[allow(dead_code)]
    pub fn prtclttrpactvregenerationstatus(&self) -> PrtcltTrpActvRegenerationStatus2566749438 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PrtcltTrpActvRegenerationStatus2566749438::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Indicates the state of particulate trap passive regeneration.
    #[allow(dead_code)]
    pub fn prtclttrppssvregenerationstatus(&self) -> PrtcltTrpPssvRegenerationStatus2566749438 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PrtcltTrpPssvRegenerationStatus2566749438::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Command to control the particulate trap lamp.
    #[allow(dead_code)]
    pub fn particulatetraplampcmd(&self) -> ParticulateTrapLampCmd2566749438 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ParticulateTrapLampCmd2566749438::from(((frame_payload & 0x7) as f64) as u64)
    }
}

/// Steering Angle Sensor Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Sas {
    frame_payload: Vec<u8>,
}

impl Sas {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Sas {
        Sas { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Sas, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565873150 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Sas::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The message checksum is used to verify the signal path from the demanding device to the steering controller .
    #[allow(dead_code)]
    pub fn messagechecksum(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 60) & 0xF) as f64
    }

    /// The message counter is to verify the signal path from the demanding device to the steering controller.
    #[allow(dead_code)]
    pub fn messagecounter(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xF) as f64
    }

    /// This signal indicates the calibration status of the steering angle sensor.
    #[allow(dead_code)]
    pub fn steeranglesensorcalibrated(&self) -> SteerAngleSensorCalibrated2565873150 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SteerAngleSensorCalibrated2565873150::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// This signal indicates the operational mode of the steering angle sensor.
    #[allow(dead_code)]
    pub fn steeranglesensoractivemode(&self) -> SteerAngleSensorActiveMode2565873150 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SteerAngleSensorActiveMode2565873150::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// The signal indicates the range of the steering wheel angle the sensor element is capable to measure.
    #[allow(dead_code)]
    pub fn steerwheelanglerange(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.000977 + -31.374f64
    }

    /// Read SteerWheelAngleRangeCounterType signal from can frame
    #[allow(dead_code)]
    pub fn steerwheelanglerangecountertype(&self) -> SteerWheelAngleRangeCounterType2565873150 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SteerWheelAngleRangeCounterType2565873150::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Read SteerWheelAngleRangeCounter signal from can frame
    #[allow(dead_code)]
    pub fn steerwheelanglerangecounter(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0x3F) as f64 + -32f64
    }

    /// The main operator`s steering wheel angle (on the steering column, not the actual wheel angle).
    #[allow(dead_code)]
    pub fn steerwheelangle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.000977 + -31.374f64
    }
}

/// Catalyst Use Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Scr1 {
    frame_payload: Vec<u8>,
}

impl Scr1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Scr1 {
        Scr1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Scr1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566745854 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Scr1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read CmdedCatalystReagentConsumption signal from can frame
    #[allow(dead_code)]
    pub fn cmdedcatalystreagentconsumption(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.050000
    }

    /// Read AvrgeCatalystReagentConsumption signal from can frame
    #[allow(dead_code)]
    pub fn avrgecatalystreagentconsumption(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000
    }
}

/// Transfer Case Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tci {
    frame_payload: Vec<u8>,
}

impl Tci {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tci {
        Tci { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tci, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566751230 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tci::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter describes the feedback from the transfer case controller .
    #[allow(dead_code)]
    pub fn transfercasestatus(&self) -> TransferCaseStatus2566751230 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransferCaseStatus2566751230::from(((frame_payload & 0x7) as f64) as u64)
    }
}

/// Transmission Fluids 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Trf2 {
    frame_payload: Vec<u8>,
}

impl Trf2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Trf2 {
        Trf2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Trf2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566755838 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Trf2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This switch indicates whether transmission oil level is full or empty.
    #[allow(dead_code)]
    pub fn transoillevelswitch(&self) -> TransOilLevelSwitch2566755838 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransOilLevelSwitch2566755838::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// This switch indicates whether the transmission oil filter is clogged.
    #[allow(dead_code)]
    pub fn transoilfilterrestrictionswitch(&self) -> TransOilFilterRestrictionSwitch2566755838 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransOilFilterRestrictionSwitch2566755838::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Vehicle Direction/Speed 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vds2 {
    frame_payload: Vec<u8>,
}

impl Vds2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vds2 {
        Vds2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vds2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566752766 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vds2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter indicates the roll in degrees from level.
    #[allow(dead_code)]
    pub fn vehicleroll(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.007812 + -200f64
    }
}

/// Engine Speed/Load Factor Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Lf {
    frame_payload: Vec<u8>,
}

impl Lf {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Lf {
        Lf { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Lf, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633938942 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Lf::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total time that the engine has operated in the cruise hold state, excluding time in accelerator override, over the life of the engine.
    #[allow(dead_code)]
    pub fn totalengcruisetime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Read TotalDriveAverageLoadFactor signal from can frame
    #[allow(dead_code)]
    pub fn totaldriveaverageloadfactor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 0.400000
    }

    /// Read TripDriveAverageLoadFactor signal from can frame
    #[allow(dead_code)]
    pub fn tripdriveaverageloadfactor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 0.400000
    }

    /// Average speed of the engine since the last trip reset.
    #[allow(dead_code)]
    pub fn tripaverageengspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.125000
    }

    /// Maximum engine speed achieved since the last trip reset.
    #[allow(dead_code)]
    pub fn tripmaxengspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.125000
    }
}

/// Lighting Data
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ld {
    frame_payload: Vec<u8>,
}

impl Ld {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ld {
        Ld { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ld, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566799614 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ld::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter provides measured data from the implement rear work lamps.
    #[allow(dead_code)]
    pub fn implementrearworklight(&self) -> ImplementRearWorkLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementRearWorkLight2566799614::from((((frame_payload >> 62) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the forward facing work lights toward the left end of the implement.
    #[allow(dead_code)]
    pub fn implementleftforwardworklight(&self) -> ImplementLeftForwardWorkLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementLeftForwardWorkLight2566799614::from((((frame_payload >> 60) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the forward facing work lights toward the right end of the implement.
    #[allow(dead_code)]
    pub fn implementrightforwardworklight(&self) -> ImplementRightForwardWorkLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementRightForwardWorkLight2566799614::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// Read ImplementLeftFacingWorkLight signal from can frame
    #[allow(dead_code)]
    pub fn implementleftfacingworklight(&self) -> ImplementLeftFacingWorkLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementLeftFacingWorkLight2566799614::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Read ImplementRightFacingWorkLight signal from can frame
    #[allow(dead_code)]
    pub fn implementrightfacingworklight(&self) -> ImplementRightFacingWorkLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementRightFacingWorkLight2566799614::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the implement OEM option 1 light.
    #[allow(dead_code)]
    pub fn implementoemoption1light(&self) -> ImplementOemOption1Light2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementOemOption1Light2566799614::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the implement OEM option 2 light.
    #[allow(dead_code)]
    pub fn implementoemoption2light(&self) -> ImplementOemOption2Light2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementOemOption2Light2566799614::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor front high mounted work lights.
    #[allow(dead_code)]
    pub fn trctrfronthighmountedworklights(&self) -> TrctrFrontHighMountedWorkLights2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrctrFrontHighMountedWorkLights2566799614::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor front low mounted work lights.
    #[allow(dead_code)]
    pub fn trctorfrontlowmountedworklights(&self) -> TrctorFrontLowMountedWorkLights2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrctorFrontLowMountedWorkLights2566799614::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor side high mounted work lights.
    #[allow(dead_code)]
    pub fn trctorsidehighmountedworklights(&self) -> TrctorSideHighMountedWorkLights2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrctorSideHighMountedWorkLights2566799614::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor side low mounted work lights.
    #[allow(dead_code)]
    pub fn tractorsidelowmountedworklights(&self) -> TractorSideLowMountedWorkLights2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorSideLowMountedWorkLights2566799614::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor rear high mounted work lights.
    #[allow(dead_code)]
    pub fn trctorrearhighmountedworklights(&self) -> TrctorRearHighMountedWorkLights2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrctorRearHighMountedWorkLights2566799614::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor rear low mounted work lights.
    #[allow(dead_code)]
    pub fn tractorrearlowmountedworklights(&self) -> TractorRearLowMountedWorkLights2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorRearLowMountedWorkLights2566799614::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor underside mounted work lights.
    #[allow(dead_code)]
    pub fn trctrundersidemountedworklights(&self) -> TrctrUndersideMountedWorkLights2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrctrUndersideMountedWorkLights2566799614::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor and/or implement rear fog lights.
    #[allow(dead_code)]
    pub fn rearfoglights(&self) -> RearFogLights2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RearFogLights2566799614::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Read TractorMarkerLight signal from can frame
    #[allow(dead_code)]
    pub fn tractormarkerlight(&self) -> TractorMarkerLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorMarkerLight2566799614::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Read ImplementMarkerLight signal from can frame
    #[allow(dead_code)]
    pub fn implementmarkerlight(&self) -> ImplementMarkerLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementMarkerLight2566799614::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor high mounted clearance and center ID lights.
    #[allow(dead_code)]
    pub fn tractorclearancelight(&self) -> TractorClearanceLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorClearanceLight2566799614::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from an attached implement high mounted clearance lights.
    #[allow(dead_code)]
    pub fn implementclearancelight(&self) -> ImplementClearanceLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementClearanceLight2566799614::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor and attached implement left stop lights.
    #[allow(dead_code)]
    pub fn leftstoplight(&self) -> LeftStopLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LeftStopLight2566799614::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor and attached implement right stop lights.
    #[allow(dead_code)]
    pub fn rightstoplight(&self) -> RightStopLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RightStopLight2566799614::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor and attached implement center stop lights.
    #[allow(dead_code)]
    pub fn centerstoplight(&self) -> CenterStopLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CenterStopLight2566799614::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the back up lights and/ or associated alarm.
    #[allow(dead_code)]
    pub fn backuplightandalarmhorn(&self) -> BackUpLightAndAlarmHorn2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BackUpLightAndAlarmHorn2566799614::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor and attached implement left turn signal lights.
    #[allow(dead_code)]
    pub fn leftturnsignallights(&self) -> LeftTurnSignalLights2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LeftTurnSignalLights2566799614::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor and attached implement right turn signal lights.
    #[allow(dead_code)]
    pub fn rightturnsignallights(&self) -> RightTurnSignalLights2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RightTurnSignalLights2566799614::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the beacon light on tractor or attached implements.
    #[allow(dead_code)]
    pub fn rotatingbeaconlight(&self) -> RotatingBeaconLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RotatingBeaconLight2566799614::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor front fog lights.
    #[allow(dead_code)]
    pub fn tractorfrontfoglights(&self) -> TractorFrontFogLights2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorFrontFogLights2566799614::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor high beam head light lamps.
    #[allow(dead_code)]
    pub fn highbeamheadlightdata(&self) -> HighBeamHeadLightData2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HighBeamHeadLightData2566799614::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor low beam head light lamps.
    #[allow(dead_code)]
    pub fn lowbeamheadlightdata(&self) -> LowBeamHeadLightData2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LowBeamHeadLightData2566799614::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the tractor alternate beam head light lamps.
    #[allow(dead_code)]
    pub fn altbeamheadlightdata(&self) -> AltBeamHeadLightData2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AltBeamHeadLightData2566799614::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// This parameter provides measured data from the vehicle�s running lights.
    #[allow(dead_code)]
    pub fn runninglight(&self) -> RunningLight2566799614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RunningLight2566799614::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Lighting Command
#[allow(dead_code)]
#[derive(Debug)]
pub struct Lc {
    frame_payload: Vec<u8>,
}

impl Lc {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Lc {
        Lc { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Lc, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365473278 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Lc::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Command to activate or de-activate implement rear work lights.
    #[allow(dead_code)]
    pub fn implementrearworklightcmd(&self) -> ImplementRearWorkLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementRearWorkLightCmd2365473278::from((((frame_payload >> 62) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the forward facing work lights toward the left end of the implement.
    #[allow(dead_code)]
    pub fn implmentleftforwardworklightcmd(&self) -> ImplmentLeftForwardWorkLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplmentLeftForwardWorkLightCmd2365473278::from((((frame_payload >> 60) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the forward facing work lights toward the right end of the implement.
    #[allow(dead_code)]
    pub fn implmntrightforwardworklightcmd(&self) -> ImplmntRightForwardWorkLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplmntRightForwardWorkLightCmd2365473278::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// Read LightingDataRqCmd signal from can frame
    #[allow(dead_code)]
    pub fn lightingdatarqcmd(&self) -> LightingDataRqCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LightingDataRqCmd2365473278::from((((frame_payload >> 56) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate work lights mounted on an implement to illuminate beyond left end of the implement.
    #[allow(dead_code)]
    pub fn implementleftfacingworklightcmd(&self) -> ImplementLeftFacingWorkLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementLeftFacingWorkLightCmd2365473278::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate work lights mounted on an implement to illuminate beyond right end of the implement.
    #[allow(dead_code)]
    pub fn implmentrightfacingworklightcmd(&self) -> ImplmentRightFacingWorkLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplmentRightFacingWorkLightCmd2365473278::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate an implement OEM option 1 light.
    #[allow(dead_code)]
    pub fn implementoemoption1lightcmd(&self) -> ImplementOemOption1LightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementOemOption1LightCmd2365473278::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate an implement OEM option 2 light.
    #[allow(dead_code)]
    pub fn implementoemoption2lightcmd(&self) -> ImplementOemOption2LightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementOemOption2LightCmd2365473278::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the tractor front high mounted work lights.
    #[allow(dead_code)]
    pub fn trctrfrnthghmuntedworklightscmd(&self) -> TrctrFrntHghMuntedWorkLightsCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrctrFrntHghMuntedWorkLightsCmd2365473278::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the tractor front low mounted work lights.
    #[allow(dead_code)]
    pub fn trctrfrntlwmountedworklightscmd(&self) -> TrctrFrntLwMountedWorkLightsCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrctrFrntLwMountedWorkLightsCmd2365473278::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the tractor side high mounted work lights.
    #[allow(dead_code)]
    pub fn trctrsdhighmountedworklightscmd(&self) -> TrctrSdHighMountedWorkLightsCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrctrSdHighMountedWorkLightsCmd2365473278::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the tractor side low mounted work lights.
    #[allow(dead_code)]
    pub fn trctrsdelowmountedworklightscmd(&self) -> TrctrSdeLowMountedWorkLightsCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrctrSdeLowMountedWorkLightsCmd2365473278::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the tractor rear high mounted work lights.
    #[allow(dead_code)]
    pub fn trctrrrhighmountedworklightscmd(&self) -> TrctrRrHighMountedWorkLightsCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrctrRrHighMountedWorkLightsCmd2365473278::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the tractor rear low mounted work lights.
    #[allow(dead_code)]
    pub fn trctrrarlowmountedworklightscmd(&self) -> TrctrRarLowMountedWorkLightsCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrctrRarLowMountedWorkLightsCmd2365473278::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the tractor underside mounted work lights.
    #[allow(dead_code)]
    pub fn trctrundrsdmountedworklightscmd(&self) -> TrctrUndrsdMountedWorkLightsCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrctrUndrsdMountedWorkLightsCmd2365473278::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate tractor or implement rear fog lights.
    #[allow(dead_code)]
    pub fn rearfoglightcmd(&self) -> RearFogLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RearFogLightCmd2365473278::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Read TractorMarkerLightCmd signal from can frame
    #[allow(dead_code)]
    pub fn tractormarkerlightcmd(&self) -> TractorMarkerLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorMarkerLightCmd2365473278::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Read ImplementMarkerLightCmd signal from can frame
    #[allow(dead_code)]
    pub fn implementmarkerlightcmd(&self) -> ImplementMarkerLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementMarkerLightCmd2365473278::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Read TractorClearanceLightCmd signal from can frame
    #[allow(dead_code)]
    pub fn tractorclearancelightcmd(&self) -> TractorClearanceLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorClearanceLightCmd2365473278::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the implement high mounted clearance and lights.
    #[allow(dead_code)]
    pub fn implementclearancelightcmd(&self) -> ImplementClearanceLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ImplementClearanceLightCmd2365473278::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Read LeftStopLightCmd signal from can frame
    #[allow(dead_code)]
    pub fn leftstoplightcmd(&self) -> LeftStopLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LeftStopLightCmd2365473278::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Read RightStopLightCmd signal from can frame
    #[allow(dead_code)]
    pub fn rightstoplightcmd(&self) -> RightStopLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RightStopLightCmd2365473278::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read CenterStopLightCmd signal from can frame
    #[allow(dead_code)]
    pub fn centerstoplightcmd(&self) -> CenterStopLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CenterStopLightCmd2365473278::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Read BackUpLightAndAlarmHornCmd signal from can frame
    #[allow(dead_code)]
    pub fn backuplightandalarmhorncmd(&self) -> BackUpLightAndAlarmHornCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BackUpLightAndAlarmHornCmd2365473278::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Read LeftTurnSignalLightsCmd signal from can frame
    #[allow(dead_code)]
    pub fn leftturnsignallightscmd(&self) -> LeftTurnSignalLightsCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LeftTurnSignalLightsCmd2365473278::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// Read RightTurnSignalLightsCmd signal from can frame
    #[allow(dead_code)]
    pub fn rightturnsignallightscmd(&self) -> RightTurnSignalLightsCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RightTurnSignalLightsCmd2365473278::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate slow moving vehicle indicator lights on tractor and/or implements.
    #[allow(dead_code)]
    pub fn rotatingbeaconlightcmd(&self) -> RotatingBeaconLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RotatingBeaconLightCmd2365473278::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate tractor front fog lights.
    #[allow(dead_code)]
    pub fn tractorfrontfoglightscmd(&self) -> TractorFrontFogLightsCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorFrontFogLightsCmd2365473278::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the tractor high beam head light lamps.
    #[allow(dead_code)]
    pub fn highbeamheadlightcmd(&self) -> HighBeamHeadLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HighBeamHeadLightCmd2365473278::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the tractor low beam head light lamps.
    #[allow(dead_code)]
    pub fn lowbeamheadlightcmd(&self) -> LowBeamHeadLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LowBeamHeadLightCmd2365473278::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the tractor alternate head lights (only low beam is available on alternate head lights).
    #[allow(dead_code)]
    pub fn altbeamheadlightcmd(&self) -> AltBeamHeadLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AltBeamHeadLightCmd2365473278::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Command to activate or de-activate the tractor or powered vehicle running lights.
    #[allow(dead_code)]
    pub fn runninglightcmd(&self) -> RunningLightCmd2365473278 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RunningLightCmd2365473278::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Laser Leveling System Blade Control
#[allow(dead_code)]
#[derive(Debug)]
pub struct Lbc {
    frame_payload: Vec<u8>,
}

impl Lbc {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Lbc {
        Lbc { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Lbc, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365485822 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Lbc::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Allows the user to select the type of blade control for the land leveling system.
    #[allow(dead_code)]
    pub fn bladectrlmode(&self) -> BladeCtrlMode2365485822 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BladeCtrlMode2365485822::from((((frame_payload >> 16) & 0xFF) as f64) as u64)
    }

    /// Used to indicate the duration and direction that the land leveling system blade moves.
    #[allow(dead_code)]
    pub fn bladedurationanddirection(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000 + -3276.8f64
    }
}

/// Ignition Timing 6
#[allow(dead_code)]
#[derive(Debug)]
pub struct It6 {
    frame_payload: Vec<u8>,
}

impl It6 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> It6 {
        It6 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = It6, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633926654 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| It6::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The actual ignition timing at the current engine conditions.
    #[allow(dead_code)]
    pub fn engactualignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// A programmable timing value specific to the engine�s application.
    #[allow(dead_code)]
    pub fn engdesiredignttiming3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// A programmable timing value specific to the engine�s application.
    #[allow(dead_code)]
    pub fn engdesiredignttiming2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// A programmable timing value specific to the engine�s application.
    #[allow(dead_code)]
    pub fn engdesiredignttiming1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.007812 + -200f64
    }
}

/// Ignition Timing 5
#[allow(dead_code)]
#[derive(Debug)]
pub struct It5 {
    frame_payload: Vec<u8>,
}

impl It5 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> It5 {
        It5 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = It5, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633926398 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| It5::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl20ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl19ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl18ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl17ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.007812 + -200f64
    }
}

/// Ignition Timing 4
#[allow(dead_code)]
#[derive(Debug)]
pub struct It4 {
    frame_payload: Vec<u8>,
}

impl It4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> It4 {
        It4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = It4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633926142 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| It4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl16ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl15ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl14ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl13ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.007812 + -200f64
    }
}

/// Ignition Timing 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct It3 {
    frame_payload: Vec<u8>,
}

impl It3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> It3 {
        It3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = It3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633925886 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| It3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl12ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl11ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl10ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl9ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.007812 + -200f64
    }
}

/// Ignition Timing 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct It2 {
    frame_payload: Vec<u8>,
}

impl It2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> It2 {
        It2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = It2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633925630 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| It2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl8ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl7ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl6ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl5ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.007812 + -200f64
    }
}

/// Ignition Timing 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct It1 {
    frame_payload: Vec<u8>,
}

impl It1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> It1 {
        It1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = It1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633925374 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| It1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl4ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl3ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl2ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The ignition timing of the cylinder.
    #[allow(dead_code)]
    pub fn engcyl1ignttiming(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.007812 + -200f64
    }
}

/// Ignition Transformer Secondary Output 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Iso3 {
    frame_payload: Vec<u8>,
}

impl Iso3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Iso3 {
        Iso3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Iso3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633927422 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Iso3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl20ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl19ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl18ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl17ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -125f64
    }
}

/// Ignition Transformer Secondary Output 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Iso2 {
    frame_payload: Vec<u8>,
}

impl Iso2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Iso2 {
        Iso2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Iso2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633927166 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Iso2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl16ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl15ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl14ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl13ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl12ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl11ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl10ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl9ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -125f64
    }
}

/// Ignition Transformer Secondary Output 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Iso1 {
    frame_payload: Vec<u8>,
}

impl Iso1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Iso1 {
        Iso1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Iso1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633926910 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Iso1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl8ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl7ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl6ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl5ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl4ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl3ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl2ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -125f64
    }

    /// This parameter indicates the relative intensity of the secondary output voltage of the ignition transformer.
    #[allow(dead_code)]
    pub fn engcyl1ignttranssecondoutput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -125f64
    }
}

/// Operator Primary Intermediate Speed Control state
#[allow(dead_code)]
#[derive(Debug)]
pub struct Iscs {
    frame_payload: Vec<u8>,
}

impl Iscs {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Iscs {
        Iscs { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Iscs, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566768894 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Iscs::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// 13 preprogrammed intermediate speed control settings are availible for the contolling ECM to select.
    #[allow(dead_code)]
    pub fn engoprtrprmryintrmdtspdslctstte(&self) -> EngOprtrPrmryIntrmdtSpdSlctStte2566768894 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngOprtrPrmryIntrmdtSpdSlctStte2566768894::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// Intermediate Speed Control
#[allow(dead_code)]
#[derive(Debug)]
pub struct Isc {
    frame_payload: Vec<u8>,
}

impl Isc {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Isc {
        Isc { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Isc, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566769406 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Isc::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Allows the operator to select one of 13 preprogrammed Intermediate Speed Control settings.
    #[allow(dead_code)]
    pub fn engoprtrprmryintrmdtspeedselect(&self) -> EngOprtrPrmryIntrmdtSpeedSelect2566769406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngOprtrPrmryIntrmdtSpeedSelect2566769406::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// Idle Operation
#[allow(dead_code)]
#[derive(Debug)]
pub struct Io {
    frame_payload: Vec<u8>,
}

impl Io {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Io {
        Io { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Io, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566839550 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Io::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Accumulated time of operation of the engine while under idle conditions.
    #[allow(dead_code)]
    pub fn engtotalidlehours(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Accumulated amount of fuel used during vehicle operation while under idle conditions.
    #[allow(dead_code)]
    pub fn engtotalidlefuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.500000
    }
}

/// Intake Manifold Information 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Imt2 {
    frame_payload: Vec<u8>,
}

impl Imt2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Imt2 {
        Imt2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Imt2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633934334 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Imt2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of pre-combustion air found in intake manifold number 6 of engine air supply system.
    #[allow(dead_code)]
    pub fn engintakemanifold6temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 + -40f64
    }

    /// Temperature of pre-combustion air found in intake manifold number 5 of engine air supply system.
    #[allow(dead_code)]
    pub fn engintakemanifold5temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 + -40f64
    }

    /// Temperature of pre-combustion air found in intake manifold of engine air supply system.
    #[allow(dead_code)]
    pub fn engintakemanifold4temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -40f64
    }

    /// Temperature of pre-combustion air found in intake manifold of engine air supply system.
    #[allow(dead_code)]
    pub fn engintakemanifold3temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -40f64
    }

    /// Temperature of pre-combustion air found in intake manifold of engine air supply system.
    #[allow(dead_code)]
    pub fn engintakemanifold2temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -40f64
    }
}

/// Intake Manifold Information 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Imt1 {
    frame_payload: Vec<u8>,
}

impl Imt1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Imt1 {
        Imt1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Imt1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566825726 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Imt1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Gage pressure of air measured downstream of the compressor discharge side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo4boostpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.125000
    }

    /// Gage pressure of air measured downstream of the compressor discharge side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo3boostpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.125000
    }

    /// Gage pressure of air measured downstream of the compressor discharge side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo2boostpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.125000
    }

    /// Gage pressure of air measured downstream of the compressor discharge side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo1boostpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.125000
    }
}

/// Inlet/Exhaust Conditions 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ic2 {
    frame_payload: Vec<u8>,
}

impl Ic2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ic2 {
        Ic2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ic2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566770942 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ic2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngAirFilter4DiffPress signal from can frame
    #[allow(dead_code)]
    pub fn engairfilter4diffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 0.050000
    }

    /// Read EngAirFilter3DiffPress signal from can frame
    #[allow(dead_code)]
    pub fn engairfilter3diffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.050000
    }

    /// Read EngAirFilter2DiffPress signal from can frame
    #[allow(dead_code)]
    pub fn engairfilter2diffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.050000
    }

    /// The gage pressure measurement of the air intake manifold for bank #2 or the second air intake manifold.
    #[allow(dead_code)]
    pub fn engintakemanifold2press(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 2.000000
    }

    /// The absolute pressure measurement of the air intake manifold.
    #[allow(dead_code)]
    pub fn engintakemanifold1abspress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 2.000000
    }
}

/// Inlet/Exhaust Conditions 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ic1 {
    frame_payload: Vec<u8>,
}

impl Ic1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ic1 {
        Ic1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ic1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566846206 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ic1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngCoolantFilterDiffPress signal from can frame
    #[allow(dead_code)]
    pub fn engcoolantfilterdiffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 0.500000
    }

    /// Temperature of combustion byproducts leaving the engine.
    #[allow(dead_code)]
    pub fn engexhaustgastemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Read EngAirFilter1DiffPress signal from can frame
    #[allow(dead_code)]
    pub fn engairfilter1diffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 0.050000
    }

    /// Absolute air pressure at inlet to intake manifold or air box.
    #[allow(dead_code)]
    pub fn engairinletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 2.000000
    }

    /// Temperature of pre-combustion air found in intake manifold of engine air supply system.
    #[allow(dead_code)]
    pub fn engintakemanifold1temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -40f64
    }

    /// Gage pressure of air measured downstream on the compressor discharge side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturboboostpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 2.000000
    }

    /// Exhaust back pressure as a result of particle accumulation on filter media placed in the exhaust stream.
    #[allow(dead_code)]
    pub fn engparticulatetrapinletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.500000
    }
}

/// Heater Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Htr {
    frame_payload: Vec<u8>,
}

impl Htr {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Htr {
        Htr { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Htr, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566811134 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Htr::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Parameter indicating whether the cab zone is being heated.
    #[allow(dead_code)]
    pub fn cabheatingzone(&self) -> CabHeatingZone2566811134 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CabHeatingZone2566811134::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Parameter indicating whether the engine zone is being heated.
    #[allow(dead_code)]
    pub fn engheatingzone(&self) -> EngHeatingZone2566811134 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngHeatingZone2566811134::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Indicates whether the cab is being ventilated or not.
    #[allow(dead_code)]
    pub fn cabventilation(&self) -> CabVentilation2566811134 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CabVentilation2566811134::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Read AuxilaryHeaterWaterPumpStatus signal from can frame
    #[allow(dead_code)]
    pub fn auxilaryheaterwaterpumpstatus(&self) -> AuxilaryHeaterWaterPumpStatus2566811134 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxilaryHeaterWaterPumpStatus2566811134::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Read AuxHeaterMode signal from can frame
    #[allow(dead_code)]
    pub fn auxheatermode(&self) -> AuxHeaterMode2566811134 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxHeaterMode2566811134::from((((frame_payload >> 24) & 0xF) as f64) as u64)
    }

    /// Current auxiliary heater output power, relative to the auxiliary heater maximum output power.
    #[allow(dead_code)]
    pub fn auxheateroutputpowerpercent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 0.400000
    }

    /// Temperature of the input air in an auxiliary heater system.
    #[allow(dead_code)]
    pub fn auxheaterinputairtemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -40f64
    }

    /// Temperature of the auxiliary heater output coolant (I.
    #[allow(dead_code)]
    pub fn auxheateroutputcoolanttemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -40f64
    }
}

/// High Resolution Wheel Speed
#[allow(dead_code)]
#[derive(Debug)]
pub struct Hrw {
    frame_payload: Vec<u8>,
}

impl Hrw {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Hrw {
        Hrw { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Hrw, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2298375934 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Hrw::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// High resolution measurement of the speed of the right wheel on the rear axle.
    #[allow(dead_code)]
    pub fn rearaxlerightwheelspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.003906
    }

    /// High resolution measurement of the speed of the left wheel on the rear axle.
    #[allow(dead_code)]
    pub fn rearaxleleftwheelspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.003906
    }

    /// High resolution measurement of the speed of the right wheel on the front axle.
    #[allow(dead_code)]
    pub fn frontaxlerightwheelspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.003906
    }

    /// High resolution measurement of the speed of the left wheel on the front axle.
    #[allow(dead_code)]
    pub fn frontaxleleftwheelspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.003906
    }
}

/// Hydraulic Pressure Governor Info
#[allow(dead_code)]
#[derive(Debug)]
pub struct Hpg {
    frame_payload: Vec<u8>,
}

impl Hpg {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Hpg {
        Hpg { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Hpg, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565867774 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Hpg::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read FireApparatusPumpEngagement signal from can frame
    #[allow(dead_code)]
    pub fn fireapparatuspumpengagement(&self) -> FireApparatusPumpEngagement2565867774 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FireApparatusPumpEngagement2565867774::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read EngHydPressGovernorSwitch signal from can frame
    #[allow(dead_code)]
    pub fn enghydpressgovernorswitch(&self) -> EngHydPressGovernorSwitch2565867774 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngHydPressGovernorSwitch2565867774::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Mode for governor operation is hydraulic pressure control.
    #[allow(dead_code)]
    pub fn enghydprssgovernormodeindicator(&self) -> EngHydPrssGovernorModeIndicator2565867774 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngHydPrssGovernorModeIndicator2565867774::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Hydraulic pressure measured at the output of the hydraulic pump.
    #[allow(dead_code)]
    pub fn hydpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 2.000000
    }
}

/// Engine Hours, Revolutions
#[allow(dead_code)]
#[derive(Debug)]
pub struct Hours {
    frame_payload: Vec<u8>,
}

impl Hours {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Hours {
        Hours { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Hours, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566841854 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Hours::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Accumulated number of revolutions of engine crankshaft during its operation.
    #[allow(dead_code)]
    pub fn engtotalrevolutions(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 1000.000000
    }

    /// Accumulated time of operation of engine.
    #[allow(dead_code)]
    pub fn engtotalhoursofoperation(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.050000
    }
}

/// Hydraulic Braking System
#[allow(dead_code)]
#[derive(Debug)]
pub struct Hbs {
    frame_payload: Vec<u8>,
}

impl Hbs {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Hbs {
        Hbs { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Hbs, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365449982 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Hbs::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Signal which indicates whether the hydraulic fluid level in the reservoir(s) is sufficient.
    #[allow(dead_code)]
    pub fn hydbrakefluidlevelswitch(&self) -> HydBrakeFluidLevelSwitch2365449982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HydBrakeFluidLevelSwitch2365449982::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Signal which commands an audible warning by the hydraulic braking system.
    #[allow(dead_code)]
    pub fn hydbrakesystemaudiblewarningcmd(&self) -> HydBrakeSystemAudibleWarningCmd2365449982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HydBrakeSystemAudibleWarningCmd2365449982::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Read HydBrkePressSupplyStateCircuit2 signal from can frame
    #[allow(dead_code)]
    pub fn hydbrkepresssupplystatecircuit2(&self) -> HydBrkePressSupplyStateCircuit22365449982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HydBrkePressSupplyStateCircuit22365449982::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Read HydBrkePressSupplyStateCircuit1 signal from can frame
    #[allow(dead_code)]
    pub fn hydbrkepresssupplystatecircuit1(&self) -> HydBrkePressSupplyStateCircuit12365449982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HydBrkePressSupplyStateCircuit12365449982::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read HydBrkPressWarningStateCircuit2 signal from can frame
    #[allow(dead_code)]
    pub fn hydbrkpresswarningstatecircuit2(&self) -> HydBrkPressWarningStateCircuit22365449982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HydBrkPressWarningStateCircuit22365449982::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Read HydBrkPressWarningStateCircuit1 signal from can frame
    #[allow(dead_code)]
    pub fn hydbrkpresswarningstatecircuit1(&self) -> HydBrkPressWarningStateCircuit12365449982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HydBrkPressWarningStateCircuit12365449982::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Read HydBrakePressCircuit2 signal from can frame
    #[allow(dead_code)]
    pub fn hydbrakepresscircuit2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 100.000000
    }

    /// Read HydBrakePressCircuit1 signal from can frame
    #[allow(dead_code)]
    pub fn hydbrakepresscircuit1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 100.000000
    }
}

/// Trip Fuel Information (Gaseous)
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gtfi {
    frame_payload: Vec<u8>,
}

impl Gtfi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gtfi {
        Gtfi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gtfi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633939198 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gtfi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read TripDriveFuelEconomy signal from can frame
    #[allow(dead_code)]
    pub fn tripdrivefueleconomy(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 160) & 0xFFFF) as f64 * 0.001953
    }

    /// Total fuel consumed while the engine is in the cruise hold state since the last trip reset.
    #[allow(dead_code)]
    pub fn tripcruisefuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 128) & 0xFFFFFFFF) as f64 * 0.500000
    }

    /// Read TripVehicleIdleFuelUsed signal from can frame
    #[allow(dead_code)]
    pub fn tripvehicleidlefuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 96) & 0xFFFFFFFF) as f64 * 0.500000
    }

    /// Read TripPTONonmovingFuelUsed signal from can frame
    #[allow(dead_code)]
    pub fn tripptononmovingfuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFFFFFF) as f64 * 0.500000
    }

    /// Read TripPTOMovingFuelUsed signal from can frame
    #[allow(dead_code)]
    pub fn tripptomovingfuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.500000
    }

    /// Read TripDriveFuelUsed signal from can frame
    #[allow(dead_code)]
    pub fn tripdrivefuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.500000
    }
}

/// Gaseous Fuel Pressure
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gfp {
    frame_payload: Vec<u8>,
}

impl Gfp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gfp {
        Gfp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gfp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633927678 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gfp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Absolute Pressure of gas on outlet side of the first or only fuel system control valve.
    #[allow(dead_code)]
    pub fn engfuelvalve1outletabspress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.100000
    }

    /// The differential pressure between the gaseous fuel and the air intake manifold.
    #[allow(dead_code)]
    pub fn engairtofueldiffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.100000
    }

    /// The differential pressure between the inlet and the outlet of a gaseous fuel valve.
    #[allow(dead_code)]
    pub fn engfuelvalvediffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }

    /// The absolute pressure at the inlet of the gaseous fuel valve.
    #[allow(dead_code)]
    pub fn engfuelvalveinletabspress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// Fuel Information 2 (Gaseous)
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gfi2 {
    frame_payload: Vec<u8>,
}

impl Gfi2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gfi2 {
        Gfi2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gfi2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633925118 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gfi2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The rate at which the fuel is flowing through a fuel valve.
    #[allow(dead_code)]
    pub fn engfuelflowrate2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }

    /// The rate at which the fuel is flowing through a fuel valve.
    #[allow(dead_code)]
    pub fn engfuelflowrate1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }

    /// Read EngRqedFuelValve2Pos signal from can frame
    #[allow(dead_code)]
    pub fn engrqedfuelvalve2pos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 0.400000
    }

    /// The requested position of a gaseous fuel valve 1 that is metering the fuel flow to the engine.
    #[allow(dead_code)]
    pub fn engrqedfuelvalve1pos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 0.400000
    }

    /// The position of a gaseous fuel valve that is metering the fuel flow to the engine.
    #[allow(dead_code)]
    pub fn engfuelvalve2pos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 0.400000
    }

    /// The position of a gaseous fuel valve that is metering the fuel flow to the engine.
    #[allow(dead_code)]
    pub fn engfuelvalve1pos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 0.400000
    }
}

/// Fuel Information 1 (Gaseous)
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gfi1 {
    frame_payload: Vec<u8>,
}

impl Gfi1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gfi1 {
        Gfi1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gfi1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633937662 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gfi1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter conveys the specific gravity of the gaseous fuel being used by the engine.
    #[allow(dead_code)]
    pub fn engfuelspecificgravity(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.000100
    }

    /// Average fuel rate, equal to trip fuel divided by trip time while the engine speed is above zero, since the last trip reset.
    #[allow(dead_code)]
    pub fn tripaveragefuelrate(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.050000
    }

    /// Total fuel used while the PTO or remote PTO is in the hold state and engine speed is above zero, over the life of the engine.
    #[allow(dead_code)]
    pub fn totalengptofuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.500000
    }
}

/// Gaseous Fuel Properties
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gfd {
    frame_payload: Vec<u8>,
}

impl Gfd {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gfd {
        Gfd { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gfd, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566804990 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gfd::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The specific heat ratio of the fuel.
    #[allow(dead_code)]
    pub fn specificheatratio(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.001000
    }
}

/// Fuel Consumption (Gaseous)
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gfc {
    frame_payload: Vec<u8>,
}

impl Gfc {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gfc {
        Gfc { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gfc, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633936894 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gfc::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total fuel consumed (trip drive fuel + trip PTO moving fuel + trip PTO non-moving fuel + trip idle fuel) over the life of the engine.
    #[allow(dead_code)]
    pub fn totalfuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.500000
    }

    /// Total fuel consumed (trip drive fuel + trip PTO moving fuel + trip PTO non-moving fuel + trip idle fuel) since the last trip reset.
    #[allow(dead_code)]
    pub fn tripfuel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.500000
    }
}

/// Sensor Electrical Power #2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Sep2 {
    frame_payload: Vec<u8>,
}

impl Sep2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Sep2 {
        Sep2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Sep2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566757630 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Sep2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read SensorSupplyVoltage6 signal from can frame
    #[allow(dead_code)]
    pub fn sensorsupplyvoltage6(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.050000
    }

    /// Read SensorSupplyVoltage5 signal from can frame
    #[allow(dead_code)]
    pub fn sensorsupplyvoltage5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000
    }
}

/// Sensor Electrical Power #1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Sep1 {
    frame_payload: Vec<u8>,
}

impl Sep1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Sep1 {
        Sep1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Sep1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566757886 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Sep1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read SensorSupplyVoltage4 signal from can frame
    #[allow(dead_code)]
    pub fn sensorsupplyvoltage4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.050000
    }

    /// Read SensorSupplyVoltage3 signal from can frame
    #[allow(dead_code)]
    pub fn sensorsupplyvoltage3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.050000
    }

    /// Read SensorSupplyVoltage2 signal from can frame
    #[allow(dead_code)]
    pub fn sensorsupplyvoltage2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.050000
    }

    /// Read SensorSupplyVoltage1 signal from can frame
    #[allow(dead_code)]
    pub fn sensorsupplyvoltage1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000
    }
}

/// PTO Drive Engagement
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ptode {
    frame_payload: Vec<u8>,
}

impl Ptode {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ptode {
        Ptode { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ptode, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566759678 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ptode::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Reports if this specific PTO drive is engaged.
    #[allow(dead_code)]
    pub fn enggmntsttustransinputshaftpto1(&self) -> EnggmntSttusTransInputShaftPto12566759678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnggmntSttusTransInputShaftPto12566759678::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Reports if this specific PTO drive is engaged.
    #[allow(dead_code)]
    pub fn enggmntsttustransinputshaftpto2(&self) -> EnggmntSttusTransInputShaftPto22566759678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnggmntSttusTransInputShaftPto22566759678::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Reports if this specific PTO drive is engaged.
    #[allow(dead_code)]
    pub fn enggmntsttustransoutputshaftpto(&self) -> EnggmntSttusTransOutputShaftPto2566759678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnggmntSttusTransOutputShaftPto2566759678::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Reports if this specific PTO drive is engaged.
    #[allow(dead_code)]
    pub fn enggmntsttstrnsfrcsotptshaftpto(&self) -> EnggmntSttsTrnsfrCsOtptShaftPto2566759678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnggmntSttsTrnsfrCsOtptShaftPto2566759678::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Status of the transmission controller�s consent to engage the first or sole PTO drive mounted on the transmission case.
    #[allow(dead_code)]
    pub fn enggmntcnsnttransinputshaftpto1(&self) -> EnggmntCnsntTransInputShaftPto12566759678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnggmntCnsntTransInputShaftPto12566759678::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Status of the transmission controller�s consent to engage the second PTO drive mounted on the transmission case.
    #[allow(dead_code)]
    pub fn enggmntcnsnttransinputshaftpto2(&self) -> EnggmntCnsntTransInputShaftPto22566759678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnggmntCnsntTransInputShaftPto22566759678::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Status of the transmission controller�s consent to engage the PTO drive connected to the transmission output shaft.
    #[allow(dead_code)]
    pub fn enggmntcnsnttransoutputshaftpto(&self) -> EnggmntCnsntTransOutputShaftPto2566759678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnggmntCnsntTransOutputShaftPto2566759678::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Status of the transmission controller�s consent to engage the PTO drive connected to the transfer case output shaft.
    #[allow(dead_code)]
    pub fn enggmntcnsnttrnsfrcsotptshftpto(&self) -> EnggmntCnsntTrnsfrCsOtptShftPto2566759678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnggmntCnsntTrnsfrCsOtptShftPto2566759678::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Read EnableSwitchTransInputShaftPTO1 signal from can frame
    #[allow(dead_code)]
    pub fn enableswitchtransinputshaftpto1(&self) -> EnableSwitchTransInputShaftPto12566759678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableSwitchTransInputShaftPto12566759678::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Read EnableSwitchTransInputShaftPTO2 signal from can frame
    #[allow(dead_code)]
    pub fn enableswitchtransinputshaftpto2(&self) -> EnableSwitchTransInputShaftPto22566759678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableSwitchTransInputShaftPto22566759678::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Read EnableSwitchTransOutputShaftPTO signal from can frame
    #[allow(dead_code)]
    pub fn enableswitchtransoutputshaftpto(&self) -> EnableSwitchTransOutputShaftPto2566759678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableSwitchTransOutputShaftPto2566759678::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Read EnblSwtchTrnsfrCsOutputShaftPTO signal from can frame
    #[allow(dead_code)]
    pub fn enblswtchtrnsfrcsoutputshaftpto(&self) -> EnblSwtchTrnsfrCsOutputShaftPto2566759678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnblSwtchTrnsfrCsOutputShaftPto2566759678::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Fuel Information 3 (Gaseous)
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gfi3 {
    frame_payload: Vec<u8>,
}

impl Gfi3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gfi3 {
        Gfi3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gfi3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2432541438 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gfi3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Absolute pressure of gas on outlet side of the second fuel system control valve.
    #[allow(dead_code)]
    pub fn engfuelvalve2outletabspress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.100000
    }

    /// Temperature 2 of fuel (or gas).
    #[allow(dead_code)]
    pub fn engfueltemp2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 + -40f64
    }

    /// Read EngGasMassFlowRate2 signal from can frame
    #[allow(dead_code)]
    pub fn enggasmassflowrate2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.050000
    }

    /// Read EngFuelValve2InletAbsPress signal from can frame
    #[allow(dead_code)]
    pub fn engfuelvalve2inletabspress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// Engine Fluid Level/Pressure 4
#[allow(dead_code)]
#[derive(Debug)]
pub struct EflP4 {
    frame_payload: Vec<u8>,
}

impl EflP4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> EflP4 {
        EflP4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = EflP4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566761214 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| EflP4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The speed of a rotating (centrifugal) engine oil filter.
    #[allow(dead_code)]
    pub fn engcentrifugaloilfilterspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64 * 4.000000
    }

    /// The differential pressure measured across the input and output of the engine coolant pump.
    #[allow(dead_code)]
    pub fn engcoolantpumpdiffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 1.640000 + -7f64
    }

    /// Read EngChargeAirCooler2InletPress signal from can frame
    #[allow(dead_code)]
    pub fn engchargeaircooler2inletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 2.000000
    }

    /// Read EngChargeAirCooler1InletPress signal from can frame
    #[allow(dead_code)]
    pub fn engchargeaircooler1inletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 2.000000
    }

    /// Ratio of volume of liquid found in an engine intercooler cooling system to total engine intercooler cooling system volume.
    #[allow(dead_code)]
    pub fn engintercoolercoolantlevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 0.400000
    }

    /// Read EngChargeAirCoolerOutletPress signal from can frame
    #[allow(dead_code)]
    pub fn engchargeaircooleroutletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 2.000000
    }

    /// Ratio of aftercooler coolant system volume of liquid to total cooling system volume.
    #[allow(dead_code)]
    pub fn engaftercoolercoolantlevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 0.400000
    }
}

/// Electronic Engine Controller 6
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eec6 {
    frame_payload: Vec<u8>,
}

impl Eec6 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eec6 {
        Eec6 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eec6, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2432541694 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eec6::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Actuator that controls the variable geometry turbocharger geometry.
    #[allow(dead_code)]
    pub fn engvrablegeometryturboactuator1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 0.400000
    }

    /// Read EngTrbCmprssorBypassActuatorPos signal from can frame
    #[allow(dead_code)]
    pub fn engtrbcmprssorbypassactuatorpos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.400000
    }

    /// Read EngTurboCompressorCtrl signal from can frame
    #[allow(dead_code)]
    pub fn engturbocompressorctrl(&self) -> EngTurboCompressorCtrl2432541694 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngTurboCompressorCtrl2432541694::from(((frame_payload & 0xFFFF) as f64 * 0.002500) as u64)
    }
}

/// Door Control 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dc2 {
    frame_payload: Vec<u8>,
}

impl Dc2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dc2 {
        Dc2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dc2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566759934 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dc2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Enable status of bus door 10.
    #[allow(dead_code)]
    pub fn enablestatusofdoor10(&self) -> EnableStatusOfDoor102566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableStatusOfDoor102566759934::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// Read OpenStatusOfDoor10 signal from can frame
    #[allow(dead_code)]
    pub fn openstatusofdoor10(&self) -> OpenStatusOfDoor102566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OpenStatusOfDoor102566759934::from((((frame_payload >> 56) & 0x3) as f64) as u64)
    }

    /// Read LockStatusOfDoor10 signal from can frame
    #[allow(dead_code)]
    pub fn lockstatusofdoor10(&self) -> LockStatusOfDoor102566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LockStatusOfDoor102566759934::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Enable status of bus door 9.
    #[allow(dead_code)]
    pub fn enablestatusofdoor9(&self) -> EnableStatusOfDoor92566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableStatusOfDoor92566759934::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Read OpenStatusOfDoor9 signal from can frame
    #[allow(dead_code)]
    pub fn openstatusofdoor9(&self) -> OpenStatusOfDoor92566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OpenStatusOfDoor92566759934::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Read LockStatusOfDoor9 signal from can frame
    #[allow(dead_code)]
    pub fn lockstatusofdoor9(&self) -> LockStatusOfDoor92566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LockStatusOfDoor92566759934::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Enable status of bus door 8.
    #[allow(dead_code)]
    pub fn enablestatusofdoor8(&self) -> EnableStatusOfDoor82566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableStatusOfDoor82566759934::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Read OpenStatusOfDoor8 signal from can frame
    #[allow(dead_code)]
    pub fn openstatusofdoor8(&self) -> OpenStatusOfDoor82566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OpenStatusOfDoor82566759934::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Read LockStatusOfDoor8 signal from can frame
    #[allow(dead_code)]
    pub fn lockstatusofdoor8(&self) -> LockStatusOfDoor82566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LockStatusOfDoor82566759934::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Enable status of bus door 7.
    #[allow(dead_code)]
    pub fn enablestatusofdoor7(&self) -> EnableStatusOfDoor72566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableStatusOfDoor72566759934::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Read OpenStatusOfDoor7 signal from can frame
    #[allow(dead_code)]
    pub fn openstatusofdoor7(&self) -> OpenStatusOfDoor72566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OpenStatusOfDoor72566759934::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Read LockStatusOfDoor7 signal from can frame
    #[allow(dead_code)]
    pub fn lockstatusofdoor7(&self) -> LockStatusOfDoor72566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LockStatusOfDoor72566759934::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Enable status of bus door 6.
    #[allow(dead_code)]
    pub fn enablestatusofdoor6(&self) -> EnableStatusOfDoor62566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableStatusOfDoor62566759934::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Read OpenStatusOfDoor6 signal from can frame
    #[allow(dead_code)]
    pub fn openstatusofdoor6(&self) -> OpenStatusOfDoor62566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OpenStatusOfDoor62566759934::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Read LockStatusOfDoor6 signal from can frame
    #[allow(dead_code)]
    pub fn lockstatusofdoor6(&self) -> LockStatusOfDoor62566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LockStatusOfDoor62566759934::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Enable status of bus door 5.
    #[allow(dead_code)]
    pub fn enablestatusofdoor5(&self) -> EnableStatusOfDoor52566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableStatusOfDoor52566759934::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Read OpenStatusOfDoor5 signal from can frame
    #[allow(dead_code)]
    pub fn openstatusofdoor5(&self) -> OpenStatusOfDoor52566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OpenStatusOfDoor52566759934::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Read LockStatusOfDoor5 signal from can frame
    #[allow(dead_code)]
    pub fn lockstatusofdoor5(&self) -> LockStatusOfDoor52566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LockStatusOfDoor52566759934::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Enable status of bus door 4.
    #[allow(dead_code)]
    pub fn enablestatusofdoor4(&self) -> EnableStatusOfDoor42566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableStatusOfDoor42566759934::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Read OpenStatusOfDoor4 signal from can frame
    #[allow(dead_code)]
    pub fn openstatusofdoor4(&self) -> OpenStatusOfDoor42566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OpenStatusOfDoor42566759934::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read LockStatusOfDoor4 signal from can frame
    #[allow(dead_code)]
    pub fn lockstatusofdoor4(&self) -> LockStatusOfDoor42566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LockStatusOfDoor42566759934::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Enable status of bus door 3.
    #[allow(dead_code)]
    pub fn enablestatusofdoor3(&self) -> EnableStatusOfDoor32566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableStatusOfDoor32566759934::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Read OpenStatusOfDoor3 signal from can frame
    #[allow(dead_code)]
    pub fn openstatusofdoor3(&self) -> OpenStatusOfDoor32566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OpenStatusOfDoor32566759934::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// Read LockStatusOfDoor3 signal from can frame
    #[allow(dead_code)]
    pub fn lockstatusofdoor3(&self) -> LockStatusOfDoor32566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LockStatusOfDoor32566759934::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Enable status of bus door 2.
    #[allow(dead_code)]
    pub fn enablestatusofdoor2(&self) -> EnableStatusOfDoor22566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableStatusOfDoor22566759934::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Read OpenStatusOfDoor2 signal from can frame
    #[allow(dead_code)]
    pub fn openstatusofdoor2(&self) -> OpenStatusOfDoor22566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OpenStatusOfDoor22566759934::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Read LockStatusOfDoor2 signal from can frame
    #[allow(dead_code)]
    pub fn lockstatusofdoor2(&self) -> LockStatusOfDoor22566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LockStatusOfDoor22566759934::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Enable status of bus door 1.
    #[allow(dead_code)]
    pub fn enablestatusofdoor1(&self) -> EnableStatusOfDoor12566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EnableStatusOfDoor12566759934::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Read OpenStatusOfDoor1 signal from can frame
    #[allow(dead_code)]
    pub fn openstatusofdoor1(&self) -> OpenStatusOfDoor12566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OpenStatusOfDoor12566759934::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Read LockStatusOfDoor1 signal from can frame
    #[allow(dead_code)]
    pub fn lockstatusofdoor1(&self) -> LockStatusOfDoor12566759934 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LockStatusOfDoor12566759934::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Catalyst Reagent Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Cri1 {
    frame_payload: Vec<u8>,
}

impl Cri1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Cri1 {
        Cri1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Cri1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566757374 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Cri1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter indicates what reagent is in the tank.
    #[allow(dead_code)]
    pub fn catalystreagenttype(&self) -> CatalystReagentType2566757374 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CatalystReagentType2566757374::from((((frame_payload >> 40) & 0xF) as f64) as u64)
    }

    /// Used to identify the applicable J1939-73 FMI that applies to the most significant failure of the catalyst reagent properties sensor.
    #[allow(dead_code)]
    pub fn ctlystrgntprprtespreliminaryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0x1F) as f64
    }

    /// Used to identify the applicable J1939-73 FMI that applies to the most significant failure of the catalyst temperature sensor.
    #[allow(dead_code)]
    pub fn ctlystragenttemp2preliminaryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0x1F) as f64
    }

    /// A measure of the conductivity of the reagent or fluid at the sensor.
    #[allow(dead_code)]
    pub fn catalystreagentconductivity(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 5.000000
    }

    /// A measure of the concentration of urea in water.
    #[allow(dead_code)]
    pub fn catalystreagentconcentration(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.250000
    }

    /// Read CatalystReagentTemp2 signal from can frame
    #[allow(dead_code)]
    pub fn catalystreagenttemp2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -40f64
    }
}

/// After Treatment Historical Information #2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ahi2 {
    frame_payload: Vec<u8>,
}

impl Ahi2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ahi2 {
        Ahi2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ahi2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566756862 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ahi2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total amount of time that Aftertreatment device 2 has been in passive regeneration over the lifetime of the device.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2ttlpssvrgnrationtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 128) & 0xFFFFFFFF) as f64
    }

    /// Total number of passive regenerations by Aftertreatment device 2 over the lifetime of the device.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2ttlnmbrofpssvrgnrtns(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 160) & 0xFFFFFFFF) as f64
    }

    /// Total number of Aftertreatment device 2 active regeneration manual requests by the operator over the lifetime of the device.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2ttlnmbrofactvrgnrtnmn(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 224) & 0xFFFFFFFF) as f64
    }

    /// Total number of Aftertreatment device 2 active regeneration inhibit requests by the operator over the lifetime of the device.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2ttlnmbrofactvrgnrtnin(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 192) & 0xFFFFFFFF) as f64
    }

    /// Total number of active regenerations by after treatment device 2 over the lifetime of the device.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2ttlnmbrofactvrgnrtns(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 96) & 0xFFFFFFFF) as f64
    }

    /// Total amount of time that after treatment 2 regeneration has been manually disabled.
    #[allow(dead_code)]
    pub fn aftrtreatment2totaldisabledtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFFFFFF) as f64
    }

    /// Total amount of time that after treatment device 2 has been regenerating over the lifetime of the device.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2ttalregenerationtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64
    }

    /// Total amount of fuel used by after treatment device 2 over the lifetime of the device.
    #[allow(dead_code)]
    pub fn aftertreatment2totalfuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.500000
    }
}

/// After Treatment Fuel Control #2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Afc2 {
    frame_payload: Vec<u8>,
}

impl Afc2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Afc2 {
        Afc2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Afc2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566758654 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Afc2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftrtratment2FuelEnableActuator signal from can frame
    #[allow(dead_code)]
    pub fn aftrtratment2fuelenableactuator(&self) -> Aftrtratment2FuelEnableActuator2566758654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtratment2FuelEnableActuator2566758654::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Read Aftrtratment2RegenerationStatus signal from can frame
    #[allow(dead_code)]
    pub fn aftrtratment2regenerationstatus(&self) -> Aftrtratment2RegenerationStatus2566758654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtratment2RegenerationStatus2566758654::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Indicates whether aftertreatment #2 ignition circuit is energized by the ECM.
    #[allow(dead_code)]
    pub fn aftertreatment2ignt(&self) -> Aftertreatment2Ignt2566758654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftertreatment2Ignt2566758654::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Position that the controller is commanding the aftertreatment #2 fuel pressure control to maintain.
    #[allow(dead_code)]
    pub fn aftertreatment2fuelpressctrl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.002500
    }

    /// Read Aftertreatment2FuelRate signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment2fuelrate(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.050000
    }

    /// Pressure of the fuel for Aftertreatment #2.
    #[allow(dead_code)]
    pub fn aftertreatment2fuelpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// After Treatment Fuel Control #1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Afc1 {
    frame_payload: Vec<u8>,
}

impl Afc1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Afc1 {
        Afc1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Afc1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566758910 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Afc1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftrtratment1FuelEnableActuator signal from can frame
    #[allow(dead_code)]
    pub fn aftrtratment1fuelenableactuator(&self) -> Aftrtratment1FuelEnableActuator2566758910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtratment1FuelEnableActuator2566758910::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Read Aftrtratment1RegenerationStatus signal from can frame
    #[allow(dead_code)]
    pub fn aftrtratment1regenerationstatus(&self) -> Aftrtratment1RegenerationStatus2566758910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtratment1RegenerationStatus2566758910::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Indicates whether aftertreatment #1 ignition circuit is energized by the ECM.
    #[allow(dead_code)]
    pub fn aftertreatment1ignt(&self) -> Aftertreatment1Ignt2566758910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftertreatment1Ignt2566758910::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Position that the controller is commanding the aftertreatment #1 fuel pressure control to maintain.
    #[allow(dead_code)]
    pub fn aftertreatment1fuelpressctrl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.002500
    }

    /// Read Aftertreatment1FuelRate signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment1fuelrate(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.050000
    }

    /// Pressure of the fuel for Aftertreatment #1.
    #[allow(dead_code)]
    pub fn aftertreatment1fuelpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// After Treatment Air Control #2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Aac2 {
    frame_payload: Vec<u8>,
}

impl Aac2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Aac2 {
        Aac2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Aac2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566758142 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Aac2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftrtreatment2AirEnableActuator signal from can frame
    #[allow(dead_code)]
    pub fn aftrtreatment2airenableactuator(&self) -> Aftrtreatment2AirEnableActuator2566758142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtreatment2AirEnableActuator2566758142::from((((frame_payload >> 62) & 0x3) as f64) as u64)
    }

    /// Read Aftertreatment2PurgeAirActuator signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment2purgeairactuator(&self) -> Aftertreatment2PurgeAirActuator2566758142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftertreatment2PurgeAirActuator2566758142::from((((frame_payload >> 60) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt2AtmzationAirActuator signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2atmzationairactuator(&self) -> Aftrtrtmnt2AtmzationAirActuator2566758142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt2AtmzationAirActuator2566758142::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// Read Aftertreatment2AirSystemRelay signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment2airsystemrelay(&self) -> Aftertreatment2AirSystemRelay2566758142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftertreatment2AirSystemRelay2566758142::from((((frame_payload >> 56) & 0x3) as f64) as u64)
    }

    /// Position of the #2 aftertreatment air pressure actuator as measured by a position feedback sensor.
    #[allow(dead_code)]
    pub fn aftrtrtment2airpressactuatorpos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 0.400000
    }

    /// Position that the controller is commanding the aftertreatment #2 air pressure control to maintain.
    #[allow(dead_code)]
    pub fn aftertreatment2airpressctrl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.002500
    }

    /// Read Aftertreatment2PurgeAirPress signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment2purgeairpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }

    /// Read Aftertreatment2SupplyAirPress signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment2supplyairpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// After Treatment Air Control #1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Aac1 {
    frame_payload: Vec<u8>,
}

impl Aac1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Aac1 {
        Aac1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Aac1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566758398 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Aac1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftrtreatment1AirEnableActuator signal from can frame
    #[allow(dead_code)]
    pub fn aftrtreatment1airenableactuator(&self) -> Aftrtreatment1AirEnableActuator2566758398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtreatment1AirEnableActuator2566758398::from((((frame_payload >> 62) & 0x3) as f64) as u64)
    }

    /// Read Aftertreatment1PurgeAirActuator signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment1purgeairactuator(&self) -> Aftertreatment1PurgeAirActuator2566758398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftertreatment1PurgeAirActuator2566758398::from((((frame_payload >> 60) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt1AtmzationAirActuator signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1atmzationairactuator(&self) -> Aftrtrtmnt1AtmzationAirActuator2566758398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt1AtmzationAirActuator2566758398::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// Read Aftertreatment1AirSystemRelay signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment1airsystemrelay(&self) -> Aftertreatment1AirSystemRelay2566758398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftertreatment1AirSystemRelay2566758398::from((((frame_payload >> 56) & 0x3) as f64) as u64)
    }

    /// Position of the #1 aftertreatment air pressure actuator as measured by a position feedback sensor.
    #[allow(dead_code)]
    pub fn aftrtrtment1airpressactuatorpos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 0.400000
    }

    /// Position that the controller is commanding the aftertreatment #1 air pressure control to maintain.
    #[allow(dead_code)]
    pub fn aftertreatment1airpressctrl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.002500
    }

    /// Read Aftertreatment1PurgeAirPress signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment1purgeairpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }

    /// Read Aftertreatment1SupplyAirPress signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment1supplyairpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// After Treatment Historical Information #1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ahi1 {
    frame_payload: Vec<u8>,
}

impl Ahi1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ahi1 {
        Ahi1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ahi1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566756606 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ahi1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total number of active regenerations by after treatment device 1 over the lifetime of the device.
    #[allow(dead_code)]
    pub fn aftrtrtmnt1ttlnmbrofactvrgnrtns(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 96) & 0xFFFFFFFF) as f64
    }

    /// Total amount of time that after treatment device 1 has been regenerating over the lifetime of the device.
    #[allow(dead_code)]
    pub fn aftrtrtmnt1ttalregenerationtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64
    }

    /// Total amount of time that after treatment 1 regeneration has been manually disabled.
    #[allow(dead_code)]
    pub fn aftrtreatment1totaldisabledtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFFFFFF) as f64
    }

    /// Total amount of fuel used by after treatment device 1 over the lifetime of the device.
    #[allow(dead_code)]
    pub fn aftertreatment1totalfuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.500000
    }
}

/// Requested Generator Average Basic AC Quantities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Rgaaq {
    frame_payload: Vec<u8>,
}

impl Rgaaq {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Rgaaq {
        Rgaaq { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Rgaaq, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364546302 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Rgaaq::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The requested average AC RMS voltage to be delivered by the generator.
    #[allow(dead_code)]
    pub fn rqdgnrtravrglnelineacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.007812
    }
}

/// Engine Throttle / Fuel Actuator Control Command
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tfac {
    frame_payload: Vec<u8>,
}

impl Tfac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tfac {
        Tfac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tfac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2431654654 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tfac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngThrottleActuator2CtrlCmd signal from can frame
    #[allow(dead_code)]
    pub fn engthrottleactuator2ctrlcmd(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.002500
    }

    /// Read EngThrottleActuator1CtrlCmd signal from can frame
    #[allow(dead_code)]
    pub fn engthrottleactuator1ctrlcmd(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.002500
    }

    /// Read EngFuelActuator2CtrlCmd signal from can frame
    #[allow(dead_code)]
    pub fn engfuelactuator2ctrlcmd(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.002500
    }

    /// Read EngFuelActuator1CtrlCmd signal from can frame
    #[allow(dead_code)]
    pub fn engfuelactuator1ctrlcmd(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.002500
    }
}

/// Engine Knock Level #3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Kl3 {
    frame_payload: Vec<u8>,
}

impl Kl3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Kl3 {
        Kl3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Kl3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364545534 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Kl3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Used to indicate the level of knock for engine cylinder 24.
    #[allow(dead_code)]
    pub fn engcyl24knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 23.
    #[allow(dead_code)]
    pub fn engcyl23knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 22.
    #[allow(dead_code)]
    pub fn engcyl22knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 21.
    #[allow(dead_code)]
    pub fn engcyl21knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 20.
    #[allow(dead_code)]
    pub fn engcyl20knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 19.
    #[allow(dead_code)]
    pub fn engcyl19knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 18.
    #[allow(dead_code)]
    pub fn engcyl18knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 17.
    #[allow(dead_code)]
    pub fn engcyl17knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Engine Knock Level #2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Kl2 {
    frame_payload: Vec<u8>,
}

impl Kl2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Kl2 {
        Kl2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Kl2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364545278 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Kl2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Used to indicate the level of knock for engine cylinder 15.
    #[allow(dead_code)]
    pub fn engcyl15knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 14.
    #[allow(dead_code)]
    pub fn engcyl14knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 13.
    #[allow(dead_code)]
    pub fn engcyl13knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 12.
    #[allow(dead_code)]
    pub fn engcyl12knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 11.
    #[allow(dead_code)]
    pub fn engcyl11knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 10.
    #[allow(dead_code)]
    pub fn engcyl10knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 9.
    #[allow(dead_code)]
    pub fn engcyl9knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 16.
    #[allow(dead_code)]
    pub fn engcyl16knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64
    }
}

/// Engine Knock Level #1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Kl1 {
    frame_payload: Vec<u8>,
}

impl Kl1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Kl1 {
        Kl1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Kl1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364545022 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Kl1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Used to indicate the level of knock for engine cylinder 8.
    #[allow(dead_code)]
    pub fn engcyl8knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 7.
    #[allow(dead_code)]
    pub fn engcyl7knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 6.
    #[allow(dead_code)]
    pub fn engcyl6knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 5.
    #[allow(dead_code)]
    pub fn engcyl5knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 4.
    #[allow(dead_code)]
    pub fn engcyl4knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 3.
    #[allow(dead_code)]
    pub fn engcyl3knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 2.
    #[allow(dead_code)]
    pub fn engcyl2knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Used to indicate the level of knock for engine cylinder 1.
    #[allow(dead_code)]
    pub fn engcyl1knocklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Cylinder Combustion Status
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ccs {
    frame_payload: Vec<u8>,
}

impl Ccs {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ccs {
        Ccs { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ccs, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364544766 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ccs::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngCyl9CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl9combustionstatus(&self) -> EngCyl9CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl9CombustionStatus2364544766::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Read EngCyl8CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl8combustionstatus(&self) -> EngCyl8CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl8CombustionStatus2364544766::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// Read EngCyl7CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl7combustionstatus(&self) -> EngCyl7CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl7CombustionStatus2364544766::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Read EngCyl6CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl6combustionstatus(&self) -> EngCyl6CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl6CombustionStatus2364544766::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Read EngCyl5CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl5combustionstatus(&self) -> EngCyl5CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl5CombustionStatus2364544766::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Read EngCyl4CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl4combustionstatus(&self) -> EngCyl4CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl4CombustionStatus2364544766::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Read EngCyl3CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl3combustionstatus(&self) -> EngCyl3CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl3CombustionStatus2364544766::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Read EngCyl2CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl2combustionstatus(&self) -> EngCyl2CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl2CombustionStatus2364544766::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Read EngCyl24CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl24combustionstatus(&self) -> EngCyl24CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl24CombustionStatus2364544766::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Read EngCyl23CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl23combustionstatus(&self) -> EngCyl23CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl23CombustionStatus2364544766::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Read EngCyl22CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl22combustionstatus(&self) -> EngCyl22CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl22CombustionStatus2364544766::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Read EngCyl21CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl21combustionstatus(&self) -> EngCyl21CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl21CombustionStatus2364544766::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Read EngCyl20CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl20combustionstatus(&self) -> EngCyl20CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl20CombustionStatus2364544766::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Read EngCyl1CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl1combustionstatus(&self) -> EngCyl1CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl1CombustionStatus2364544766::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// Read EngCyl19CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl19combustionstatus(&self) -> EngCyl19CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl19CombustionStatus2364544766::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Read EngCyl18CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl18combustionstatus(&self) -> EngCyl18CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl18CombustionStatus2364544766::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Read EngCyl17CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl17combustionstatus(&self) -> EngCyl17CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl17CombustionStatus2364544766::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Read EngCyl16CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl16combustionstatus(&self) -> EngCyl16CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl16CombustionStatus2364544766::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Read EngCyl15CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl15combustionstatus(&self) -> EngCyl15CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl15CombustionStatus2364544766::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Read EngCyl14CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl14combustionstatus(&self) -> EngCyl14CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl14CombustionStatus2364544766::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Read EngCyl13CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl13combustionstatus(&self) -> EngCyl13CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl13CombustionStatus2364544766::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Read EngCyl12CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl12combustionstatus(&self) -> EngCyl12CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl12CombustionStatus2364544766::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Read EngCyl11CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl11combustionstatus(&self) -> EngCyl11CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl11CombustionStatus2364544766::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read EngCyl10CombustionStatus signal from can frame
    #[allow(dead_code)]
    pub fn engcyl10combustionstatus(&self) -> EngCyl10CombustionStatus2364544766 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCyl10CombustionStatus2364544766::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }
}

/// Requested Generator Total AC Reactive Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Rgtarp {
    frame_payload: Vec<u8>,
}

impl Rgtarp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Rgtarp {
        Rgtarp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Rgtarp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364544510 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Rgtarp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The requested lead/lag status for the generator average AC power factor
    #[allow(dead_code)]
    pub fn rqgenoverallpowerfactorlagging(&self) -> RqGenOverallPowerFactorLagging2364544510 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RqGenOverallPowerFactorLagging2364544510::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// The requested average power factor of the generator.
    #[allow(dead_code)]
    pub fn rqgeneratoroverallpowerfactor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.000061 + -1f64
    }

    /// The total reactive power requested to be delivered by the generator
    #[allow(dead_code)]
    pub fn rqgeneratortotalacreactivepower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Blade Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Bi {
    frame_payload: Vec<u8>,
}

impl Bi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Bi {
        Bi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Bi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364544254 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Bi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Figure of merit for blade rotation measurement.
    #[allow(dead_code)]
    pub fn bladerotationanglefigureofmerit(&self) -> BladeRotationAngleFigureOfMerit2364544254 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BladeRotationAngleFigureOfMerit2364544254::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Figure of merit for blade height measurement.
    #[allow(dead_code)]
    pub fn relbladeheightfigureofmerit(&self) -> RelBladeHeightFigureOfMerit2364544254 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RelBladeHeightFigureOfMerit2364544254::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// The estimated measurement latency of the measurement.
    #[allow(dead_code)]
    pub fn relblademeasurementlatency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 0.500000
    }

    /// The blade rotation angle measurement around the yaw (z-axis).
    #[allow(dead_code)]
    pub fn bladerotationangle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// The measured vertical distance from a fixed location on the machine blade to a ground-based reference.
    #[allow(dead_code)]
    pub fn relativebladeheight(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000 + -3200f64
    }
}

/// ISO 11992: Towing vehicle message, electronic brake system #1/1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ebs11 {
    frame_payload: Vec<u8>,
}

impl Ebs11 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ebs11 {
        Ebs11 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ebs11, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2349006590 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ebs11::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The demanded value of the retarder on the towed vehicle(s) as a percentage of the absolute peak torque of retarder.
    #[allow(dead_code)]
    pub fn retarderdemandvalue(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 + -125f64
    }

    /// The requested brake pressure value of the parking brake as a percentage of maximum.
    #[allow(dead_code)]
    pub fn parkbrakedemandvalue(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 0.400000
    }

    /// The requested brake pressure value of the service brake demanded by the driver.
    #[allow(dead_code)]
    pub fn servicebrakedemandvalue(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.019531
    }

    /// Information to identify a dolly axle within the road train.
    #[allow(dead_code)]
    pub fn vehicletype(&self) -> VehicleType2349006590 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleType2349006590::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that the brake pedal is being pressed.
    #[allow(dead_code)]
    pub fn brakelightswitch(&self) -> BrakeLightSwitch2349006590 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BrakeLightSwitch2349006590::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that ASR engine control is active/passive.
    #[allow(dead_code)]
    pub fn asrenginecontrolactive(&self) -> AsrEngineControlActive2349006590 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AsrEngineControlActive2349006590::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that ASR brake control is active/passive.
    #[allow(dead_code)]
    pub fn asrbreakcontrolactive(&self) -> AsrBreakControlActive2349006590 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AsrBreakControlActive2349006590::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This signal indicates the active/passive state in all cases when the installed retarder is applied by the driver�s demand or by other systems (brakes).
    #[allow(dead_code)]
    pub fn vehicleretarderctrlactive(&self) -> VehicleRetarderCtrlActive2349006590 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleRetarderCtrlActive2349006590::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Signal indicating the ABS is active/passive.
    #[allow(dead_code)]
    pub fn vehicleabsactive(&self) -> VehicleAbsActive2349006590 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleAbsActive2349006590::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// ISO 11992: Towing vehicle message, electronic brake system #1/2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ebs12 {
    frame_payload: Vec<u8>,
}

impl Ebs12 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ebs12 {
        Ebs12 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ebs12, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566834686 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ebs12::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Estimated value of the current road curvature for use by the adaptive cruise control system.
    #[allow(dead_code)]
    pub fn roadcurvature(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.007812 + -250f64
    }

    /// Signal which indicates that the towing vehicle has a pneumatic control line for the towed vehicle service braking system
    #[allow(dead_code)]
    pub fn pneumaticcontrolline(&self) -> PneumaticControlLine2566834686 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PneumaticControlLine2566834686::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Request to activate the ABS off-road function. The switch signal is independent of an actual ABS control situation.
    #[allow(dead_code)]
    pub fn absoffroadrequest(&self) -> AbsOffroadRequest2566834686 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AbsOffroadRequest2566834686::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that the service brake demand value sent by the towing vehicle can be generated by one or two independent electrical braking circuit(s).
    #[allow(dead_code)]
    pub fn twoelcircuitsbrakedemand(&self) -> TwoElCircuitsBrakeDemand2566834686 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TwoElCircuitsBrakeDemand2566834686::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// This signal indicates the active/passive state in all cases when the installed retarder is applied by the driver�s demand or by other systems (brakes).
    #[allow(dead_code)]
    pub fn vehicleretarderctrlactive(&self) -> VehicleRetarderCtrlActive2566834686 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleRetarderCtrlActive2566834686::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// ISO 11992: Towed vehicle message, electronic brake system #2/1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ebs21 {
    frame_payload: Vec<u8>,
}

impl Ebs21 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ebs21 {
        Ebs21 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ebs21, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2550398718 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ebs21::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Difference between the wheel speed at the right side and and the left side of the main axle.
    #[allow(dead_code)]
    pub fn wheelspeeddiffmainaxle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64 * 0.003906 + -125f64
    }

    /// Actual torque of the retarder as negative percentage of maximum.
    #[allow(dead_code)]
    pub fn actualretarderperctorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 + -125f64
    }

    /// Actual speed of the vehicle (positive value for forward and backward speed) calculated as the average of the wheel speeds of one axle influenced by slip and filtered by a frequency range of 5 Hz to 20 Hz.
    #[allow(dead_code)]
    pub fn wheel_basedvehiclespeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.003906
    }

    /// Signal indicating the trailer is requesting to be braked by the commercial vehicle by means of bleeding the pneumatic supply line.
    #[allow(dead_code)]
    pub fn supplylinebrakingrequest(&self) -> SupplyLineBrakingRequest2550398718 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SupplyLineBrakingRequest2550398718::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that Vehicle Dynamic Control (VDC) is active/passive.
    #[allow(dead_code)]
    pub fn vdcactive(&self) -> VdcActive2550398718 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VdcActive2550398718::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Signal indicating the automatic towed vehicle braking is active/passive.
    #[allow(dead_code)]
    pub fn automtowedvehbreakactive(&self) -> AutomTowedVehBreakActive2550398718 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AutomTowedVehBreakActive2550398718::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Signal indicating the service brake of the towed vehicle is active/passive, by observing the brake pressure.
    #[allow(dead_code)]
    pub fn vehicleservicebrakeactive(&self) -> VehicleServiceBrakeActive2550398718 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleServiceBrakeActive2550398718::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This signal indicates the active/passive state in all cases when the installed retarder is applied by the driver�s demand or by other systems (brakes).
    #[allow(dead_code)]
    pub fn vehicleretarderctrlactive(&self) -> VehicleRetarderCtrlActive2550398718 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleRetarderCtrlActive2550398718::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Signal indicating the ABS is active/passive.
    #[allow(dead_code)]
    pub fn vehicleabsactive(&self) -> VehicleAbsActive2550398718 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleAbsActive2550398718::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// ISO 11992: Towed vehicle message, electronic brake system #2/2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ebs22 {
    frame_payload: Vec<u8>,
}

impl Ebs22 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ebs22 {
        Ebs22 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ebs22, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566833406 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ebs22::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter is the 100% reference value for all defined indicated retarder torque parameters.
    #[allow(dead_code)]
    pub fn referenceretardertorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Sum of the static vertical loads of the vehicle axles.
    #[allow(dead_code)]
    pub fn axleloadsum(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 2.000000
    }

    /// Signal indicating the trailer is requesting to be braked by the commercial vehicle by means of bleeding the pneumatic supply line.
    #[allow(dead_code)]
    pub fn supplylinebrakingrequest(&self) -> SupplyLineBrakingRequest2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SupplyLineBrakingRequest2566833406::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// The parameter indicates whether the loading ramp approach assistance is activated.
    #[allow(dead_code)]
    pub fn loadingrampapproachassist(&self) -> LoadingRampApproachAssist2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LoadingRampApproachAssist2566833406::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Signal indicating the vehicle spring brake is engaged.
    #[allow(dead_code)]
    pub fn springbrakeengaged(&self) -> SpringBrakeEngaged2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SpringBrakeEngaged2566833406::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Signal indicating the vehicle is equipped with an electrical load proportional function.
    #[allow(dead_code)]
    pub fn electrloadpropfunc(&self) -> ElectrLoadPropFunc2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ElectrLoadPropFunc2566833406::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Signal indicating the vehicle has one or more axle(s) fitted with spring brakes.
    #[allow(dead_code)]
    pub fn springbrakeinstalled(&self) -> SpringBrakeInstalled2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SpringBrakeInstalled2566833406::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Information to identify a dolly axle within the road train.
    #[allow(dead_code)]
    pub fn vehicletype(&self) -> VehicleType2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleType2566833406::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the status of the supply of non-braking systems.
    #[allow(dead_code)]
    pub fn elecsupplyofnonbrakingsys(&self) -> ElecSupplyOfNonBrakingSys2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ElecSupplyOfNonBrakingSys2566833406::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// Request from the towed vehicle to the commercial vehicle to activate the amber warning signal on the commercial vehicle.
    #[allow(dead_code)]
    pub fn amberwarningsignalreq(&self) -> AmberWarningSignalReq2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AmberWarningSignalReq2566833406::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Request from the towed vehicle to the commercial vehicle to activate the red warning signal on the commercial vehicle, which indicates certain specified failures within the braking equipment of the towed vehicles.
    #[allow(dead_code)]
    pub fn redwarningsignalrequest(&self) -> RedWarningSignalRequest2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RedWarningSignalRequest2566833406::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Signal indicating the actual supply voltage is sufficient/insufficient for proper brake function (including over voltage).
    #[allow(dead_code)]
    pub fn vehicleelectrsupplysuff(&self) -> VehicleElectrSupplySuff2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleElectrSupplySuff2566833406::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Signal indicating the automatic towed vehicle braking is active/passive.
    #[allow(dead_code)]
    pub fn automtowedvehbreakactive(&self) -> AutomTowedVehBreakActive2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AutomTowedVehBreakActive2566833406::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Signal indicating the service brake of the towed vehicle is active/passive, by observing the brake pressure.
    #[allow(dead_code)]
    pub fn vehicleservicebrakeactive(&self) -> VehicleServiceBrakeActive2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleServiceBrakeActive2566833406::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This signal indicates the active/passive state in all cases when the installed retarder is applied by the driver�s demand or by other systems (brakes).
    #[allow(dead_code)]
    pub fn vehicleretarderctrlactive(&self) -> VehicleRetarderCtrlActive2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleRetarderCtrlActive2566833406::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Signal indicating the ABS is active/passive.
    #[allow(dead_code)]
    pub fn vehicleabsactive(&self) -> VehicleAbsActive2566833406 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleAbsActive2566833406::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// ISO 11992: Towed vehicle message, electronic brake system #2/3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ebs23 {
    frame_payload: Vec<u8>,
}

impl Ebs23 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ebs23 {
        Ebs23 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ebs23, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365507326 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ebs23::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Actual supply pressure of the reservoir of the braking system.
    #[allow(dead_code)]
    pub fn pneumaticsupplypressure(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 5.000000
    }

    /// Actual brake temperature.
    #[allow(dead_code)]
    pub fn braketemperature(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 10.000000
    }

    /// Actual relative value of brake lining of a specific brake.
    #[allow(dead_code)]
    pub fn brakelining(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 0.400000
    }

    /// Actual tyre pressure without corrections.
    #[allow(dead_code)]
    pub fn tyrepressure(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 10.000000
    }

    /// Second part of identification number of the tyre or wheel (the number of axles).
    #[allow(dead_code)]
    pub fn tyrewheelidenttemp2(&self) -> TyreWheelIdentTemp22365507326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TyreWheelIdentTemp22365507326::from((((frame_payload >> 28) & 0xF) as f64) as u64)
    }

    /// First part of identification number of the tyre or wheel (position on each axle).
    #[allow(dead_code)]
    pub fn tyrewheelidenttemp1(&self) -> TyreWheelIdentTemp12365507326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TyreWheelIdentTemp12365507326::from((((frame_payload >> 24) & 0xF) as f64) as u64)
    }

    /// Second part of identification number of the tyre or wheel (the number of axles).
    #[allow(dead_code)]
    pub fn tyrewheelidentpressure2(&self) -> TyreWheelIdentPressure22365507326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TyreWheelIdentPressure22365507326::from((((frame_payload >> 12) & 0xF) as f64) as u64)
    }

    /// First part of identification number of the tyre or wheel (position on each axle).
    #[allow(dead_code)]
    pub fn tyrewheelidentpressure1(&self) -> TyreWheelIdentPressure12365507326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TyreWheelIdentPressure12365507326::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// Second part of identification number of the tyre or wheel (the number of axles).
    #[allow(dead_code)]
    pub fn tyrewheelidentlining2(&self) -> TyreWheelIdentLining22365507326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TyreWheelIdentLining22365507326::from((((frame_payload >> 20) & 0xF) as f64) as u64)
    }

    /// First part of identification number of the tyre or wheel (position on each axle).
    #[allow(dead_code)]
    pub fn tyrewheelidentlining1(&self) -> TyreWheelIdentLining12365507326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TyreWheelIdentLining12365507326::from((((frame_payload >> 16) & 0xF) as f64) as u64)
    }

    /// Signal indicating the actual supply pressure of the reservoir of the braking system is insufficient or sufficient.
    #[allow(dead_code)]
    pub fn vehiclepneumsupplysuff(&self) -> VehiclePneumSupplySuff2365507326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehiclePneumSupplySuff2365507326::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that the brake temperature is higher than a specific level.
    #[allow(dead_code)]
    pub fn braketemperaturestatus(&self) -> BrakeTemperatureStatus2365507326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BrakeTemperatureStatus2365507326::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that the brake lining is sufficient/insufficient.
    #[allow(dead_code)]
    pub fn brakeliningsufficient(&self) -> BrakeLiningSufficient2365507326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BrakeLiningSufficient2365507326::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that the tyre pressure is insufficient
    #[allow(dead_code)]
    pub fn tyrepressuresufficient(&self) -> TyrePressureSufficient2365507326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TyrePressureSufficient2365507326::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// ISO 11992: Towing vehicle message, general purpose message #1/1
/// 
/// GPM 11 replaces GFM 11 in ISO 11992:1998 part 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpm11 {
    frame_payload: Vec<u8>,
}

impl Gpm11 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpm11 {
        Gpm11 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpm11, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565013246 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpm11::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Command signal to switch on or off the obstacle detection device (ODD).
    #[allow(dead_code)]
    pub fn oddrequest(&self) -> OddRequest2565013246 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OddRequest2565013246::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Command signal to activate the anti-theft device.
    #[allow(dead_code)]
    pub fn antitheftdevicereq(&self) -> AntiTheftDeviceReq2565013246 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AntiTheftDeviceReq2565013246::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Information to identify a dolly axle within the road train.
    #[allow(dead_code)]
    pub fn vehicletype(&self) -> VehicleType2565013246 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleType2565013246::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// ISO 11992: Towing vehicle message, general purpose message #1/2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpm12 {
    frame_payload: Vec<u8>,
}

impl Gpm12 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpm12 {
        Gpm12 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpm12, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566807038 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpm12::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Maximum vehicle velocity allowed.
    #[allow(dead_code)]
    pub fn maxvehiclespeedlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64
    }

    /// The engine speed which cannot be exceeded.
    #[allow(dead_code)]
    pub fn enginespeedupperlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.125000
    }

    /// The minimum engine speed which the engine is allowed to reach.
    #[allow(dead_code)]
    pub fn enginespeedlowerlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.125000
    }
}

/// ISO 11992: Towing vehicle message, general purpose message #1/3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpm13 {
    frame_payload: Vec<u8>,
}

impl Gpm13 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpm13 {
        Gpm13 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpm13, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365480958 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpm13::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// State signal which indicates which engine torque mode is currently generating, limiting, or controlling the torque
    #[allow(dead_code)]
    pub fn enginetorquemode(&self) -> EngineTorqueMode2365480958 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngineTorqueMode2365480958::from(((frame_payload & 0xF) as f64) as u64)
    }

    /// Read VehicleSpeed signal from can frame
    #[allow(dead_code)]
    pub fn vehiclespeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.003906
    }

    /// The ratio of actual engine percent torque to maximum indicated torque available at the current engine speed, clipped to zero torque during engine braking.
    #[allow(dead_code)]
    pub fn percentloadatcurrentspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64
    }

    /// Actual engine speed which is calculated over a minimum crankshaft angle of 720 degrees divided by
    /// the number of cylinders.
    #[allow(dead_code)]
    pub fn enginespeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64 * 0.125000
    }

    /// The calculated output torque of the engine.
    #[allow(dead_code)]
    pub fn actualengine_perctorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -125f64
    }

    /// The torque output of the engine requested by the driver.
    #[allow(dead_code)]
    pub fn driversdemandengine_perctorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -125f64
    }

    /// Signal which indicates whether the engine is running.
    #[allow(dead_code)]
    pub fn enginerunning(&self) -> EngineRunning2365480958 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngineRunning2365480958::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates that engine control is allowed.
    #[allow(dead_code)]
    pub fn enginecontrolallowed(&self) -> EngineControlAllowed2365480958 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngineControlAllowed2365480958::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }
}

/// ISO 11992: Towing vehicle message, general purpose message #1/4
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpm14 {
    frame_payload: Vec<u8>,
}

impl Gpm14 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpm14 {
        Gpm14 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpm14, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566808062 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpm14::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Signal which indicates the current state of the clutch independent power take off.
    #[allow(dead_code)]
    pub fn clutchindptdptofeedback(&self) -> ClutchIndptdPtoFeedback2566808062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ClutchIndptdPtoFeedback2566808062::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// The ratio of actual accelerator pedal position to maximum pedal position.
    #[allow(dead_code)]
    pub fn accelpedalposition(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 0.400000
    }

    /// Switch signal which indicates whether the accelerator pedal low idle switch is opened or closed.
    #[allow(dead_code)]
    pub fn accelpedallowidleswitch(&self) -> AccelPedalLowIdleSwitch2566808062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AccelPedalLowIdleSwitch2566808062::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Signal which indicates whether the starter is in use.
    #[allow(dead_code)]
    pub fn starteractive(&self) -> StarterActive2566808062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        StarterActive2566808062::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Temperature of the torque converter lubricant.
    #[allow(dead_code)]
    pub fn torqueconvoiltemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Signal which indicates that the torque converter oil temperature has reached its warning level.
    #[allow(dead_code)]
    pub fn torqueconvtoiltempwarning(&self) -> TorqueConvtOilTempWarning2566808062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TorqueConvtOilTempWarning2566808062::from((((frame_payload >> 28) & 0x7) as f64) as u64)
    }

    /// Switch signal which indicates that PTO control is allowed.
    #[allow(dead_code)]
    pub fn ptocontrolallowed(&self) -> PtoControlAllowed2566808062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PtoControlAllowed2566808062::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the current state of the second engine mounted power take off.
    #[allow(dead_code)]
    pub fn secenginemtdptofeedback(&self) -> SecEngineMtdPtoFeedback2566808062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SecEngineMtdPtoFeedback2566808062::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the current state of the first engine mounted power take off.
    #[allow(dead_code)]
    pub fn firstenginemtdptofeedback(&self) -> FirstEngineMtdPtoFeedback2566808062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FirstEngineMtdPtoFeedback2566808062::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the current state of the second clutch dependent power take off.
    #[allow(dead_code)]
    pub fn secclutchdptdptofeedback(&self) -> SecClutchDptdPtoFeedback2566808062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SecClutchDptdPtoFeedback2566808062::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the current state of the first clutch dependent power take off.
    #[allow(dead_code)]
    pub fn firstclutchdpdtptofeedback(&self) -> FirstClutchDpdtPtoFeedback2566808062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FirstClutchDpdtPtoFeedback2566808062::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// The gear currently engaged in the transmission or the last gear engaged while the transmission is in process of shifting to the new or selected gear.
    #[allow(dead_code)]
    pub fn currentgear(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -125f64
    }

    /// Parameter which represents the ratio of input shaft speed to current engine speed (in percent).
    #[allow(dead_code)]
    pub fn percentclutchslip(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }
}

/// ISO 11992: Towing vehicle message, general purpose message #1/5
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpm15 {
    frame_payload: Vec<u8>,
}

impl Gpm15 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpm15 {
        Gpm15 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpm15, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566808574 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpm15::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The 100 % reference value for all defined indicated engine torque parameters.
    #[allow(dead_code)]
    pub fn referenceenginetorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64
    }

    /// This signal indicates the decrease of the fuel level to a certain minimum.
    #[allow(dead_code)]
    pub fn fuellevelwarning(&self) -> FuelLevelWarning2566808574 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FuelLevelWarning2566808574::from((((frame_payload >> 37) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that the engine oil pressure has reached its warning level.
    #[allow(dead_code)]
    pub fn engineoilpressurewarning(&self) -> EngineOilPressureWarning2566808574 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngineOilPressureWarning2566808574::from((((frame_payload >> 35) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that the engine coolant temperature has reached its warning level.
    #[allow(dead_code)]
    pub fn enginecoolanttempwarning(&self) -> EngineCoolantTempWarning2566808574 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngineCoolantTempWarning2566808574::from((((frame_payload >> 32) & 0x7) as f64) as u64)
    }

    /// Gauge pressure of the oil in the engine lubrication system as provided by the oil pump.
    #[allow(dead_code)]
    pub fn engineoilpressure(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 4.000000
    }

    /// Read EngineCoolantTemperature signal from can frame
    #[allow(dead_code)]
    pub fn enginecoolanttemperature(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -40f64
    }

    /// Temperature of the engine lubricant.
    #[allow(dead_code)]
    pub fn engineoiltemperature(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// ISO 11992: Towing vehicle message, general purpose message #1/6
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpm16 {
    frame_payload: Vec<u8>,
}

impl Gpm16 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpm16 {
        Gpm16 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpm16, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566809086 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpm16::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of air surrounding vehicle.
    #[allow(dead_code)]
    pub fn ambientairtemperature(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// ISO 11992: Towed vehicle message, general purpose message #2/1
/// 
/// GPM 21 replaces GFM 21 in ISO 11992:1998 part 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpm21 {
    frame_payload: Vec<u8>,
}

impl Gpm21 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpm21 {
        Gpm21 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpm21, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2564947710 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpm21::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Information to identify a dolly axle within the road train.
    #[allow(dead_code)]
    pub fn vehicletype(&self) -> VehicleType2564947710 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleType2564947710::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// ISO 11992: Towed vehicle message, general purpose message #2/2
/// 
/// GPM22 replaces GFM 24 in ISO 11992:1998 part 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpm22 {
    frame_payload: Vec<u8>,
}

impl Gpm22 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpm22 {
        Gpm22 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpm22, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566834430 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpm22::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The actual pressure in a body on the towed vehicle.
    #[allow(dead_code)]
    pub fn bodypressure(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 0.100000
    }

    /// The actual fluid level in a body on the towed vehicle.
    #[allow(dead_code)]
    pub fn bodyfluidlevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 2.000000
    }

    /// The actual temperature in a thermal body on the towed vehicle.
    #[allow(dead_code)]
    pub fn thermalbodytemperature(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 + -125f64
    }

    /// The actual distance between the back of the towed vehicle and any obstacle.
    #[allow(dead_code)]
    pub fn rearobstacledistance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 2.000000
    }

    /// Signal which indicates that the anti-theft device is switched on or off.
    #[allow(dead_code)]
    pub fn antitheftdevicestatus(&self) -> AntiTheftDeviceStatus2566834430 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AntiTheftDeviceStatus2566834430::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that an obstacle detection device (ODD) is active/inactive.
    #[allow(dead_code)]
    pub fn oddstatus(&self) -> OddStatus2566834430 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OddStatus2566834430::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// ISO 11992: Towed vehicle message, general purpose message #2/3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpm23 {
    frame_payload: Vec<u8>,
}

impl Gpm23 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpm23 {
        Gpm23 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpm23, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365481214 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpm23::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The requested engine speed which is not to be exceeded.
    #[allow(dead_code)]
    pub fn reqenginespeedupperlim(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.125000
    }

    /// The requested minimum engine speed which the engine is to allow.
    #[allow(dead_code)]
    pub fn reqenginespeedlowerlim(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.125000
    }

    /// The requested engine torque that the engine is not allowed to exceed, indicated as a ratio of the reference engine torque.
    #[allow(dead_code)]
    pub fn reqenginetorquelimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 + -125f64
    }

    /// The requested vehicle speed which the vehicle is not allowed to exceed.
    #[allow(dead_code)]
    pub fn reqenginespeedlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64
    }

    /// This is the engine speed which the engine is expected to operate at.
    #[allow(dead_code)]
    pub fn reqenginespeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.125000
    }
}

/// ISO 11992: Towed vehicle message, general purpose message #2/4
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpm24 {
    frame_payload: Vec<u8>,
}

impl Gpm24 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpm24 {
        Gpm24 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpm24, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566808318 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpm24::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Signal which indicates the state of the second engine mounted power take off switch.
    #[allow(dead_code)]
    pub fn secenginemtdptoswitch(&self) -> SecEngineMtdPtoSwitch2566808318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SecEngineMtdPtoSwitch2566808318::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the state of the second clutch dependent power take off switch.
    #[allow(dead_code)]
    pub fn secclutchdpdtptoswitch(&self) -> SecClutchDpdtPtoSwitch2566808318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SecClutchDpdtPtoSwitch2566808318::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the state of the first clutch dependent power take off switch.
    #[allow(dead_code)]
    pub fn firstclutchdpdtptoswitch(&self) -> FirstClutchDpdtPtoSwitch2566808318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FirstClutchDpdtPtoSwitch2566808318::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that the operating panel is active.
    #[allow(dead_code)]
    pub fn operatingpanelactive(&self) -> OperatingPanelActive2566808318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OperatingPanelActive2566808318::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the state of the refuse packer step switch.
    #[allow(dead_code)]
    pub fn refusepackerstepswitch(&self) -> RefusePackerStepSwitch2566808318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RefusePackerStepSwitch2566808318::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the state of the engine stop switch.
    #[allow(dead_code)]
    pub fn enginestopswitch(&self) -> EngineStopSwitch2566808318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngineStopSwitch2566808318::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the state of the engine start switch.
    #[allow(dead_code)]
    pub fn enginestartswitch(&self) -> EngineStartSwitch2566808318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngineStartSwitch2566808318::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the state of the starter lockout switch.
    #[allow(dead_code)]
    pub fn starterlockoutswitch(&self) -> StarterLockoutSwitch2566808318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        StarterLockoutSwitch2566808318::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Command signal to influence the clutch.
    #[allow(dead_code)]
    pub fn rqstedpercentclutchslip(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }

    /// Signal which indicates the state of the first engine mounted power take off switch.
    #[allow(dead_code)]
    pub fn firstenginemtdptoswitch(&self) -> FirstEngineMtdPtoSwitch2566808318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FirstEngineMtdPtoSwitch2566808318::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the state of the clutch independent power take off switch.
    #[allow(dead_code)]
    pub fn clutchindpdtptoswitch(&self) -> ClutchIndpdtPtoSwitch2566808318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ClutchIndpdtPtoSwitch2566808318::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }
}

/// ISO 11992: Towed vehicle message, general purpose message #2/5
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpm25 {
    frame_payload: Vec<u8>,
}

impl Gpm25 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpm25 {
        Gpm25 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpm25, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566808830 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpm25::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This signal indicates the state of the trailer left-hand side marker light(s).
    #[allow(dead_code)]
    pub fn trailerleftsidemarkerlight(&self) -> TrailerLeftSideMarkerLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerLeftSideMarkerLight2566808830::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer left-hand reversing light(s).
    #[allow(dead_code)]
    pub fn trailerleftreversinglight(&self) -> TrailerLeftReversingLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerLeftReversingLight2566808830::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer left-hand rear width indicator light(s).
    #[allow(dead_code)]
    pub fn trailerleftrearwidindlight(&self) -> TrailerLeftRearWidIndLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerLeftRearWidIndLight2566808830::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer left-hand rear registration-plate light(s).
    #[allow(dead_code)]
    pub fn trailerleftrearregpltlight(&self) -> TrailerLeftRearRegPltLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerLeftRearRegPltLight2566808830::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer left-hand rear light(s).
    #[allow(dead_code)]
    pub fn trailerleftrearlight(&self) -> TrailerLeftRearLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerLeftRearLight2566808830::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer left-hand rear fog light(s).
    #[allow(dead_code)]
    pub fn trailerleftrearfoglight(&self) -> TrailerLeftRearFogLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerLeftRearFogLight2566808830::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer left-hand direction indicator light(s).
    #[allow(dead_code)]
    pub fn trailerleftdirindlight(&self) -> TrailerLeftDirIndLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerLeftDirIndLight2566808830::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer left-hand corner marker light(s).
    #[allow(dead_code)]
    pub fn trailerleftcrnmarkerlight(&self) -> TrailerLeftCrnMarkerLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerLeftCrnMarkerLight2566808830::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer interior light(s).
    #[allow(dead_code)]
    pub fn trailerinteriorlight(&self) -> TrailerInteriorLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerInteriorLight2566808830::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer work lamp(s).
    #[allow(dead_code)]
    pub fn trailerworklamp(&self) -> TrailerWorkLamp2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerWorkLamp2566808830::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer rotating identification light(s).
    #[allow(dead_code)]
    pub fn trailerrotatingidentlight(&self) -> TrailerRotatingIdentLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerRotatingIdentLight2566808830::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer right-hand stop light(s).
    #[allow(dead_code)]
    pub fn trailerrightstoplight(&self) -> TrailerRightStopLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerRightStopLight2566808830::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer right-hand side marker light(s).
    #[allow(dead_code)]
    pub fn trailerrightsidemrklight(&self) -> TrailerRightSideMrkLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerRightSideMrkLight2566808830::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer right-hand reversing light(s).
    #[allow(dead_code)]
    pub fn trailerrightreversinglight(&self) -> TrailerRightReversingLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerRightReversingLight2566808830::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer right-hand rear width indicator light(s).
    #[allow(dead_code)]
    pub fn trailrightrearwidindlight(&self) -> TrailRightRearWidIndLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailRightRearWidIndLight2566808830::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer right-hand rear registration-plate light(s).
    #[allow(dead_code)]
    pub fn trailerrightrearregpltlight(&self) -> TrailerRightRearRegPltLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerRightRearRegPltLight2566808830::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer right-hand rear light(s).
    #[allow(dead_code)]
    pub fn trailerrightrearlight(&self) -> TrailerRightRearLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerRightRearLight2566808830::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer right-hand rear fog light(s).
    #[allow(dead_code)]
    pub fn trailerrightrearfoglight(&self) -> TrailerRightRearFogLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerRightRearFogLight2566808830::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer right-hand direction indicator light(s).
    #[allow(dead_code)]
    pub fn trailerrightdirindlight(&self) -> TrailerRightDirIndLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerRightDirIndLight2566808830::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer right-hand corner marker light(s).
    #[allow(dead_code)]
    pub fn trailerrightcrnmarkerlight(&self) -> TrailerRightCrnMarkerLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerRightCrnMarkerLight2566808830::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer rear warning light(s).
    #[allow(dead_code)]
    pub fn trailerrearwarninglight(&self) -> TrailerRearWarningLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerRearWarningLight2566808830::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// This signal indicates the state of the trailer left-hand stop light(s).
    #[allow(dead_code)]
    pub fn trailerleftstoplight(&self) -> TrailerLeftStopLight2566808830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerLeftStopLight2566808830::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Reserved for ISO 15765
#[allow(dead_code)]
#[derive(Debug)]
pub struct Iso15765Funct {
    frame_payload: Vec<u8>,
}

impl Iso15765Funct {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Iso15765Funct {
        Iso15765Funct { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Iso15765Funct, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2564554494 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Iso15765Funct::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read SN signal from can frame
    #[allow(dead_code)]
    pub fn sn(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xF) as f64
    }

    /// Read SeparationTime signal from can frame
    #[allow(dead_code)]
    pub fn separationtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Read BlockSize signal from can frame
    #[allow(dead_code)]
    pub fn blocksize(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Read FlowStatus signal from can frame
    #[allow(dead_code)]
    pub fn flowstatus(&self) -> FlowStatus2564554494 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlowStatus2564554494::from(((frame_payload & 0xF) as f64) as u64)
    }

    /// Read FirstFrameDataLength signal from can frame
    #[allow(dead_code)]
    pub fn firstframedatalength(&self) -> f64 {
        let  frame_payload: u64 = BE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFF) as f64
    }

    /// Read SingleFrameDataLength signal from can frame
    #[allow(dead_code)]
    pub fn singleframedatalength(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xF) as f64
    }

    /// Part of Network Protocol Control Information (N_PCI) of a ISO 15765 message.
    #[allow(dead_code)]
    pub fn protocolctrlinformation(&self) -> ProtocolCtrlInformation2564554494 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ProtocolCtrlInformation2564554494::from((((frame_payload >> 4) & 0xF) as f64) as u64)
    }
}

/// Reserved for ISO 15765
#[allow(dead_code)]
#[derive(Debug)]
pub struct Iso15765Phys {
    frame_payload: Vec<u8>,
}

impl Iso15765Phys {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Iso15765Phys {
        Iso15765Phys { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Iso15765Phys, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2564488958 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Iso15765Phys::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read SN signal from can frame
    #[allow(dead_code)]
    pub fn sn(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xF) as f64
    }

    /// Read SeparationTime signal from can frame
    #[allow(dead_code)]
    pub fn separationtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Read BlockSize signal from can frame
    #[allow(dead_code)]
    pub fn blocksize(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Read FlowStatus signal from can frame
    #[allow(dead_code)]
    pub fn flowstatus(&self) -> FlowStatus2564488958 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlowStatus2564488958::from(((frame_payload & 0xF) as f64) as u64)
    }

    /// Read FirstFrameDataLength signal from can frame
    #[allow(dead_code)]
    pub fn firstframedatalength(&self) -> f64 {
        let  frame_payload: u64 = BE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFF) as f64
    }

    /// Read SingleFrameDataLength signal from can frame
    #[allow(dead_code)]
    pub fn singleframedatalength(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xF) as f64
    }

    /// Part of Network Protocol Control Information (N_PCI) of a ISO 15765 message.
    #[allow(dead_code)]
    pub fn protocolctrlinformation(&self) -> ProtocolCtrlInformation2564488958 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ProtocolCtrlInformation2564488958::from((((frame_payload >> 4) & 0xF) as f64) as u64)
    }
}

/// Used to access network interconnection ECU parametrics and database
#[allow(dead_code)]
#[derive(Debug)]
pub struct Network {
    frame_payload: Vec<u8>,
}

impl Network {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Network {
        Network { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Network, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565734142 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Network::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read ControlByte signal from can frame
    #[allow(dead_code)]
    pub fn controlbyte(&self) -> ControlByte2565734142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ControlByte2565734142::from(((frame_payload & 0xFF) as f64) as u64)
    }

    /// Filter mode for Network PG
    #[allow(dead_code)]
    pub fn filtermode(&self) -> FilterMode2565734142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FilterMode2565734142::from((((frame_payload >> 16) & 0xFF) as f64) as u64)
    }

    /// Destination port for network PG
    #[allow(dead_code)]
    pub fn toport(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xF) as f64
    }

    /// Source port for Network PG
    #[allow(dead_code)]
    pub fn fromport(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 12) & 0xF) as f64
    }
}

/// ISO 11992: Towing vehicle message, running gear equipment #1/1
/// 
/// RGE11 replaces GFM 12 in ISO 11992:1998 part 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Rge11 {
    frame_payload: Vec<u8>,
}

impl Rge11 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Rge11 {
        Rge11 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Rge11, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565144318 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Rge11::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The pneumatic pressure in the circuit or reservoir for the parking brake and the trailer supply.
    #[allow(dead_code)]
    pub fn parkingandtrailerairpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 8.000000
    }

    /// Actual static vertical load on driven axle of the commercial vehicle. In case of more than one driven axle the value of the axle with the highest vertical load is transmitted.
    #[allow(dead_code)]
    pub fn drivenaxleload(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64 * 2.000000
    }

    /// The pneumatic pressure in the auxiliary circuit.
    #[allow(dead_code)]
    pub fn auxequipsupplypressure(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 8.000000
    }

    /// Command signal to stop immediately any change of the actual body height level.
    #[allow(dead_code)]
    pub fn stoplevelchangereq(&self) -> StopLevelChangeReq2565144318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        StopLevelChangeReq2565144318::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Command signal to store the actual body height level as new programmed and memorised ramp levels 1 or 2 in the ECU
    #[allow(dead_code)]
    pub fn ramplevelstoragereq(&self) -> RampLevelStorageReq2565144318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RampLevelStorageReq2565144318::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Command signal to enable or disable the automatic level control.
    #[allow(dead_code)]
    pub fn levelcontrolreq(&self) -> LevelControlReq2565144318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LevelControlReq2565144318::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Command signal to control the body height to a level programmed and memorised in the ECU.
    #[allow(dead_code)]
    pub fn ramplevelreq(&self) -> RampLevelReq2565144318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RampLevelReq2565144318::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// Command signal to lock the steering axle.
    #[allow(dead_code)]
    pub fn steeringaxlelockingreq(&self) -> SteeringAxleLockingReq2565144318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SteeringAxleLockingReq2565144318::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Command signal to control the lift axle position / tag axle load condition.
    #[allow(dead_code)]
    pub fn liftaxle2positionreq(&self) -> LiftAxle2PositionReq2565144318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LiftAxle2PositionReq2565144318::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Command signal to control the lift axle position / tag axle load condition.
    #[allow(dead_code)]
    pub fn liftaxle1positionreq(&self) -> LiftAxle1PositionReq2565144318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LiftAxle1PositionReq2565144318::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Command signal to control the lift axle position / tag axle load condition to transfer more load on the driven axle of the commercial vehicle.
    #[allow(dead_code)]
    pub fn tractionhelpreq(&self) -> TractionHelpReq2565144318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractionHelpReq2565144318::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Command signal to control the body height [up (lifting)/down (lowering)] for the rear axle.
    #[allow(dead_code)]
    pub fn levelchangereqrearaxle(&self) -> LevelChangeReqRearAxle2565144318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LevelChangeReqRearAxle2565144318::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Command signal to control the body height [up (lifting)/down (lowering)] for the front axle.
    #[allow(dead_code)]
    pub fn levelchangereqfrontaxle(&self) -> LevelChangeReqFrontAxle2565144318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LevelChangeReqFrontAxle2565144318::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Command signal to activate a normal ride body height. The normal levels 1 and 2 are trailer specific body heights.
    #[allow(dead_code)]
    pub fn rideheightrequest(&self) -> RideHeightRequest2565144318 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RideHeightRequest2565144318::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// ISO 11992: Towed vehicle message, running gear equipment #2/1
/// 
/// RGE21 replaces GFM 22 in ISO 11992:1998 part 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Rge21 {
    frame_payload: Vec<u8>,
}

impl Rge21 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Rge21 {
        Rge21 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Rge21, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565209854 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Rge21::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Signal which indicates that the automatic level control is enabled or disabled.
    #[allow(dead_code)]
    pub fn levelcontrol(&self) -> LevelControl2565209854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LevelControl2565209854::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Actual nominal vehicle body height.
    #[allow(dead_code)]
    pub fn nominalvehbodylevelrearaxle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Actual nominal vehicle body height.
    #[allow(dead_code)]
    pub fn nominalvehbodylevelfrontaxle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Signal which indicates the level of the body height as an anser to 'ramp level request'.
    #[allow(dead_code)]
    pub fn ramplevel(&self) -> RampLevel2565209854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RampLevel2565209854::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the normal levels of the vehicle independently of a specific request.
    #[allow(dead_code)]
    pub fn normallevel(&self) -> NormalLevel2565209854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        NormalLevel2565209854::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the stop of any level change due to a 'stop request'.
    #[allow(dead_code)]
    pub fn stoplevelchangeacknowledge(&self) -> StopLevelChangeAcknowledge2565209854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        StopLevelChangeAcknowledge2565209854::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the level change of the body height at the rear axle due to any external requests.
    #[allow(dead_code)]
    pub fn levelchangerearaxle(&self) -> LevelChangeRearAxle2565209854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LevelChangeRearAxle2565209854::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the level change of the body height at the front axle due to any external requests.
    #[allow(dead_code)]
    pub fn levelchangefrontaxle(&self) -> LevelChangeFrontAxle2565209854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LevelChangeFrontAxle2565209854::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the storage of a new ramp level in the ECU.
    #[allow(dead_code)]
    pub fn ramplevelstorage(&self) -> RampLevelStorage2565209854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RampLevelStorage2565209854::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the actual steering axle locking status.
    #[allow(dead_code)]
    pub fn steeringaxlelocking(&self) -> SteeringAxleLocking2565209854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SteeringAxleLocking2565209854::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the position / load condition of lift axle / tag axle #2.
    #[allow(dead_code)]
    pub fn liftaxle2pos(&self) -> LiftAxle2Pos2565209854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LiftAxle2Pos2565209854::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the position / load condition of lift axle / tag axle #1.
    #[allow(dead_code)]
    pub fn liftaxle1pos(&self) -> LiftAxle1Pos2565209854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LiftAxle1Pos2565209854::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the ramp level positions of the vehicle independently of a specific request.
    #[allow(dead_code)]
    pub fn ramplevelposition(&self) -> RampLevelPosition2565209854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RampLevelPosition2565209854::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that a load transfer is active.
    #[allow(dead_code)]
    pub fn tractionhelp(&self) -> TractionHelp2565209854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractionHelp2565209854::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the body height position of the vehicle as an answer to 'ride height request'.
    #[allow(dead_code)]
    pub fn levelctrlsysrideheightlevel(&self) -> LevelCtrlSysRideHeightLevel2565209854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LevelCtrlSysRideHeightLevel2565209854::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// ISO 11992: Towed vehicle message, running gear equipment #2/2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Rge22 {
    frame_payload: Vec<u8>,
}

impl Rge22 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Rge22 {
        Rge22 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Rge22, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566806782 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Rge22::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Actual relative vehicle body height.
    #[allow(dead_code)]
    pub fn relvehbodylevelrearaxle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Actual relative vehicle body height.
    #[allow(dead_code)]
    pub fn relvehbodylevelfrontaxle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 + -32000f64
    }
}

/// ISO 11992: Towed vehicle message, running gear equipment #2/3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Rge23 {
    frame_payload: Vec<u8>,
}

impl Rge23 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Rge23 {
        Rge23 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Rge23, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566807294 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Rge23::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Signal indicating the pressure level of the tyre.
    #[allow(dead_code)]
    pub fn tyrepressthresholddetect(&self) -> TyrePressThresholdDetect2566807294 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TyrePressThresholdDetect2566807294::from((((frame_payload >> 40) & 0x7) as f64) as u64)
    }

    /// Signal indicating the power supply of the tyre module is sufficient to achieve the specified performance of the module.
    #[allow(dead_code)]
    pub fn tyremodulepowersupply(&self) -> TyreModulePowerSupply2566807294 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TyreModulePowerSupply2566807294::from((((frame_payload >> 43) & 0x3) as f64) as u64)
    }

    /// The temperature measured by the tyre module.
    #[allow(dead_code)]
    pub fn tyretemperature(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// The pressure loss of a tyre.
    #[allow(dead_code)]
    pub fn airleakagedetection(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64 * 0.100000
    }

    /// First part of the identification number of the tyre or whee (number of axles).
    #[allow(dead_code)]
    pub fn tyrewheelidentification2(&self) -> TyreWheelIdentification22566807294 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TyreWheelIdentification22566807294::from((((frame_payload >> 4) & 0xF) as f64) as u64)
    }

    /// First part of the identification number of the tyre or whee (position on each axle).
    #[allow(dead_code)]
    pub fn tyrewheelidentification1(&self) -> TyreWheelIdentification12566807294 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TyreWheelIdentification12566807294::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// Diagnostic readiness 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm26 {
    frame_payload: Vec<u8>,
}

impl Dm26 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm26 {
        Dm26 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm26, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566764798 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm26::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read MisfireMonitoringComplete signal from can frame
    #[allow(dead_code)]
    pub fn misfiremonitoringcomplete(&self) -> MisfireMonitoringComplete2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MisfireMonitoringComplete2566764798::from((((frame_payload >> 28) & 0x1) as f64) as u64)
    }

    /// Read MisfireMonitoringEnabled signal from can frame
    #[allow(dead_code)]
    pub fn misfiremonitoringenabled(&self) -> MisfireMonitoringEnabled2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MisfireMonitoringEnabled2566764798::from((((frame_payload >> 24) & 0x1) as f64) as u64)
    }

    /// Read FuelSystemMonitoringEnabled signal from can frame
    #[allow(dead_code)]
    pub fn fuelsystemmonitoringenabled(&self) -> FuelSystemMonitoringEnabled2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FuelSystemMonitoringEnabled2566764798::from((((frame_payload >> 25) & 0x1) as f64) as u64)
    }

    /// Read ComprehensiveComptMonComplete signal from can frame
    #[allow(dead_code)]
    pub fn comprehensivecomptmoncomplete(&self) -> ComprehensiveComptMonComplete2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ComprehensiveComptMonComplete2566764798::from((((frame_payload >> 30) & 0x1) as f64) as u64)
    }

    /// Read ComprehensiveCompMonEnabled signal from can frame
    #[allow(dead_code)]
    pub fn comprehensivecompmonenabled(&self) -> ComprehensiveCompMonEnabled2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ComprehensiveCompMonEnabled2566764798::from((((frame_payload >> 26) & 0x1) as f64) as u64)
    }

    /// Read SecondAirSystemMonComplete signal from can frame
    #[allow(dead_code)]
    pub fn secondairsystemmoncomplete(&self) -> SecondAirSystemMonComplete2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SecondAirSystemMonComplete2566764798::from((((frame_payload >> 51) & 0x1) as f64) as u64)
    }

    /// Read SecondAirSystemMonEnabled signal from can frame
    #[allow(dead_code)]
    pub fn secondairsystemmonenabled(&self) -> SecondAirSystemMonEnabled2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SecondAirSystemMonEnabled2566764798::from((((frame_payload >> 35) & 0x1) as f64) as u64)
    }

    /// Read OxygenSensorMonComplete signal from can frame
    #[allow(dead_code)]
    pub fn oxygensensormoncomplete(&self) -> OxygenSensorMonComplete2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OxygenSensorMonComplete2566764798::from((((frame_payload >> 53) & 0x1) as f64) as u64)
    }

    /// Read OxygenSensorMonEnabled signal from can frame
    #[allow(dead_code)]
    pub fn oxygensensormonenabled(&self) -> OxygenSensorMonEnabled2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OxygenSensorMonEnabled2566764798::from((((frame_payload >> 37) & 0x1) as f64) as u64)
    }

    /// Read OxygenSensorHeaterMonComplete signal from can frame
    #[allow(dead_code)]
    pub fn oxygensensorheatermoncomplete(&self) -> OxygenSensorHeaterMonComplete2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OxygenSensorHeaterMonComplete2566764798::from((((frame_payload >> 54) & 0x1) as f64) as u64)
    }

    /// Read OxygenSensorHeaterMonEnabled signal from can frame
    #[allow(dead_code)]
    pub fn oxygensensorheatermonenabled(&self) -> OxygenSensorHeaterMonEnabled2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OxygenSensorHeaterMonEnabled2566764798::from((((frame_payload >> 38) & 0x1) as f64) as u64)
    }

    /// Read HeatedCatalystMonComplete signal from can frame
    #[allow(dead_code)]
    pub fn heatedcatalystmoncomplete(&self) -> HeatedCatalystMonComplete2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HeatedCatalystMonComplete2566764798::from((((frame_payload >> 49) & 0x1) as f64) as u64)
    }

    /// Read HeatedCatalystMonEnabled signal from can frame
    #[allow(dead_code)]
    pub fn heatedcatalystmonenabled(&self) -> HeatedCatalystMonEnabled2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HeatedCatalystMonEnabled2566764798::from((((frame_payload >> 33) & 0x1) as f64) as u64)
    }

    /// Read EvaporativeSystemMonComplete signal from can frame
    #[allow(dead_code)]
    pub fn evaporativesystemmoncomplete(&self) -> EvaporativeSystemMonComplete2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EvaporativeSystemMonComplete2566764798::from((((frame_payload >> 50) & 0x1) as f64) as u64)
    }

    /// Read EvaporativeSystemMonEnabled signal from can frame
    #[allow(dead_code)]
    pub fn evaporativesystemmonenabled(&self) -> EvaporativeSystemMonEnabled2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EvaporativeSystemMonEnabled2566764798::from((((frame_payload >> 34) & 0x1) as f64) as u64)
    }

    /// Read EGRSystemMonitoringComplete signal from can frame
    #[allow(dead_code)]
    pub fn egrsystemmonitoringcomplete(&self) -> EgrSystemMonitoringComplete2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EgrSystemMonitoringComplete2566764798::from((((frame_payload >> 55) & 0x1) as f64) as u64)
    }

    /// Read EGRSystemMonitoringEnabled signal from can frame
    #[allow(dead_code)]
    pub fn egrsystemmonitoringenabled(&self) -> EgrSystemMonitoringEnabled2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EgrSystemMonitoringEnabled2566764798::from((((frame_payload >> 39) & 0x1) as f64) as u64)
    }

    /// Read ColdStartAidSystemMonComplete signal from can frame
    #[allow(dead_code)]
    pub fn coldstartaidsystemmoncomplete(&self) -> ColdStartAidSystemMonComplete2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ColdStartAidSystemMonComplete2566764798::from((((frame_payload >> 56) & 0x1) as f64) as u64)
    }

    /// Read ColdStartAidSystemMonEnabled signal from can frame
    #[allow(dead_code)]
    pub fn coldstartaidsystemmonenabled(&self) -> ColdStartAidSystemMonEnabled2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ColdStartAidSystemMonEnabled2566764798::from((((frame_payload >> 40) & 0x1) as f64) as u64)
    }

    /// Read CatalystMonComplete signal from can frame
    #[allow(dead_code)]
    pub fn catalystmoncomplete(&self) -> CatalystMonComplete2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CatalystMonComplete2566764798::from((((frame_payload >> 48) & 0x1) as f64) as u64)
    }

    /// Read CatalystMonEnabled signal from can frame
    #[allow(dead_code)]
    pub fn catalystmonenabled(&self) -> CatalystMonEnabled2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CatalystMonEnabled2566764798::from((((frame_payload >> 32) & 0x1) as f64) as u64)
    }

    /// Read ACSystemRefrigerantMonComplete signal from can frame
    #[allow(dead_code)]
    pub fn acsystemrefrigerantmoncomplete(&self) -> AcSystemRefrigerantMonComplete2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AcSystemRefrigerantMonComplete2566764798::from((((frame_payload >> 52) & 0x1) as f64) as u64)
    }

    /// Read ACSystemRefrigerantMonEnabled signal from can frame
    #[allow(dead_code)]
    pub fn acsystemrefrigerantmonenabled(&self) -> AcSystemRefrigerantMonEnabled2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AcSystemRefrigerantMonEnabled2566764798::from((((frame_payload >> 36) & 0x1) as f64) as u64)
    }

    /// Read FuelSystemMonitoringComplete signal from can frame
    #[allow(dead_code)]
    pub fn fuelsystemmonitoringcomplete(&self) -> FuelSystemMonitoringComplete2566764798 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FuelSystemMonitoringComplete2566764798::from((((frame_payload >> 29) & 0x1) as f64) as u64)
    }

    /// Read NumOfWarmUpsSinceDTCsCleared signal from can frame
    #[allow(dead_code)]
    pub fn numofwarmupssincedtcscleared(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Read TimeSinceEngineStart signal from can frame
    #[allow(dead_code)]
    pub fn timesinceenginestart(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Data security
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm18 {
    frame_payload: Vec<u8>,
}

impl Dm18 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm18 {
        Dm18 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm18, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2564095742 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm18::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read SecurityEntityLengthHigh signal from can frame
    #[allow(dead_code)]
    pub fn securityentitylengthhigh(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 12) & 0xF) as f64
    }

    /// Read SecurityEntityType signal from can frame
    #[allow(dead_code)]
    pub fn securityentitytype(&self) -> SecurityEntityType2564095742 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SecurityEntityType2564095742::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// Read SecurityEntityLength signal from can frame
    #[allow(dead_code)]
    pub fn securityentitylength(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// External Brake Request
#[allow(dead_code)]
#[derive(Debug)]
pub struct Xbr {
    frame_payload: Vec<u8>,
}

impl Xbr {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Xbr {
        Xbr { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Xbr, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2349137662 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Xbr::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read XBRMessageChecksum signal from can frame
    #[allow(dead_code)]
    pub fn xbrmessagechecksum(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 60) & 0xF) as f64
    }

    /// Read XBRMessageCounter signal from can frame
    #[allow(dead_code)]
    pub fn xbrmessagecounter(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xF) as f64
    }

    /// Read XBRCtrlMode signal from can frame
    #[allow(dead_code)]
    pub fn xbrctrlmode(&self) -> XbrCtrlMode2349137662 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        XbrCtrlMode2349137662::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// The XBR Priority is used as an input to the brake system to manage the priority of overlapping external and internal requests.
    #[allow(dead_code)]
    pub fn xbrpriority(&self) -> XbrPriority2349137662 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        XbrPriority2349137662::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Read XBREBIMode signal from can frame
    #[allow(dead_code)]
    pub fn xbrebimode(&self) -> XbrebiMode2349137662 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        XbrebiMode2349137662::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Parameter provided to the brake system from external sources.
    #[allow(dead_code)]
    pub fn extlaccelerationdemand(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.000488 + -15.687f64
    }
}

/// Water in Fuel Indicator
#[allow(dead_code)]
#[derive(Debug)]
pub struct Wfi {
    frame_payload: Vec<u8>,
}

impl Wfi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Wfi {
        Wfi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Wfi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566848510 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Wfi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Signal which indicates the presence of water in the fuel.
    #[allow(dead_code)]
    pub fn waterinfuelindicator(&self) -> WaterInFuelIndicator2566848510 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        WaterInFuelIndicator2566848510::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Vehicle Weight
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vw {
    frame_payload: Vec<u8>,
}

impl Vw {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vw {
        Vw { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vw, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566843134 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vw::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The mass of freight carried.
    #[allow(dead_code)]
    pub fn cargoweight(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64 * 2.000000
    }

    /// Total mass of freight-carrying vehicle designed to be pulled by truck, including the weight of the contents.
    #[allow(dead_code)]
    pub fn trailerweight(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64 * 2.000000
    }

    /// Total mass imposed by the tires on the road surface at the specified axle.
    #[allow(dead_code)]
    pub fn axleweight(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.500000
    }

    /// To identify to which of several similar devices (such as tires or fuel tanks) the information applies.
    #[allow(dead_code)]
    pub fn axlelocation(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Vehicle Electrical Power 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vep3 {
    frame_payload: Vec<u8>,
}

impl Vep3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vep3 {
        Vep3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vep3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566804222 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vep3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Net flow of electrical current into/out-of the battery or batteries.
    #[allow(dead_code)]
    pub fn netbatterycurrenthires(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.050000 + -1600f64
    }

    /// This parameter indicates the amount of electrical current output from the alternator of the main vehicle.
    #[allow(dead_code)]
    pub fn altcurrenthires(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000 + -1600f64
    }
}

/// Vehicle Electrical Power 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vep2 {
    frame_payload: Vec<u8>,
}

impl Vep2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vep2 {
        Vep2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vep2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633928190 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vep2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The voltage for isolated battery #2.
    #[allow(dead_code)]
    pub fn battery2potential(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000
    }

    /// The third power output from an ECM.
    #[allow(dead_code)]
    pub fn ecupoweroutputsupplyvoltage3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.050000
    }

    /// The second power output from an ECM.
    #[allow(dead_code)]
    pub fn ecupoweroutputsupplyvoltage2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.050000
    }

    /// Read ECUPowerOutputSupplyVoltage1 signal from can frame
    #[allow(dead_code)]
    pub fn ecupoweroutputsupplyvoltage1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.050000
    }

    /// This parameter measures the second source of battery potential as measured at the input of the ECM/actuator etc.
    #[allow(dead_code)]
    pub fn batterypotential_powerinput2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000
    }
}

/// Vehicle Position
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vp {
    frame_payload: Vec<u8>,
}

impl Vp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vp {
        Vp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566845438 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Longitude position of the vehicle.
    #[allow(dead_code)]
    pub fn longitude(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.000000 + -210f64
    }

    /// Latitude position of the vehicle.
    #[allow(dead_code)]
    pub fn latitude(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.000000 + -210f64
    }
}

/// Vehicle Identification
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vi {
    frame_payload: Vec<u8>,
}

impl Vi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vi {
        Vi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566843646 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vi::new(frame.data().to_vec()));
        Box::new(f)
    }
}

/// Vehicle Hours
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vh {
    frame_payload: Vec<u8>,
}

impl Vh {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vh {
        Vh { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vh, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566842366 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vh::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Accumulated time of operation of power takeoff device.
    #[allow(dead_code)]
    pub fn totalpowertakeoffhours(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Accumulated time of operation of vehicle.
    #[allow(dead_code)]
    pub fn totalvehiclehours(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.050000
    }
}

/// Vehicle Fluids
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vf {
    frame_payload: Vec<u8>,
}

impl Vf {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vf {
        Vf { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vf, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566809854 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vf::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read WinchOilPressSwitch signal from can frame
    #[allow(dead_code)]
    pub fn winchoilpressswitch(&self) -> WinchOilPressSwitch2566809854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        WinchOilPressSwitch2566809854::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// This parameter indicates the level of the hydraulic fluid in tank as a ratio of current volume to total tank volume.
    #[allow(dead_code)]
    pub fn hydoillevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 0.400000
    }

    /// This switch indicates whether hydraulic oil filter is clogged.
    #[allow(dead_code)]
    pub fn hydoilfilterrestrictionswitch(&self) -> HydOilFilterRestrictionSwitch2566809854 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HydOilFilterRestrictionSwitch2566809854::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Temperature of hydraulic fluid.
    #[allow(dead_code)]
    pub fn hydtemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -40f64
    }
}

/// Vehicle Direction/Speed
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vds {
    frame_payload: Vec<u8>,
}

impl Vds {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vds {
        Vds { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vds, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566842622 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vds::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Altitude of the vehicle referenced to sea level at standard atmospheric pressure and temperature.
    #[allow(dead_code)]
    pub fn altitude(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.125000 + -2500f64
    }

    /// Pitch of the vehicle as calculated by the navigation device(s).
    #[allow(dead_code)]
    pub fn pitch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.007812 + -200f64
    }

    /// Speed of the vehicle as calculated from a device such as a Global Positioning System (GPS).
    #[allow(dead_code)]
    pub fn navigationbasedvehiclespeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.003906
    }

    /// Present compass bearing of vehicle.
    #[allow(dead_code)]
    pub fn compassbearing(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.007812
    }
}

/// High Resolution Vehicle Distance
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vdhr {
    frame_payload: Vec<u8>,
}

impl Vdhr {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vdhr {
        Vdhr { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vdhr, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566832638 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vdhr::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Distance traveled during all or part of a journey.
    #[allow(dead_code)]
    pub fn highresolutiontripdistance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.005000
    }

    /// Accumulated distance traveled by the vehicle during its operation.
    #[allow(dead_code)]
    pub fn hghrslutiontotalvehicledistance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.005000
    }
}

/// Vehicle Dynamic Stability Control 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vdc2 {
    frame_payload: Vec<u8>,
}

impl Vdc2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vdc2 {
        Vdc2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vdc2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565868030 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vdc2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicates the longitudinal acceleration of the vehicle.
    #[allow(dead_code)]
    pub fn longitudinalacceleration(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 0.100000 + -12.5f64
    }

    /// Indicates a lateral acceleration of the vehicle.
    #[allow(dead_code)]
    pub fn lateralacceleration(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64 * 0.000488 + -15.687f64
    }

    /// Indicates the rotation about the vertical axis.
    #[allow(dead_code)]
    pub fn yawrate(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64 * 0.000122 + -3.92f64
    }

    /// Read SteerWheelAngleSensorType signal from can frame
    #[allow(dead_code)]
    pub fn steerwheelanglesensortype(&self) -> SteerWheelAngleSensorType2565868030 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SteerWheelAngleSensorType2565868030::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Indicates number of steering wheel turns, absolute position or relative position at ignition on.
    #[allow(dead_code)]
    pub fn steerwheelturncounter(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0x3F) as f64 + -32f64
    }

    /// The main operator`s steering wheel angle (on the steering column, not the actual wheel angle).
    #[allow(dead_code)]
    pub fn steerwheelangle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.000977 + -31.374f64
    }
}

/// Vehicle Dynamic Stability Control 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vdc1 {
    frame_payload: Vec<u8>,
}

impl Vdc1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vdc1 {
        Vdc1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vdc1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566803454 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vdc1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// State signal which indicates that Yaw Control (YC) has activated brake control.
    #[allow(dead_code)]
    pub fn ycbrakectrlactive(&self) -> YcBrakeCtrlActive2566803454 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        YcBrakeCtrlActive2566803454::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// State Signal which indicates that the Yaw Control (YC) has commanded engine control to be active.
    #[allow(dead_code)]
    pub fn ycengctrlactive(&self) -> YcEngCtrlActive2566803454 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        YcEngCtrlActive2566803454::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// State signal which indicates that Roll over Prevention (ROP) has activated brake control.
    #[allow(dead_code)]
    pub fn ropbrakectrlactive(&self) -> RopBrakeCtrlActive2566803454 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RopBrakeCtrlActive2566803454::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// State Signal which indicates that the Roll Over Prevention (ROP) has commanded engine control to be active.
    #[allow(dead_code)]
    pub fn ropengctrlactive(&self) -> RopEngCtrlActive2566803454 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RopEngCtrlActive2566803454::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Read VDCBrakeLightRq signal from can frame
    #[allow(dead_code)]
    pub fn vdcbrakelightrq(&self) -> VdcBrakeLightRq2566803454 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VdcBrakeLightRq2566803454::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Signal that indicates whether VDC is fully operational or whether its functionality is reduced by a permanent or temporary (e.
    #[allow(dead_code)]
    pub fn vdcfullyoperational(&self) -> VdcFullyOperational2566803454 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VdcFullyOperational2566803454::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// This parameter commands the VDC information signal, for example a dash lamp.
    #[allow(dead_code)]
    pub fn vdcinformationsignal(&self) -> VdcInformationSignal2566803454 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VdcInformationSignal2566803454::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Vehicle Distance
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vd {
    frame_payload: Vec<u8>,
}

impl Vd {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vd {
        Vd { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vd, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566840574 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vd::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Accumulated distance traveled by vehicle during its operation.
    #[allow(dead_code)]
    pub fn totalvehicledistance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.125000
    }

    /// Distance traveled during all or part of a journey.
    #[allow(dead_code)]
    pub fn tripdistance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.125000
    }
}

/// Trip Vehicle Speed/Cruise Distance Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tvi {
    frame_payload: Vec<u8>,
}

impl Tvi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tvi {
        Tvi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tvi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633938686 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tvi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read TripCruiseDistance signal from can frame
    #[allow(dead_code)]
    pub fn tripcruisedistance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFFFFFF) as f64 * 0.125000
    }

    /// Read TripMaxVehicleSpeed signal from can frame
    #[allow(dead_code)]
    pub fn tripmaxvehiclespeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.003906
    }
}

/// Trip Time Information 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tti2 {
    frame_payload: Vec<u8>,
}

impl Tti2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tti2 {
        Tti2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tti2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633937150 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tti2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total time that the air compressor is on and compressing air since the last trip reset.
    #[allow(dead_code)]
    pub fn tripaircompressorontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 128) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Read TripIdleTime signal from can frame
    #[allow(dead_code)]
    pub fn tripidletime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 96) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Total time accumulated while the engine speed is greater than zero since the last trip reset.
    #[allow(dead_code)]
    pub fn tripengrunningtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Total time accumulated while the engine is in the PTO or remote PTO hold state since the last trip reset.
    #[allow(dead_code)]
    pub fn tripptotime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Total time accumulated while the engine is in the cruise hold state, excluding time in accelerator override, since the last trip reset.
    #[allow(dead_code)]
    pub fn tripcruisetime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.050000
    }
}

/// Trip Time Information 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tti1 {
    frame_payload: Vec<u8>,
}

impl Tti1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tti1 {
        Tti1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tti1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633938174 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tti1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total time accumulated when the engine final fueling has been derated due to an engine protection algorithm, since the last reset.
    #[allow(dead_code)]
    pub fn triptimeinderatebyeng(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 96) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Read TripTimeInGearDown signal from can frame
    #[allow(dead_code)]
    pub fn triptimeingeardown(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Total time accumulated when the vehicle has operated in top gear for a calibrated minimum time, since the last trip reset.
    #[allow(dead_code)]
    pub fn triptimeintopgear(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Read TripTimeInVSL signal from can frame
    #[allow(dead_code)]
    pub fn triptimeinvsl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.050000
    }
}

/// Trip Shutdown Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tsi {
    frame_payload: Vec<u8>,
}

impl Tsi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tsi {
        Tsi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tsi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633938430 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tsi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read TripSuddenDecelerations signal from can frame
    #[allow(dead_code)]
    pub fn tripsuddendecelerations(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Total number of times an operator disables idle shutdown to prevent an engine shutdown, since the last trip reset.
    #[allow(dead_code)]
    pub fn trpnmberofidleshutdownoverrides(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Total number of times the engine has been shutdown due to idling too long (at normal idle or fast idle) since the last trip reset.
    #[allow(dead_code)]
    pub fn tripnumberofidleshutdowns(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Total number of hot shutdowns since the last trip reset.
    #[allow(dead_code)]
    pub fn tripnumberofhotshutdowns(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Torque/Speed Control 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tsc1 {
    frame_payload: Vec<u8>,
}

impl Tsc1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tsc1 {
        Tsc1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tsc1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2348875518 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tsc1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// State signal which indicates which control mode the sending device is using to generate the TSC1 command.
    #[allow(dead_code)]
    pub fn controlpurpose(&self) -> ControlPurpose2348875518 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ControlPurpose2348875518::from((((frame_payload >> 35) & 0x1F) as f64) as u64)
    }

    /// This parameter indicates the transmission rate at which the sending device will transmit the TSC1 message.
    #[allow(dead_code)]
    pub fn transmissionrate(&self) -> TransmissionRate2348875518 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransmissionRate2348875518::from((((frame_payload >> 32) & 0x7) as f64) as u64)
    }

    /// Parameter provided to the engine or retarder in the torque/speed control message for controlling or limiting the output torque.
    #[allow(dead_code)]
    pub fn engrqedtorque_torquelimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 + -125f64
    }

    /// Parameter provided to the engine from external sources in the torque/speed control message.
    #[allow(dead_code)]
    pub fn engrqedspeed_speedlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.125000
    }

    /// Read OverrideCtrlModePriority signal from can frame
    #[allow(dead_code)]
    pub fn overridectrlmodepriority(&self) -> OverrideCtrlModePriority2348875518 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OverrideCtrlModePriority2348875518::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This mode tells the engine control system the governor characteristics that are desired during speed control.
    #[allow(dead_code)]
    pub fn engrqedspeedctrlconditions(&self) -> EngRqedSpeedCtrlConditions2348875518 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngRqedSpeedCtrlConditions2348875518::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Read EngOverrideCtrlMode signal from can frame
    #[allow(dead_code)]
    pub fn engoverridectrlmode(&self) -> EngOverrideCtrlMode2348875518 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngOverrideCtrlMode2348875518::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Passenger Counter
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tr7 {
    frame_payload: Vec<u8>,
}

impl Tr7 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tr7 {
        Tr7 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tr7, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566766846 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tr7::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Status of the run switch for the vehicle.
    #[allow(dead_code)]
    pub fn transitrunstatus(&self) -> TransitRunStatus2566766846 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransitRunStatus2566766846::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Used to indicate the proper or unauthorized use of the vehicle.
    #[allow(dead_code)]
    pub fn vehicleusestatus(&self) -> VehicleUseStatus2566766846 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleUseStatus2566766846::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Used to report silent alarm push button status.
    #[allow(dead_code)]
    pub fn silentalarmstatus(&self) -> SilentAlarmStatus2566766846 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SilentAlarmStatus2566766846::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Count of the number of passengers on a transit vehicle.
    #[allow(dead_code)]
    pub fn patroncount(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Used to notify transit link devices of the type of passenger counting system used in the vehicle.
    #[allow(dead_code)]
    pub fn typeofpassengercount(&self) -> TypeOfPassengerCount2566766846 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TypeOfPassengerCount2566766846::from(((frame_payload & 0xFF) as f64) as u64)
    }
}

/// Farebox Status
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tr6 {
    frame_payload: Vec<u8>,
}

impl Tr6 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tr6 {
        Tr6 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tr6, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566765310 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tr6::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicates the nature of the farebox alarm condition.
    #[allow(dead_code)]
    pub fn fareboxalarmidentifier(&self) -> FareboxAlarmIdentifier2566765310 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FareboxAlarmIdentifier2566765310::from((((frame_payload >> 8) & 0x7F) as f64) as u64)
    }

    /// Indicates if a farebox emergency condition exists.
    #[allow(dead_code)]
    pub fn fareboxemergencystatus(&self) -> FareboxEmergencyStatus2566765310 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FareboxEmergencyStatus2566765310::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Farebox Point of Sale
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tr5 {
    frame_payload: Vec<u8>,
}

impl Tr5 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tr5 {
        Tr5 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tr5, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566765566 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tr5::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicates that a transfer was sold or issued on this transaction including its type and/or restrictions.
    #[allow(dead_code)]
    pub fn transfersold(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64
    }

    /// The route number issuing the transfer.
    #[allow(dead_code)]
    pub fn routenumber(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFF) as f64
    }

    /// Read TransferType signal from can frame
    #[allow(dead_code)]
    pub fn transfertype(&self) -> TransferType2566765566 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransferType2566765566::from((((frame_payload >> 35) & 0x1F) as f64) as u64)
    }

    /// Read TypeOfService signal from can frame
    #[allow(dead_code)]
    pub fn typeofservice(&self) -> TypeOfService2566765566 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TypeOfService2566765566::from((((frame_payload >> 32) & 0x7) as f64) as u64)
    }

    /// Read InitialFareAgency signal from can frame
    #[allow(dead_code)]
    pub fn initialfareagency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0x1F) as f64
    }

    /// Read PassCategory signal from can frame
    #[allow(dead_code)]
    pub fn passcategory(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 20) & 0xF) as f64
    }

    /// Read FareValidity signal from can frame
    #[allow(dead_code)]
    pub fn farevalidity(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xF) as f64
    }

    /// Payment details.
    #[allow(dead_code)]
    pub fn paymentdetails(&self) -> PaymentDetails2566765566 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PaymentDetails2566765566::from((((frame_payload >> 12) & 0xF) as f64) as u64)
    }

    /// Read TypeOfFare signal from can frame
    #[allow(dead_code)]
    pub fn typeoffare(&self) -> TypeOfFare2566765566 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TypeOfFare2566765566::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// Enumerated value representing the type/class of passenger, as defined by the agency.
    #[allow(dead_code)]
    pub fn passengertype(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 4) & 0xF) as f64
    }

    /// Read TransactionType signal from can frame
    #[allow(dead_code)]
    pub fn transactiontype(&self) -> TransactionType2566765566 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransactionType2566765566::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// Farebox Service Detail
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tr4 {
    frame_payload: Vec<u8>,
}

impl Tr4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tr4 {
        Tr4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tr4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566765822 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tr4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Security code for the farebox, numerical only.
    #[allow(dead_code)]
    pub fn driversfareboxsecuritycode(&self) -> DriversFareboxSecurityCode2566765822 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DriversFareboxSecurityCode2566765822::from((((frame_payload >> 104) & 0xFFFF) as f64) as u64)
    }

    /// Read AssignedBlock signal from can frame
    #[allow(dead_code)]
    pub fn assignedblock(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 88) & 0xFFFF) as f64
    }

    /// Read AssignedRun signal from can frame
    #[allow(dead_code)]
    pub fn assignedrun(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 72) & 0xFFFF) as f64
    }

    /// The identity number assigned to this route.
    #[allow(dead_code)]
    pub fn assignedroute(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFFFF) as f64
    }

    /// Read PatternNumber signal from can frame
    #[allow(dead_code)]
    pub fn patternnumber(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64
    }

    /// The identity number assigned to this trip.
    #[allow(dead_code)]
    pub fn tripnumber(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64
    }

    /// Read FarePresets signal from can frame
    #[allow(dead_code)]
    pub fn farepresets(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// The general direction of travel for this trip.
    #[allow(dead_code)]
    pub fn tripdirection(&self) -> TripDirection2566765822 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TripDirection2566765822::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// Read TripStatus signal from can frame
    #[allow(dead_code)]
    pub fn tripstatus(&self) -> TripStatus2566765822 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TripStatus2566765822::from((((frame_payload >> 2) & 0x7) as f64) as u64)
    }

    /// Indicates if the farebox is in or out of service.
    #[allow(dead_code)]
    pub fn fareboxservicestatus(&self) -> FareboxServiceStatus2566765822 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FareboxServiceStatus2566765822::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Signal Preemption
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tr3 {
    frame_payload: Vec<u8>,
}

impl Tr3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tr3 {
        Tr3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tr3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566766078 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tr3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Numerical designation of the vehicle.
    #[allow(dead_code)]
    pub fn vehicleid(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Read StrobeActivationCtrlStatus signal from can frame
    #[allow(dead_code)]
    pub fn strobeactivationctrlstatus(&self) -> StrobeActivationCtrlStatus2566766078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        StrobeActivationCtrlStatus2566766078::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// Read TransitDoorEnable signal from can frame
    #[allow(dead_code)]
    pub fn transitdoorenable(&self) -> TransitDoorEnable2566766078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransitDoorEnable2566766078::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Read PriorityOfRespSentByEmitter signal from can frame
    #[allow(dead_code)]
    pub fn priorityofrespsentbyemitter(&self) -> PriorityOfRespSentByEmitter2566766078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PriorityOfRespSentByEmitter2566766078::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// Read IntersectionPreemptionRq_Resp signal from can frame
    #[allow(dead_code)]
    pub fn intersectionpreemptionrq_resp(&self) -> IntersectionPreemptionRqResp2566766078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        IntersectionPreemptionRqResp2566766078::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Read TransitRouteIDUsage signal from can frame
    #[allow(dead_code)]
    pub fn transitrouteidusage(&self) -> TransitRouteIdUsage2566766078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransitRouteIdUsage2566766078::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Read RangeCodeEnable signal from can frame
    #[allow(dead_code)]
    pub fn rangecodeenable(&self) -> RangeCodeEnable2566766078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RangeCodeEnable2566766078::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }
}

/// Transit Milepost
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tr2 {
    frame_payload: Vec<u8>,
}

impl Tr2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tr2 {
        Tr2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tr2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566766590 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tr2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read NmbrOfBytsInMlpstIdentification signal from can frame
    #[allow(dead_code)]
    pub fn nmbrofbytsinmlpstidentification(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Transit Route
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tr1 {
    frame_payload: Vec<u8>,
}

impl Tr1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tr1 {
        Tr1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tr1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566766334 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tr1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Agency signal from can frame
    #[allow(dead_code)]
    pub fn agency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }

    /// Read NmbrOfBytsInTrnstAssgndBlckIdntt signal from can frame
    #[allow(dead_code)]
    pub fn nmbrofbytsintrnstassgndblckidntt(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// Read NmbrOfBytsInTrnstAssgndRnIdntty signal from can frame
    #[allow(dead_code)]
    pub fn nmbrofbytsintrnstassgndrnidntty(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Read NmbrOfBytsInTrnstAssgndRtIdntty signal from can frame
    #[allow(dead_code)]
    pub fn nmbrofbytsintrnstassgndrtidntty(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }
}

/// Tire Pressure Reference Setting
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tprs {
    frame_payload: Vec<u8>,
}

impl Tprs {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tprs {
        Tprs { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tprs, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2561605374 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tprs::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read ReferenceTirePressSetting signal from can frame
    #[allow(dead_code)]
    pub fn referencetirepresssetting(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 8.000000
    }

    /// Identifies which tire is associated with the parametric data in this PGN.
    #[allow(dead_code)]
    pub fn tirelocation(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Tire Pressure Reference Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tpri {
    frame_payload: Vec<u8>,
}

impl Tpri {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tpri {
        Tpri { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tpri, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566765054 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tpri::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read ReferenceTirePress signal from can frame
    #[allow(dead_code)]
    pub fn referencetirepress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 8.000000
    }

    /// Identifies which tire is associated with the parametric data in this PGN.
    #[allow(dead_code)]
    pub fn tirelocation(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Tire Pressure Control Unit Current Pressures
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tp3 {
    frame_payload: Vec<u8>,
}

impl Tp3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tp3 {
        Tp3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tp3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633923326 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tp3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The latest gage pressure reading of the steer group of tires, as opposed to the pressure in each tire.
    #[allow(dead_code)]
    pub fn steerchanneltirepress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.500000
    }

    /// The latest gage pressure reading of the drive group of tires, as opposed to the pressure in each tire.
    #[allow(dead_code)]
    pub fn drivechanneltirepress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.500000
    }

    /// The latest gage pressure reading of the trailer, tag, or push group of tires, as opposed to the pressure in each tire.
    #[allow(dead_code)]
    pub fn trailertagpushchanneltirepress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.500000
    }
}

/// Tire Pressure Control Unit Target Pressures
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tp2 {
    frame_payload: Vec<u8>,
}

impl Tp2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tp2 {
        Tp2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tp2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633923070 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tp2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The tire pressure control system�s target gage pressure for the steer group of tires.
    #[allow(dead_code)]
    pub fn steerchanneltirepresstarget(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.500000
    }

    /// The tire pressure control system�s target gage pressure for the drive group of tires.
    #[allow(dead_code)]
    pub fn drivechanneltirepresstarget(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.500000
    }

    /// The tire pressure control system�s target gage pressure for the trailer, tag, or push group of tires.
    #[allow(dead_code)]
    pub fn trlrtgpshchanneltirepresstarget(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.500000
    }
}

/// Tire Pressure Control Unit Mode and Status
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tp1 {
    frame_payload: Vec<u8>,
}

impl Tp1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tp1 {
        Tp1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tp1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633922814 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tp1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Current state of the supply solenoid used to implement a tire pressure control system in its pneumatic control unit (PCU).
    #[allow(dead_code)]
    pub fn pcusupplysolenoidstatus(&self) -> PcuSupplySolenoidStatus2633922814 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PcuSupplySolenoidStatus2633922814::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Current state of the control solenoid used to implement a tire pressure control system in its pneumatic control unit (PCU).
    #[allow(dead_code)]
    pub fn pcuctrlsolenoidstatus(&self) -> PcuCtrlSolenoidStatus2633922814 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PcuCtrlSolenoidStatus2633922814::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Current state of the deflate solenoid used to implement a tire pressure control system in its pneumatic control unit (PCU).
    #[allow(dead_code)]
    pub fn pcudeflatesolenoidstatus(&self) -> PcuDeflateSolenoidStatus2633922814 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PcuDeflateSolenoidStatus2633922814::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Current state of an open/closed type switch used to determine if adequate pressure exists for system implementation.
    #[allow(dead_code)]
    pub fn tirepresssupplyswitchstatus(&self) -> TirePressSupplySwitchStatus2633922814 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TirePressSupplySwitchStatus2633922814::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Current state of the steer solenoid used to implement a tire pressure control system in its pneumatic control unit (PCU).
    #[allow(dead_code)]
    pub fn pcusteersolenoidstatus(&self) -> PcuSteerSolenoidStatus2633922814 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PcuSteerSolenoidStatus2633922814::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Current state of the drive solenoid used to implement a tire pressure control system in its pneumatic control unit (PCU).
    #[allow(dead_code)]
    pub fn pcudrivesolenoidstatus(&self) -> PcuDriveSolenoidStatus2633922814 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PcuDriveSolenoidStatus2633922814::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Indicates the functional mode of trailer/tag channel of the tire pressure control system.
    #[allow(dead_code)]
    pub fn drivechannelmode(&self) -> DriveChannelMode2633922814 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DriveChannelMode2633922814::from((((frame_payload >> 20) & 0xF) as f64) as u64)
    }

    /// Indicates the functional mode of trailer/tag channel of the tire pressure control system.
    #[allow(dead_code)]
    pub fn trailer_tagchannelmode(&self) -> TrailerTagChannelMode2633922814 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerTagChannelMode2633922814::from((((frame_payload >> 16) & 0xF) as f64) as u64)
    }

    /// Indicates the functional mode of steer channel of the tire pressure control system.
    #[allow(dead_code)]
    pub fn steerchannelmode(&self) -> SteerChannelMode2633922814 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SteerChannelMode2633922814::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// The interval at which the system will check the tire pressures (e.
    #[allow(dead_code)]
    pub fn tirepresscheckinterval(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }

    /// Read PCUTrailerTagPushSolenoidStatus signal from can frame
    #[allow(dead_code)]
    pub fn pcutrailertagpushsolenoidstatus(&self) -> PcuTrailerTagPushSolenoidStatus2633922814 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PcuTrailerTagPushSolenoidStatus2633922814::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }
}

/// Tire Condition
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tire {
    frame_payload: Vec<u8>,
}

impl Tire {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tire {
        Tire { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tire, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566845694 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tire::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Signal indicating the pressure level of the tire.
    #[allow(dead_code)]
    pub fn tirepressthresholddetection(&self) -> TirePressThresholdDetection2566845694 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TirePressThresholdDetection2566845694::from((((frame_payload >> 61) & 0x7) as f64) as u64)
    }

    /// The pressure loss rate of a tire.
    #[allow(dead_code)]
    pub fn tireairleakagerate(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64 * 0.100000
    }

    /// Indicates the status of electrical fault on CTI wheel interface.
    #[allow(dead_code)]
    pub fn ctiwheelendelectricalfault(&self) -> CtiWheelEndElectricalFault2566845694 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CtiWheelEndElectricalFault2566845694::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Indicates the status of the tire.
    #[allow(dead_code)]
    pub fn ctitirestatus(&self) -> CtiTireStatus2566845694 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CtiTireStatus2566845694::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Indicates whether the wheel is being monitored by the CTI controller.
    #[allow(dead_code)]
    pub fn ctiwheelsensorstatus(&self) -> CtiWheelSensorStatus2566845694 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CtiWheelSensorStatus2566845694::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Temperature at the surface of the tire sidewall.
    #[allow(dead_code)]
    pub fn tiretemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Pressure at which air is contained in cavity formed by tire and rim.
    #[allow(dead_code)]
    pub fn tirepress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 4.000000
    }

    /// Identifies which tire is associated with the parametric data in this PGN.
    #[allow(dead_code)]
    pub fn tirelocation(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Tank Information 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ti1 {
    frame_payload: Vec<u8>,
}

impl Ti1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ti1 {
        Ti1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ti1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566805246 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ti1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of the reagent in the storage tank.
    #[allow(dead_code)]
    pub fn catalysttanktemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -40f64
    }

    /// A special catalyst uses chemical substance to reach legal requirement for NOX emissions.
    #[allow(dead_code)]
    pub fn catalysttanklevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }

    /// Used to identify the applicable J1939-73 FMI that applies to the most significant failure of the catalyst tank level sensor.
    #[allow(dead_code)]
    pub fn catalysttanklevelpreliminaryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0x1F) as f64
    }

    /// The measure of the reagent level in the catalyst tank.
    #[allow(dead_code)]
    pub fn catalysttanklevel2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }
}

/// Trip Fan Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tfi {
    frame_payload: Vec<u8>,
}

impl Tfi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tfi {
        Tfi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tfi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633939966 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tfi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total time the fan has been on due to manual activation by the operator (i.
    #[allow(dead_code)]
    pub fn tripfanontimeduetoamanualswitch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Total time the fan has been on (due to an automatic trigger or manual trigger) since the last trip reset.
    #[allow(dead_code)]
    pub fn tripfanontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Total time the fan has been on due to the A/C system since the last trip reset.
    #[allow(dead_code)]
    pub fn tripfanontimeduetoa_csystem(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 96) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Total time the fan has been on due to engine triggers (i.
    #[allow(dead_code)]
    pub fn tripfanontimeduetoengsystem(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.050000
    }
}

/// Trip Distance Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tdi {
    frame_payload: Vec<u8>,
}

impl Tdi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tdi {
        Tdi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tdi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633939710 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tdi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total distance accumulated while the vehicle has operated in top gear for a calibrated minimum time since the last trip reset.
    #[allow(dead_code)]
    pub fn tripdistanceintopgear(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFFFFFF) as f64 * 0.125000
    }

    /// Read TripGearDownDistance signal from can frame
    #[allow(dead_code)]
    pub fn tripgeardowndistance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.125000
    }

    /// Total distance accumulated while the engine torque mode is road speed governing since the last trip reset.
    #[allow(dead_code)]
    pub fn tripdistanceonvsl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.125000
    }
}

/// Time/Date Adjust
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tda {
    frame_payload: Vec<u8>,
}

impl Tda {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tda {
        Tda { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tda, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2564161278 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tda::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read AdjustLocalHourOffset signal from can frame
    #[allow(dead_code)]
    pub fn adjustlocalhouroffset(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 + -125f64
    }

    /// Used to set the local offset in minutes from a reference time.
    #[allow(dead_code)]
    pub fn adjustlocalminuteoffset(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 + -125f64
    }

    /// Part of a parameter used to set a calendar date.
    #[allow(dead_code)]
    pub fn adjustyear(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 + 1985f64
    }

    /// Part of a parameter used to set a calendar date.
    #[allow(dead_code)]
    pub fn adjustday(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 0.250000
    }

    /// Part of a parameter used to set a calendar date.
    #[allow(dead_code)]
    pub fn adjustmonth(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// Part of the parameter used to set the time.
    #[allow(dead_code)]
    pub fn adjusthours(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Part of the parameter used to set the time.
    #[allow(dead_code)]
    pub fn adjustminutes(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Part of the parameter used to set the time.
    #[allow(dead_code)]
    pub fn adjustseconds(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.250000
    }
}

/// Time/Date
#[allow(dead_code)]
#[derive(Debug)]
pub struct Td {
    frame_payload: Vec<u8>,
}

impl Td {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Td {
        Td { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Td, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566842110 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Td::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read LocalHourOffset signal from can frame
    #[allow(dead_code)]
    pub fn localhouroffset(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 + -125f64
    }

    /// Local offset in minutes from a reference time.
    #[allow(dead_code)]
    pub fn localminuteoffset(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 + -125f64
    }

    /// Part of a parameter used to represent a calendar date.
    #[allow(dead_code)]
    pub fn year(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 + 1985f64
    }

    /// Part of a parameter used to represent a calendar date.
    #[allow(dead_code)]
    pub fn day(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 0.250000
    }

    /// Part of a parameter used to represent a calendar date.
    #[allow(dead_code)]
    pub fn month(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// Part of a parameter used to represent time.
    #[allow(dead_code)]
    pub fn hours(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Part of a parameter used to represent time.
    #[allow(dead_code)]
    pub fn minutes(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Part of a parameter used to represent time.
    #[allow(dead_code)]
    pub fn seconds(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.250000
    }
}

/// Turbocharger Wastegate
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tcw {
    frame_payload: Vec<u8>,
}

impl Tcw {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tcw {
        Tcw { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tcw, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566821630 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tcw::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Gage pressure of the air used to control the actuator which opens and closes the wastegate valve.
    #[allow(dead_code)]
    pub fn engtrbwstgtactuatorctrlairpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 4.000000
    }

    /// Position of the wastegate drive.
    #[allow(dead_code)]
    pub fn engturbo4wastegatedrive(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.400000
    }

    /// Position of the wastegate drive.
    #[allow(dead_code)]
    pub fn engturbo3wastegatedrive(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 0.400000
    }

    /// Position of the wastegate drive.
    #[allow(dead_code)]
    pub fn engturbo2wastegatedrive(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.400000
    }

    /// Position of the wastegate drive.
    #[allow(dead_code)]
    pub fn engturbo1wastegatedrive(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }
}

/// Tachograph
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tco1 {
    frame_payload: Vec<u8>,
}

impl Tco1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tco1 {
        Tco1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tco1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365484286 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tco1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Speed of the vehicle registered by the tachograph.
    #[allow(dead_code)]
    pub fn tachographvehiclespeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.003906
    }

    /// Calculated speed of the transmission output shaft.
    #[allow(dead_code)]
    pub fn tachographoutputshaftspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.125000
    }

    /// Indicates the direction of the vehicle.
    #[allow(dead_code)]
    pub fn directionindicator(&self) -> DirectionIndicator2365484286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DirectionIndicator2365484286::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Read TachographPerformance signal from can frame
    #[allow(dead_code)]
    pub fn tachographperformance(&self) -> TachographPerformance2365484286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TachographPerformance2365484286::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Indicates that handling information is present.
    #[allow(dead_code)]
    pub fn handlinginformation(&self) -> HandlingInformation2365484286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HandlingInformation2365484286::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Indicates that a tachograph event has occurred.
    #[allow(dead_code)]
    pub fn systemevent(&self) -> SystemEvent2365484286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SystemEvent2365484286::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Read DriverCardDriver2 signal from can frame
    #[allow(dead_code)]
    pub fn drivercarddriver2(&self) -> DriverCardDriver22365484286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DriverCardDriver22365484286::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Indicates if the driver approaches or exceeds working time limits (or other limits).
    #[allow(dead_code)]
    pub fn driver2timerelatedstates(&self) -> Driver2TimeRelatedStates2365484286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Driver2TimeRelatedStates2365484286::from((((frame_payload >> 16) & 0xF) as f64) as u64)
    }

    /// Indicates whether the vehicle is exceeding the legal speed limit set in the tachograph.
    #[allow(dead_code)]
    pub fn overspeed(&self) -> Overspeed2365484286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Overspeed2365484286::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// Read DriverCardDriver1 signal from can frame
    #[allow(dead_code)]
    pub fn drivercarddriver1(&self) -> DriverCardDriver12365484286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DriverCardDriver12365484286::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Indicates if the driver approaches or exceeds working time limits (or other limits).
    #[allow(dead_code)]
    pub fn driver1timerelatedstates(&self) -> Driver1TimeRelatedStates2365484286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Driver1TimeRelatedStates2365484286::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// Indicates whether motion of the vehicle is detected or not.
    #[allow(dead_code)]
    pub fn driverecognize(&self) -> DriveRecognize2365484286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DriveRecognize2365484286::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// State of work of the driver.
    #[allow(dead_code)]
    pub fn driver2workingstate(&self) -> Driver2WorkingState2365484286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Driver2WorkingState2365484286::from((((frame_payload >> 3) & 0x7) as f64) as u64)
    }

    /// State of work of the driver.
    #[allow(dead_code)]
    pub fn driver1workingstate(&self) -> Driver1WorkingState2365484286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Driver1WorkingState2365484286::from(((frame_payload & 0x7) as f64) as u64)
    }
}

/// Turbocharger Information 6
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tci6 {
    frame_payload: Vec<u8>,
}

impl Tci6 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tci6 {
        Tci6 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tci6, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566771710 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tci6::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngTurbo4CompressorOutletTemp signal from can frame
    #[allow(dead_code)]
    pub fn engturbo4compressoroutlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Read EngTurbo3CompressorOutletTemp signal from can frame
    #[allow(dead_code)]
    pub fn engturbo3compressoroutlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Read EngTurbo2CompressorOutletTemp signal from can frame
    #[allow(dead_code)]
    pub fn engturbo2compressoroutlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Read EngTurbo1CompressorOutletTemp signal from can frame
    #[allow(dead_code)]
    pub fn engturbo1compressoroutlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Turbocharger Information 5
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tci5 {
    frame_payload: Vec<u8>,
}

impl Tci5 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tci5 {
        Tci5 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tci5, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566821886 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tci5::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of the combustion by-products exiting the turbine side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo4turbineoutlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the combustion by-products exiting the turbine side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo3turbineoutlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the combustion by-products exiting the turbine side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo2turbineoutlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the combustion by-products exiting the turbine side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo1turbineoutlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Turbocharger Information 4
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tci4 {
    frame_payload: Vec<u8>,
}

impl Tci4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tci4 {
        Tci4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tci4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566822142 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tci4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of the combustion by-products entering the turbine side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo4turbineinlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the combustion by-products entering the turbine side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo3turbineinlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the combustion by-products entering the turbine side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo2turbineinlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the combustion by-products entering the turbine side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo1turbineinlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Turbocharger Information 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tci3 {
    frame_payload: Vec<u8>,
}

impl Tci3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tci3 {
        Tci3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tci3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566822398 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tci3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Gage pressure of the air entering the compressor side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo4compressorinletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.007812 + -250f64
    }

    /// Gage pressure of the air entering the compressor side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo3compressorinletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.007812 + -250f64
    }

    /// Gage pressure of the air entering the compressor side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo2compressorinletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.007812 + -250f64
    }

    /// Gage pressure of the air entering the compressor side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo1compressorinletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.007812 + -250f64
    }
}

/// Turbocharger Information 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tci2 {
    frame_payload: Vec<u8>,
}

impl Tci2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tci2 {
        Tci2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tci2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566822654 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tci2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of the air entering the compressor side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo4compressorinlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the air entering the compressor side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo3compressorinlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the air entering the compressor side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo2compressorinlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the air entering the compressor side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo1compressorinlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Turbocharger Information 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tci1 {
    frame_payload: Vec<u8>,
}

impl Tci1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tci1 {
        Tci1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tci1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633931774 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tci1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Rotational velocity of rotor in the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo4speed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64 * 4.000000
    }

    /// Rotational velocity of rotor in the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo3speed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64 * 4.000000
    }

    /// Rotational velocity of rotor in the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo2speed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 4.000000
    }

    /// Gage pressure of oil in turbocharger lubrication system.
    #[allow(dead_code)]
    pub fn engturbolubeoilpress2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 4.000000
    }
}

/// Transmission Configuration 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tcfg2 {
    frame_payload: Vec<u8>,
}

impl Tcfg2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tcfg2 {
        Tcfg2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tcfg2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566802430 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tcfg2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read TransTorqueLimit signal from can frame
    #[allow(dead_code)]
    pub fn transtorquelimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Transmission Configuration
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tcfg {
    frame_payload: Vec<u8>,
}

impl Tcfg {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tcfg {
        Tcfg { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tcfg, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566841086 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tcfg::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read TransGearRatio signal from can frame
    #[allow(dead_code)]
    pub fn transgearratio(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.001000
    }

    /// Number of forward gear ratios in the transmission, provided as part of the configuration.
    #[allow(dead_code)]
    pub fn numberofforwardgearratios(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Number of reverse gear ratios in the transmission, provided as part of the transmission configuration.
    #[allow(dead_code)]
    pub fn numberofreversegearratios(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Transmission Control 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tc1 {
    frame_payload: Vec<u8>,
}

impl Tc1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tc1 {
        Tc1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tc1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2348941054 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tc1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Status of the operator�s switch used to �toggle� through multiple display modes of a shift selector display.
    #[allow(dead_code)]
    pub fn trnsshftslctordisplaymodeswitch(&self) -> TrnsShftSlctorDisplayModeSwitch2348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrnsShftSlctorDisplayModeSwitch2348941054::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Indicates whether transmission mode 4 is enabled.
    #[allow(dead_code)]
    pub fn transmode4(&self) -> TransMode42348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransMode42348941054::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Indicates whether transmission mode 3 is enabled.
    #[allow(dead_code)]
    pub fn transmode3(&self) -> TransMode32348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransMode32348941054::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Indicates whether transmission mode 2 is enabled.
    #[allow(dead_code)]
    pub fn transmode2(&self) -> TransMode22348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransMode22348941054::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Indicates whether transmission mode 1 is enabled.
    #[allow(dead_code)]
    pub fn transmode1(&self) -> TransMode12348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransMode12348941054::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Command signal used to disengage the various differential locks, e.
    #[allow(dead_code)]
    pub fn disengagedifflockrqcentralrear(&self) -> DisengageDiffLockRqCentralRear2348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DisengageDiffLockRqCentralRear2348941054::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Command signal used to disengage the various differential locks, e.
    #[allow(dead_code)]
    pub fn disengagedifflockrqcentralfront(&self) -> DisengageDiffLockRqCentralFront2348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DisengageDiffLockRqCentralFront2348941054::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Command signal used to disengage the various differential locks, e.
    #[allow(dead_code)]
    pub fn disengagedifflockrqcentral(&self) -> DisengageDiffLockRqCentral2348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DisengageDiffLockRqCentral2348941054::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Command signal used to disengage the various differential locks, e.
    #[allow(dead_code)]
    pub fn disengagedifflockrqrearaxle2(&self) -> DisengageDiffLockRqRearAxle22348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DisengageDiffLockRqRearAxle22348941054::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Command signal used to disengage the various differential locks, e.
    #[allow(dead_code)]
    pub fn disengagedifflockrqrearaxle1(&self) -> DisengageDiffLockRqRearAxle12348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DisengageDiffLockRqRearAxle12348941054::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Command signal used to disengage the various differential locks, e.
    #[allow(dead_code)]
    pub fn disengagedifflockrqfrontaxle2(&self) -> DisengageDiffLockRqFrontAxle22348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DisengageDiffLockRqFrontAxle22348941054::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Command signal used to disengage the various differential locks, e.
    #[allow(dead_code)]
    pub fn disengagedifflockrqfrontaxle1(&self) -> DisengageDiffLockRqFrontAxle12348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DisengageDiffLockRqFrontAxle12348941054::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Gear requested by the operator, ABS, or engine.
    #[allow(dead_code)]
    pub fn transrqedgear(&self) -> TransRqedGear2348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransRqedGear2348941054::from((((frame_payload >> 16) & 0xFF) as f64 + -125f64) as u64)
    }

    /// Parameter which represents the percent clutch slip requested by a device.
    #[allow(dead_code)]
    pub fn rqedpercentclutchslip(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.400000
    }

    /// Command signal used to simply disengage the driveline, e.
    #[allow(dead_code)]
    pub fn disengagedrivelinerq(&self) -> DisengageDrivelineRq2348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DisengageDrivelineRq2348941054::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Command signal to prevent torque converter lockup, which may cause problems in certain circumstances for ASR.
    #[allow(dead_code)]
    pub fn torqueconverterlockupdisablerq(&self) -> TorqueConverterLockupDisableRq2348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TorqueConverterLockupDisableRq2348941054::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Command signal to inhibit gear shifts.
    #[allow(dead_code)]
    pub fn transgearshiftinhibitrq(&self) -> TransGearShiftInhibitRq2348941054 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransGearShiftInhibitRq2348941054::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Turbocharger
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tc {
    frame_payload: Vec<u8>,
}

impl Tc {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tc {
        Tc { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tc, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566839806 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tc::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngTurboOilLevelSwitch signal from can frame
    #[allow(dead_code)]
    pub fn engturbooillevelswitch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 30) & 0x3) as f64
    }

    /// Rotational velocity of rotor in the turbocharger.
    #[allow(dead_code)]
    pub fn engturbo1speed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 4.000000
    }

    /// Gage pressure of oil in turbocharger lubrication system.
    #[allow(dead_code)]
    pub fn engturbolubeoilpress1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 4.000000
    }
}

/// Total Averaged Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tavg {
    frame_payload: Vec<u8>,
}

impl Tavg {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tavg {
        Tavg { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tavg, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633911806 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tavg::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngTotalAverageFuelEconomy signal from can frame
    #[allow(dead_code)]
    pub fn engtotalaveragefueleconomy(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.001953
    }

    /// Read EngTotalAverageFuelRate signal from can frame
    #[allow(dead_code)]
    pub fn engtotalaveragefuelrate(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000
    }
}

/// Supply Pressure Demand
#[allow(dead_code)]
#[derive(Debug)]
pub struct Spr {
    frame_payload: Vec<u8>,
}

impl Spr {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Spr {
        Spr { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Spr, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566775550 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Spr::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Command signal to influence the pneumatic pressure in the circuit for the electronically controlled air suspension system.
    #[allow(dead_code)]
    pub fn airsuspensionsupplypressrq(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 8.000000
    }

    /// Command signal to influence the pneumatic pressure in the auxiliary circuit.
    #[allow(dead_code)]
    pub fn auxequipmentsupplypressrq(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 8.000000
    }

    /// Command signal to influence the pneumatic pressure in the service brake circuit or reservoir #2.
    #[allow(dead_code)]
    pub fn servicebrakeairpressrqcircuit2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 8.000000
    }

    /// Command signal to influence the pneumatic pressure in the service brake circuit or reservoir #1.
    #[allow(dead_code)]
    pub fn servicebrakeairpressrqcircuit1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 8.000000
    }

    /// Command signal to influence the pneumatic pressure in the circuit or reservoir for the parking brake and/or the trailer supply.
    #[allow(dead_code)]
    pub fn parkingand_ortrailerairpressrq(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 8.000000
    }

    /// Command signal to influence the pneumatic pressure in the main reservoir.
    #[allow(dead_code)]
    pub fn pneumaticsupplypressrq(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 8.000000
    }
}

/// Supply Pressure 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Sp2 {
    frame_payload: Vec<u8>,
}

impl Sp2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Sp2 {
        Sp2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Sp2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566819838 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Sp2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Pressure of the air used to shut off the fuel supply to the engine.
    #[allow(dead_code)]
    pub fn engextlshutdownairsupplypress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.500000
    }
}

/// Software Identification
#[allow(dead_code)]
#[derive(Debug)]
pub struct Soft {
    frame_payload: Vec<u8>,
}

impl Soft {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Soft {
        Soft { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Soft, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566839038 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Soft::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Number of software identification designators represented in the software identification parameter group.
    #[allow(dead_code)]
    pub fn nmbrofsftwridentificationfields(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Shutdown
#[allow(dead_code)]
#[derive(Debug)]
pub struct Shutdow {
    frame_payload: Vec<u8>,
}

impl Shutdow {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Shutdow {
        Shutdow { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Shutdow, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566841598 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Shutdow::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The engine overspeed test signal as measured by the reporting ECM.
    #[allow(dead_code)]
    pub fn engoverspeedtest(&self) -> EngOverspeedTest2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngOverspeedTest2566841598::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// State signal which indicates when the Air Shutoff driver output is being driven.
    #[allow(dead_code)]
    pub fn engairshutoffcmdstatus(&self) -> EngAirShutoffCmdStatus2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAirShutoffCmdStatus2566841598::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// State signal which indicates when the Alarm driver output is being driven.
    #[allow(dead_code)]
    pub fn engalarmoutputcmdstatus(&self) -> EngAlarmOutputCmdStatus2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAlarmOutputCmdStatus2566841598::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// The Engine Alarm Acknowledge Input signal as measured by the reporting ECM.
    #[allow(dead_code)]
    pub fn engalarmacknowledge(&self) -> EngAlarmAcknowledge2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAlarmAcknowledge2566841598::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Parameter which indicates the configuration of the engine shutdown system.
    #[allow(dead_code)]
    pub fn engprotectionsystemconfig(&self) -> EngProtectionSystemConfig2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngProtectionSystemConfig2566841598::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Status signal which indicates the current mode of the engine protection system timer system.
    #[allow(dead_code)]
    pub fn engprotectionsystemtimerstate(&self) -> EngProtectionSystemTimerState2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngProtectionSystemTimerState2566841598::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Status signal which indicates the status of the override feature of the engine protection system timer.
    #[allow(dead_code)]
    pub fn engprtectionsystemtimeroverride(&self) -> EngPrtectionSystemTimerOverride2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngPrtectionSystemTimerOverride2566841598::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Status signal which indicates that engine shutdown is imminent.
    #[allow(dead_code)]
    pub fn engprtctnsystmapprchingshutdown(&self) -> EngPrtctnSystmApprchingShutdown2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngPrtctnSystmApprchingShutdown2566841598::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Status signal which indicates whether or not the engine protection system has shutdown the engine.
    #[allow(dead_code)]
    pub fn engprtctionsystemhasshutdowneng(&self) -> EngPrtctionSystemHasShutdownEng2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngPrtctionSystemHasShutdownEng2566841598::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Read EngWaitToStartLamp signal from can frame
    #[allow(dead_code)]
    pub fn engwaittostartlamp(&self) -> EngWaitToStartLamp2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngWaitToStartLamp2566841598::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates the position of the high pressure switch in the coolant circuit of an air conditioning system.
    #[allow(dead_code)]
    pub fn refrigeranthighpressswitch(&self) -> RefrigerantHighPressSwitch2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RefrigerantHighPressSwitch2566841598::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates the position of the low pressure switch in the coolant circuit of an air conditioning system.
    #[allow(dead_code)]
    pub fn refrigerantlowpressswitch(&self) -> RefrigerantLowPressSwitch2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RefrigerantLowPressSwitch2566841598::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Read A_CHighPressFanSwitch signal from can frame
    #[allow(dead_code)]
    pub fn a_chighpressfanswitch(&self) -> ACHighPressFanSwitch2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ACHighPressFanSwitch2566841598::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Parameter which indicates the configuration of the idle shutdown timer system.
    #[allow(dead_code)]
    pub fn engidleshutdowntimerfunction(&self) -> EngIdleShutdownTimerFunction2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngIdleShutdownTimerFunction2566841598::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// Status signal which indicates the current mode of operation of the idle shutdown timer system.
    #[allow(dead_code)]
    pub fn engidleshutdowntimerstate(&self) -> EngIdleShutdownTimerState2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngIdleShutdownTimerState2566841598::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Status signal which indicates the status of the override feature of the idle shutdown timer system.
    #[allow(dead_code)]
    pub fn engidleshutdowntimeroverride(&self) -> EngIdleShutdownTimerOverride2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngIdleShutdownTimerOverride2566841598::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Status signal which indicates the status of the driver alert mode of the idle shutdown timer system.
    #[allow(dead_code)]
    pub fn engidleshutdowndriveralertmode(&self) -> EngIdleShutdownDriverAlertMode2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngIdleShutdownDriverAlertMode2566841598::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Status signal which identifies whether or not the engine has been shutdown by the idle shutdown timer system.
    #[allow(dead_code)]
    pub fn engidleshutdownhasshutdowneng(&self) -> EngIdleShutdownHasShutdownEng2566841598 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngIdleShutdownHasShutdownEng2566841598::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Service Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Serv {
    frame_payload: Vec<u8>,
}

impl Serv {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Serv {
        Serv { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Serv, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566832382 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Serv::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Identification of component needing service.
    #[allow(dead_code)]
    pub fn servicecomponentidentificationb(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// Identification of component needing service.
    #[allow(dead_code)]
    pub fn servicecomponentidentificationa(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }

    /// The time in vehicle operational time until the next vehicle service inspection is required.
    #[allow(dead_code)]
    pub fn srvcedelay_operationaltimebased(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 + -31873f64
    }

    /// The time in weeks until the next vehicle service inspection is required.
    #[allow(dead_code)]
    pub fn servicedelay_calendartimebased(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 + -125f64
    }

    /// The distance which can be traveled by the vehicle before the next service inspection is required.
    #[allow(dead_code)]
    pub fn servicedistance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 5.000000 + -159365f64
    }

    /// Identification of component needing service.
    #[allow(dead_code)]
    pub fn servicecomponentidentification(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64
    }
}

/// Service 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct S2 {
    frame_payload: Vec<u8>,
}

impl S2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> S2 {
        S2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = S2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633928446 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| S2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The vehicle operation time since the last service was performed.
    #[allow(dead_code)]
    pub fn timesincelastservice(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 + -32127f64
    }

    /// Identification of component needing service.
    #[allow(dead_code)]
    pub fn servicecomponentidentification(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Retarder Continuous Torque & Speed Limit
#[allow(dead_code)]
#[derive(Debug)]
pub struct Rtc1 {
    frame_payload: Vec<u8>,
}

impl Rtc1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Rtc1 {
        Rtc1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Rtc1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566804478 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Rtc1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Applied limit for maximum continuous retarder torque.
    #[allow(dead_code)]
    pub fn maxcontinuousretardertorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 + -125f64
    }

    /// Read MinContinuousRetarderSpeed signal from can frame
    #[allow(dead_code)]
    pub fn mincontinuousretarderspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 32.000000
    }

    /// Read MaxContinuousRetarderSpeed signal from can frame
    #[allow(dead_code)]
    pub fn maxcontinuousretarderspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 32.000000
    }

    /// Maximum allowable value for minimum continuous retarder torque.
    #[allow(dead_code)]
    pub fn hghlmtthrshhldfrmncntnstrqfrmrtr(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 + -125f64
    }

    /// Minimum allowable value for maximum continuous retarder torque.
    #[allow(dead_code)]
    pub fn lwlmtthrshhldfrmxtrqfrmretarder(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -125f64
    }

    /// Read HghLmtThrshhldFrMnCntnsRPMFrmRtr signal from can frame
    #[allow(dead_code)]
    pub fn hghlmtthrshhldfrmncntnsrpmfrmrtr(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 32.000000
    }

    /// Read LwLmtThrshhldFrMxRPMFrmRetarder signal from can frame
    #[allow(dead_code)]
    pub fn lwlmtthrshhldfrmxrpmfrmretarder(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 32.000000
    }

    /// Read MinContinuousRetarderTorque signal from can frame
    #[allow(dead_code)]
    pub fn mincontinuousretardertorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 + -125f64
    }
}

/// Retarder fluids
#[allow(dead_code)]
#[derive(Debug)]
pub struct Rf {
    frame_payload: Vec<u8>,
}

impl Rf {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Rf {
        Rf { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Rf, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566847486 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Rf::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of oil found in a hydraulic retarder.
    #[allow(dead_code)]
    pub fn hydretarderoiltemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -40f64
    }

    /// Gage pressure of oil in hydraulic retarder system.
    #[allow(dead_code)]
    pub fn hydretarderpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 16.000000
    }
}

/// Reset
#[allow(dead_code)]
#[derive(Debug)]
pub struct Reset {
    frame_payload: Vec<u8>,
}

impl Reset {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Reset {
        Reset { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Reset, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2631859966 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Reset::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Command signal used to reset the engine rebuild hours.
    #[allow(dead_code)]
    pub fn engbuildhoursreset(&self) -> EngBuildHoursReset2631859966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngBuildHoursReset2631859966::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Identification of component needing service.
    #[allow(dead_code)]
    pub fn servicecomponentidentification(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Command signal used to reset proprietary parameters associated with a trip but not defined within this document.
    #[allow(dead_code)]
    pub fn tripgroup2proprietary(&self) -> TripGroup2Proprietary2631859966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TripGroup2Proprietary2631859966::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Command signal used to reset the PGNs and parameters as defined in Table SPN988_A.
    #[allow(dead_code)]
    pub fn tripgroup1(&self) -> TripGroup12631859966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TripGroup12631859966::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Retarder Configuration
#[allow(dead_code)]
#[derive(Debug)]
pub struct Rc {
    frame_payload: Vec<u8>,
}

impl Rc {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Rc {
        Rc { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Rc, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566840830 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Rc::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read PercentTorqueAtPeakTorquePoint5 signal from can frame
    #[allow(dead_code)]
    pub fn percenttorqueatpeaktorquepoint5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 144) & 0xFF) as f64 + -125f64
    }

    /// This parameter is the 100% reference value for all defined indicated retarder torque parameters.
    #[allow(dead_code)]
    pub fn referenceretardertorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 128) & 0xFFFF) as f64
    }

    /// Read RetarderSpeedAtPeakTorquePoint5 signal from can frame
    #[allow(dead_code)]
    pub fn retarderspeedatpeaktorquepoint5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 112) & 0xFFFF) as f64 * 0.125000
    }

    /// Read PercentTorqueAtPoint4 signal from can frame
    #[allow(dead_code)]
    pub fn percenttorqueatpoint4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 104) & 0xFF) as f64 + -125f64
    }

    /// Retarder speed of point 4 of the engine retarder torque map.
    #[allow(dead_code)]
    pub fn retarderspeedatpoint4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 88) & 0xFFFF) as f64 * 0.125000
    }

    /// Read PercentTorqueAtPoint3 signal from can frame
    #[allow(dead_code)]
    pub fn percenttorqueatpoint3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 80) & 0xFF) as f64 + -125f64
    }

    /// Retarder speed of point 3 of the engine retarder torque map.
    #[allow(dead_code)]
    pub fn retarderspeedatpoint3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFF) as f64 * 0.125000
    }

    /// The torque limit that indicates the available retarder torque which can be provided by the retarder at its maximum speed.
    #[allow(dead_code)]
    pub fn percenttorqueatmaxspeedpoint2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 + -125f64
    }

    /// Maximum speed of retarder (Please reference PGN 65249).
    #[allow(dead_code)]
    pub fn maxretarderspeedpoint2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64 * 0.125000
    }

    /// The torque limit that indicates the available retarder torque which can be provided by the retarder at idle speed.
    #[allow(dead_code)]
    pub fn percenttorqueatidlepoint1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 + -125f64
    }

    /// Read RetarderSpeedAtIdlePoint1 signal from can frame
    #[allow(dead_code)]
    pub fn retarderspeedatidlepoint1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.125000
    }

    /// This parameter identifies the number of steps used by the retarder.
    #[allow(dead_code)]
    pub fn retarderctrlmethod(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Read RetarderLocation signal from can frame
    #[allow(dead_code)]
    pub fn retarderlocation(&self) -> RetarderLocation2566840830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RetarderLocation2566840830::from((((frame_payload >> 4) & 0xF) as f64) as u64)
    }

    /// A vehicle retarder is a supplementary device to the wheel brakes for the driver to better control the vehicle.
    #[allow(dead_code)]
    pub fn retardertype(&self) -> RetarderType2566840830 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RetarderType2566840830::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// Rebuild Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Rbi {
    frame_payload: Vec<u8>,
}

impl Rbi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Rbi {
        Rbi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Rbi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633930238 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Rbi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The time in engine operation since the last engine rebuild.
    #[allow(dead_code)]
    pub fn engoperationtimesincerebuild(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64
    }
}

/// Power Takeoff Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Pto {
    frame_payload: Vec<u8>,
}

impl Pto {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Pto {
        Pto { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Pto, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566844670 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Pto::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Measured state of the operator PTO memory select switch.
    #[allow(dead_code)]
    pub fn operatorptomemoryselectswitch(&self) -> OperatorPtoMemorySelectSwitch2566844670 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OperatorPtoMemorySelectSwitch2566844670::from((((frame_payload >> 56) & 0x3) as f64) as u64)
    }

    /// Switch signal of the PTO control activator which indicates that the activator is in the position 'accelerate'.
    #[allow(dead_code)]
    pub fn engptoaccelerateswitch(&self) -> EngPtoAccelerateSwitch2566844670 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngPtoAccelerateSwitch2566844670::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Switch signal of the PTO control activator which indicates that the activator is in the position 'resume'.
    #[allow(dead_code)]
    pub fn engptoresumeswitch(&self) -> EngPtoResumeSwitch2566844670 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngPtoResumeSwitch2566844670::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Switch signal of the PTO control activator which indicates that the activator is in the position 'coast/decelerate'.
    #[allow(dead_code)]
    pub fn engptocoast_decelerateswitch(&self) -> EngPtoCoastDecelerateSwitch2566844670 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngPtoCoastDecelerateSwitch2566844670::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Switch signal of the PTO control activator which indicates that the activator is in the position 'set'.
    #[allow(dead_code)]
    pub fn engptosetswitch(&self) -> EngPtoSetSwitch2566844670 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngPtoSetSwitch2566844670::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates that the remote PTO toggle switch is in the enabled (ON) position.
    #[allow(dead_code)]
    pub fn engrmtptovriablespeedctrlswitch(&self) -> EngRmtPtoVriableSpeedCtrlSwitch2566844670 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngRmtPtoVriableSpeedCtrlSwitch2566844670::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates that the remote PTO toggle switch is in the enabled (ON) position.
    #[allow(dead_code)]
    pub fn engrmtptoprprgrmmdspdctrlswitch(&self) -> EngRmtPtoPrprgrmmdSpdCtrlSwitch2566844670 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngRmtPtoPrprgrmmdSpdCtrlSwitch2566844670::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Read EngPTOEnableSwitch signal from can frame
    #[allow(dead_code)]
    pub fn engptoenableswitch(&self) -> EngPtoEnableSwitch2566844670 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngPtoEnableSwitch2566844670::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Rotational velocity selected by operator for device used to transmit engine power to auxiliary equipment.
    #[allow(dead_code)]
    pub fn powertakeoffsetspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64 * 0.125000
    }

    /// Rotational velocity of device used to transmit engine power to auxiliary equipment.
    #[allow(dead_code)]
    pub fn powertakeoffspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.125000
    }

    /// Temperature of lubricant in device used to transmit engine power to auxiliary equipment.
    #[allow(dead_code)]
    pub fn powertakeoffoiltemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -40f64
    }

    /// Switch signal which indicates that the remote PTO toggle switch #2 is in the enabled (ON) position.
    #[allow(dead_code)]
    pub fn rmtptoprprgrmmdspeedctrlswitch2(&self) -> RmtPtoPrprgrmmdSpeedCtrlSwitch22566844670 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RmtPtoPrprgrmmdSpeedCtrlSwitch22566844670::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// Switch signal which overrides other switch input's ability to kick out of an engine's operating condition.
    #[allow(dead_code)]
    pub fn auxinputignoreswitch(&self) -> AuxInputIgnoreSwitch2566844670 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxInputIgnoreSwitch2566844670::from((((frame_payload >> 60) & 0x3) as f64) as u64)
    }
}

/// Operator Wiper and Washer Controls Message
#[allow(dead_code)]
#[derive(Debug)]
pub struct Oww {
    frame_payload: Vec<u8>,
}

impl Oww {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Oww {
        Oww { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Oww, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566770174 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Oww::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// State of operation selected by operator switch for the rear washer.
    #[allow(dead_code)]
    pub fn rearwasherfunction(&self) -> RearWasherFunction2566770174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RearWasherFunction2566770174::from((((frame_payload >> 53) & 0x7) as f64) as u64)
    }

    /// State of operation selected by operator switch for the washer in front of the operator position.
    #[allow(dead_code)]
    pub fn frontoperatorwasherswitch(&self) -> FrontOperatorWasherSwitch2566770174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FrontOperatorWasherSwitch2566770174::from((((frame_payload >> 45) & 0x7) as f64) as u64)
    }

    /// State of operation selected by operator switch for the front washer not in front of the operator position.
    #[allow(dead_code)]
    pub fn frontnonoperatorwasherswitch(&self) -> FrontNonoperatorWasherSwitch2566770174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FrontNonoperatorWasherSwitch2566770174::from((((frame_payload >> 42) & 0x7) as f64) as u64)
    }

    /// Time between cycles of the rear wiper (i.
    #[allow(dead_code)]
    pub fn rearwiperdelayctrl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 0.400000
    }

    /// Time between cycles of the front non-operator side wiper (i.
    #[allow(dead_code)]
    pub fn frontnonoperatorwiperdelayctrl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.400000
    }

    /// Time between cycles of the front operator side wiper (i.
    #[allow(dead_code)]
    pub fn frontoperatorwiperdelayctrl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 0.400000
    }

    /// State of operation selected by operator switch for the rear wiper.
    #[allow(dead_code)]
    pub fn rearwiperswitch(&self) -> RearWiperSwitch2566770174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RearWiperSwitch2566770174::from((((frame_payload >> 12) & 0xF) as f64) as u64)
    }

    /// State of operation selected by operator switch for the Wiper in front of the operator position.
    #[allow(dead_code)]
    pub fn frontoperatorwiperswitch(&self) -> FrontOperatorWiperSwitch2566770174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FrontOperatorWiperSwitch2566770174::from((((frame_payload >> 4) & 0xF) as f64) as u64)
    }

    /// State of operation selected by operator switch for the front wiper not in front of the operator position.
    #[allow(dead_code)]
    pub fn frontnonoperatorwiperswitch(&self) -> FrontNonoperatorWiperSwitch2566770174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FrontNonoperatorWiperSwitch2566770174::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// Off-Highway Engine Control Selection
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ohecs {
    frame_payload: Vec<u8>,
}

impl Ohecs {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ohecs {
        Ohecs { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ohecs, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566769662 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ohecs::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngAltDroopAuxInputSelect signal from can frame
    #[allow(dead_code)]
    pub fn engaltdroopauxinputselect(&self) -> EngAltDroopAuxInputSelect2566769662 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAltDroopAuxInputSelect2566769662::from((((frame_payload >> 28) & 0xF) as f64) as u64)
    }

    /// Read EngAltDroopRemoteAccelSelect signal from can frame
    #[allow(dead_code)]
    pub fn engaltdroopremoteaccelselect(&self) -> EngAltDroopRemoteAccelSelect2566769662 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAltDroopRemoteAccelSelect2566769662::from((((frame_payload >> 24) & 0xF) as f64) as u64)
    }

    /// Read EngAltDroopAccel2Select signal from can frame
    #[allow(dead_code)]
    pub fn engaltdroopaccel2select(&self) -> EngAltDroopAccel2Select2566769662 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAltDroopAccel2Select2566769662::from((((frame_payload >> 20) & 0xF) as f64) as u64)
    }

    /// Read EngAltDroopAccel1Select signal from can frame
    #[allow(dead_code)]
    pub fn engaltdroopaccel1select(&self) -> EngAltDroopAccel1Select2566769662 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAltDroopAccel1Select2566769662::from((((frame_payload >> 16) & 0xF) as f64) as u64)
    }

    /// In some off-highway applications it may be desirable to have multiple engine ratings available for selection by the operator.
    #[allow(dead_code)]
    pub fn engaltratingselect(&self) -> EngAltRatingSelect2566769662 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAltRatingSelect2566769662::from((((frame_payload >> 8) & 0xFF) as f64) as u64)
    }

    /// Operator switch which selects between two low idle speeds, default and alternate.
    #[allow(dead_code)]
    pub fn engaltlowidleswitch(&self) -> EngAltLowIdleSwitch2566769662 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAltLowIdleSwitch2566769662::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This is the On/Off operation of the Multiple Unit Synchronization functionality.
    #[allow(dead_code)]
    pub fn engsynchronizationswitch(&self) -> EngSynchronizationSwitch2566769662 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngSynchronizationSwitch2566769662::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// This is the On/Off operation of the Auxiliary Governor feature switch.
    #[allow(dead_code)]
    pub fn engauxgovernorswitch(&self) -> EngAuxGovernorSwitch2566769662 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAuxGovernorSwitch2566769662::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Off-Highway Engine Control Selection States
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ohcss {
    frame_payload: Vec<u8>,
}

impl Ohcss {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ohcss {
        Ohcss { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ohcss, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566768638 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ohcss::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngAltDroopAuxInputSelectState signal from can frame
    #[allow(dead_code)]
    pub fn engaltdroopauxinputselectstate(&self) -> EngAltDroopAuxInputSelectState2566768638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAltDroopAuxInputSelectState2566768638::from((((frame_payload >> 28) & 0xF) as f64) as u64)
    }

    /// Read EngAltDrpRemoteAccelSelectState signal from can frame
    #[allow(dead_code)]
    pub fn engaltdrpremoteaccelselectstate(&self) -> EngAltDrpRemoteAccelSelectState2566768638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAltDrpRemoteAccelSelectState2566768638::from((((frame_payload >> 24) & 0xF) as f64) as u64)
    }

    /// Read EngAltDroopAccel2SelectState signal from can frame
    #[allow(dead_code)]
    pub fn engaltdroopaccel2selectstate(&self) -> EngAltDroopAccel2SelectState2566768638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAltDroopAccel2SelectState2566768638::from((((frame_payload >> 20) & 0xF) as f64) as u64)
    }

    /// Read EngAltDroopAccel1SelectState signal from can frame
    #[allow(dead_code)]
    pub fn engaltdroopaccel1selectstate(&self) -> EngAltDroopAccel1SelectState2566768638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAltDroopAccel1SelectState2566768638::from((((frame_payload >> 16) & 0xF) as f64) as u64)
    }

    /// In some off-highway applications it may be desirable to have multiple engine ratings available for selection by the operator.
    #[allow(dead_code)]
    pub fn engaltratingselectstate(&self) -> EngAltRatingSelectState2566768638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAltRatingSelectState2566768638::from((((frame_payload >> 8) & 0xFF) as f64) as u64)
    }

    /// In many applications, it is desirable that an alternate low idle speed setting be made available via switch input.
    #[allow(dead_code)]
    pub fn engaltlowidleselectstate(&self) -> EngAltLowIdleSelectState2566768638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAltLowIdleSelectState2566768638::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This feature is widely used in Industry to operate multiple engines from a single command source.
    #[allow(dead_code)]
    pub fn engmultiunitsyncstate(&self) -> EngMultiUnitSyncState2566768638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngMultiUnitSyncState2566768638::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// This is the Engine Auxiliary Governor feature.
    #[allow(dead_code)]
    pub fn engauxgovernorstate(&self) -> EngAuxGovernorState2566768638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAuxGovernorState2566768638::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Operators External Light Controls Message
#[allow(dead_code)]
#[derive(Debug)]
pub struct Oel {
    frame_payload: Vec<u8>,
}

impl Oel {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Oel {
        Oel { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Oel, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365443326 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Oel::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// A 16 bit parameter to be associated with Delayed Off position (1000 binary) of the Main Light Switch.
    #[allow(dead_code)]
    pub fn oprtrsdesireddelayedlampofftime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64
    }

    /// A 8 bit parameter to indicate the level of back lighting the operator has selected for displays.
    #[allow(dead_code)]
    pub fn operatorsdesiredbacklight(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 0.400000
    }

    /// A 2 bit parameter to indicate the selected position of the operator's high/low beam select switch.
    #[allow(dead_code)]
    pub fn highlowbeamswitch(&self) -> HighLowBeamSwitch2365443326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HighLowBeamSwitch2365443326::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// A 2 bit parameter to indicate the selected position of the operator's hazard light switch.
    #[allow(dead_code)]
    pub fn hazardlightswitch(&self) -> HazardLightSwitch2365443326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HazardLightSwitch2365443326::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// A 4 bit parameter to indicate the selected position of the operator's turn signal switch.
    #[allow(dead_code)]
    pub fn turnsignalswitch(&self) -> TurnSignalSwitch2365443326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TurnSignalSwitch2365443326::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// A 4 bit parameter to indicate the selected position of the operator's main light switch.
    #[allow(dead_code)]
    pub fn mainlightswitch(&self) -> MainLightSwitch2365443326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MainLightSwitch2365443326::from((((frame_payload >> 4) & 0xF) as f64) as u64)
    }

    /// A 4 bit parameter to indicate the selected position of the operator's work light switch.
    #[allow(dead_code)]
    pub fn worklightswitch(&self) -> WorkLightSwitch2365443326 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        WorkLightSwitch2365443326::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// Maximum Vehicle Speed Limit Status
#[allow(dead_code)]
#[derive(Debug)]
pub struct Mvs {
    frame_payload: Vec<u8>,
}

impl Mvs {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Mvs {
        Mvs { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Mvs, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566776318 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Mvs::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The vehicle speed limit in effect.
    #[allow(dead_code)]
    pub fn appliedvehiclespeedlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64
    }

    /// Read MaxVehicleSpeedLimit7 signal from can frame
    #[allow(dead_code)]
    pub fn maxvehiclespeedlimit7(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64
    }

    /// Read MaxVehicleSpeedLimit6 signal from can frame
    #[allow(dead_code)]
    pub fn maxvehiclespeedlimit6(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64
    }

    /// Read MaxVehicleSpeedLimit5 signal from can frame
    #[allow(dead_code)]
    pub fn maxvehiclespeedlimit5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64
    }

    /// Read MaxVehicleSpeedLimit4 signal from can frame
    #[allow(dead_code)]
    pub fn maxvehiclespeedlimit4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// Read MaxVehicleSpeedLimit3 signal from can frame
    #[allow(dead_code)]
    pub fn maxvehiclespeedlimit3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Read MaxVehicleSpeedLimit2 signal from can frame
    #[allow(dead_code)]
    pub fn maxvehiclespeedlimit2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// The lowest Maximum Vehicle Speed Limit.
    #[allow(dead_code)]
    pub fn maxvehiclespeedlimit1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Military Lighting Command
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ml {
    frame_payload: Vec<u8>,
}

impl Ml {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ml {
        Ml { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ml, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566802686 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ml::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Operators Selection of lamp intensity in black out mode.
    #[allow(dead_code)]
    pub fn oprtrsblckoutintensityselection(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 0.400000
    }

    /// Read BlackOutWorkLampSelect signal from can frame
    #[allow(dead_code)]
    pub fn blackoutworklampselect(&self) -> BlackOutWorkLampSelect2566802686 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BlackOutWorkLampSelect2566802686::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Read NightVisionIlluminatorSelect signal from can frame
    #[allow(dead_code)]
    pub fn nightvisionilluminatorselect(&self) -> NightVisionIlluminatorSelect2566802686 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        NightVisionIlluminatorSelect2566802686::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Read BlackOutBrake_StopLampSelect signal from can frame
    #[allow(dead_code)]
    pub fn blackoutbrake_stoplampselect(&self) -> BlackOutBrakeStopLampSelect2566802686 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BlackOutBrakeStopLampSelect2566802686::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Read ConvoyDrivingLampSelect signal from can frame
    #[allow(dead_code)]
    pub fn convoydrivinglampselect(&self) -> ConvoyDrivingLampSelect2566802686 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ConvoyDrivingLampSelect2566802686::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Read ConvoyLampSelect signal from can frame
    #[allow(dead_code)]
    pub fn convoylampselect(&self) -> ConvoyLampSelect2566802686 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ConvoyLampSelect2566802686::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Read FrontBlackOutMarkerLampSelect signal from can frame
    #[allow(dead_code)]
    pub fn frontblackoutmarkerlampselect(&self) -> FrontBlackOutMarkerLampSelect2566802686 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FrontBlackOutMarkerLampSelect2566802686::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Read RearBlackOutMarkerSelect signal from can frame
    #[allow(dead_code)]
    pub fn rearblackoutmarkerselect(&self) -> RearBlackOutMarkerSelect2566802686 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RearBlackOutMarkerSelect2566802686::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Marine Control Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Mci {
    frame_payload: Vec<u8>,
}

impl Mci {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Mci {
        Mci { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Mci, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566774014 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Mci::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The status of the Slow Vessel Mode.
    #[allow(dead_code)]
    pub fn slowvesselmodestatus(&self) -> SlowVesselModeStatus2566774014 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SlowVesselModeStatus2566774014::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// The status of the Trolling Mode.
    #[allow(dead_code)]
    pub fn trollingmodestatus(&self) -> TrollingModeStatus2566774014 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrollingModeStatus2566774014::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// The status of the Throttle Synchronization Mode.
    #[allow(dead_code)]
    pub fn engthrttlsynchrnztionmodestatus(&self) -> EngThrttlSynchrnztionModeStatus2566774014 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngThrttlSynchrnztionModeStatus2566774014::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// Main Bearing Temperature 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Mbt3 {
    frame_payload: Vec<u8>,
}

impl Mbt3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Mbt3 {
        Mbt3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Mbt3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566823166 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Mbt3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of the main bearing which supports the crankshaft of the engine.
    #[allow(dead_code)]
    pub fn engmainbearing11temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the main bearing which supports the crankshaft of the engine.
    #[allow(dead_code)]
    pub fn engmainbearing10temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the main bearing which supports the crankshaft of the engine.
    #[allow(dead_code)]
    pub fn engmainbearing9temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Main Bearing Temperature 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Mbt2 {
    frame_payload: Vec<u8>,
}

impl Mbt2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Mbt2 {
        Mbt2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Mbt2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566823422 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Mbt2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of the main bearing which supports the crankshaft of the engine.
    #[allow(dead_code)]
    pub fn engmainbearing8temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the main bearing which supports the crankshaft of the engine.
    #[allow(dead_code)]
    pub fn engmainbearing7temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the main bearing which supports the crankshaft of the engine.
    #[allow(dead_code)]
    pub fn engmainbearing6temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the main bearing which supports the crankshaft of the engine.
    #[allow(dead_code)]
    pub fn engmainbearing5temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Main Bearing Temperature 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Mbt1 {
    frame_payload: Vec<u8>,
}

impl Mbt1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Mbt1 {
        Mbt1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Mbt1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566823678 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Mbt1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of the main bearing which supports the crankshaft of the engine.
    #[allow(dead_code)]
    pub fn engmainbearing4temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the main bearing which supports the crankshaft of the engine.
    #[allow(dead_code)]
    pub fn engmainbearing3temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the main bearing which supports the crankshaft of the engine.
    #[allow(dead_code)]
    pub fn engmainbearing2temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the main bearing which supports the crankshaft of the engine.
    #[allow(dead_code)]
    pub fn engmainbearing1temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Laser Leveling System Vertical Position Display Data
#[allow(dead_code)]
#[derive(Debug)]
pub struct Lvdd {
    frame_payload: Vec<u8>,
}

impl Lvdd {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Lvdd {
        Lvdd { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Lvdd, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2432595710 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Lvdd::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Sets Display Deadbands mode.
    #[allow(dead_code)]
    pub fn displaydeadbands(&self) -> DisplayDeadbands2432595710 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DisplayDeadbands2432595710::from((((frame_payload >> 20) & 0xF) as f64) as u64)
    }

    /// Sets LED Pattern control mode on laser leveling systems.
    #[allow(dead_code)]
    pub fn ledpatternctrl(&self) -> LedPatternCtrl2432595710 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LedPatternCtrl2432595710::from((((frame_payload >> 16) & 0xF) as f64) as u64)
    }

    /// This parameter informs the system what the selected Display deadband will be.
    #[allow(dead_code)]
    pub fn leddisplaydeadbandctrl(&self) -> LedDisplayDeadbandCtrl2432595710 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LedDisplayDeadbandCtrl2432595710::from((((frame_payload >> 12) & 0xF) as f64) as u64)
    }

    /// This parameter informs the system what the selected Display mode will be.
    #[allow(dead_code)]
    pub fn leddisplaymodectrl(&self) -> LedDisplayModeCtrl2432595710 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LedDisplayModeCtrl2432595710::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// Informs display devices how to display the current vertical position.
    #[allow(dead_code)]
    pub fn leddisplaydata1(&self) -> LedDisplayData12432595710 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LedDisplayData12432595710::from(((frame_payload & 0xFF) as f64) as u64)
    }
}

/// Laser Leveling System Vertical Deviation
#[allow(dead_code)]
#[derive(Debug)]
pub struct Lvd {
    frame_payload: Vec<u8>,
}

impl Lvd {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Lvd {
        Lvd { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Lvd, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365486590 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Lvd::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Laser Strike location on the survey type laser receiver.
    #[allow(dead_code)]
    pub fn abslaserstrikeposition(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64 * 0.100000
    }

    /// Time from laser strike to CAN message transmission.
    #[allow(dead_code)]
    pub fn laserstrikedatalatency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64 * 51.200000
    }

    /// Identifies which type of Laser Receiver transmitted the message.
    #[allow(dead_code)]
    pub fn laserreceivertype(&self) -> LaserReceiverType2365486590 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LaserReceiverType2365486590::from((((frame_payload >> 16) & 0xFF) as f64) as u64)
    }

    /// The calculated distance from the laser strike position to the current land leveling system reference point.
    #[allow(dead_code)]
    pub fn laserstrikeverticaldeviation(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000 + -3200f64
    }
}

/// Laser Tracer Position
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ltp {
    frame_payload: Vec<u8>,
}

impl Ltp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ltp {
        Ltp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ltp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365485566 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ltp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Provides the status of the laser tracer to the operator.
    #[allow(dead_code)]
    pub fn lasertracerinformation(&self) -> LaserTracerInformation2365485566 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LaserTracerInformation2365485566::from((((frame_payload >> 48) & 0xFF) as f64) as u64)
    }

    /// Informs display devices how to display the current position of the laser tracer.
    #[allow(dead_code)]
    pub fn leddisplaydata2(&self) -> LedDisplayData22365485566 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LedDisplayData22365485566::from((((frame_payload >> 40) & 0xFF) as f64) as u64)
    }

    /// The calculated percent deviation between the target distance and the center of the laser tracer.
    #[allow(dead_code)]
    pub fn lasertracerhorizontaldeviation(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64
    }

    /// The elevation of the laser tracer sensor in a laser leveling system.
    #[allow(dead_code)]
    pub fn lasertracerverticaldistance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }

    /// The calculated distance for the laser target to the current laser tracer reference point.
    #[allow(dead_code)]
    pub fn lasertracertargetdeviation(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000 + -3200f64
    }
}

/// Trip Fuel Information (Liquid)
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ltfi {
    frame_payload: Vec<u8>,
}

impl Ltfi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ltfi {
        Ltfi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ltfi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633939454 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ltfi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read TripDriveFuelEconomy signal from can frame
    #[allow(dead_code)]
    pub fn tripdrivefueleconomy(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 160) & 0xFFFF) as f64 * 0.001953
    }

    /// Total fuel consumed while the engine is in the cruise hold state since the last trip reset.
    #[allow(dead_code)]
    pub fn tripcruisefuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 128) & 0xFFFFFFFF) as f64 * 0.500000
    }

    /// Read TripVehicleIdleFuelUsed signal from can frame
    #[allow(dead_code)]
    pub fn tripvehicleidlefuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 96) & 0xFFFFFFFF) as f64 * 0.500000
    }

    /// Read TripPTONonmovingFuelUsed signal from can frame
    #[allow(dead_code)]
    pub fn tripptononmovingfuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFFFFFF) as f64 * 0.500000
    }

    /// Read TripPTOMovingFuelUsed signal from can frame
    #[allow(dead_code)]
    pub fn tripptomovingfuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.500000
    }

    /// Read TripDriveFuelUsed signal from can frame
    #[allow(dead_code)]
    pub fn tripdrivefuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.500000
    }
}

/// Modify Leveling System Control Set Point
#[allow(dead_code)]
#[derive(Debug)]
pub struct Lsp {
    frame_payload: Vec<u8>,
}

impl Lsp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Lsp {
        Lsp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Lsp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365486334 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Lsp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// High resolution for the laser guided blade set point.
    #[allow(dead_code)]
    pub fn bldheightsetpointhighresolution(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFFFFFF) as f64 * 0.100000 + -209.7152f64
    }

    /// Used to control and coordinate the set point for the leveling system.
    #[allow(dead_code)]
    pub fn modifysetpoint(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000 + -2800f64
    }
}

/// Land Leveling System Operational Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Loi {
    frame_payload: Vec<u8>,
}

impl Loi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Loi {
        Loi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Loi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364542462 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Loi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter indicates the side-shift blade control mode operator control state the user has set for the land leveling system.
    #[allow(dead_code)]
    pub fn sdshftdsrdbldoffsetoperatorctrl(&self) -> SdshftDsrdBldOffsetOperatorCtrl2364542462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SdshftDsrdBldOffsetOperatorCtrl2364542462::from((((frame_payload >> 32) & 0xF) as f64) as u64)
    }

    /// This parameter indicates the side-shift blade control mode operator control state the user has set for the land leveling system.
    #[allow(dead_code)]
    pub fn sdshftbldctrlmdeoperatorcontrol(&self) -> SdshftBldCtrlMdeOperatorControl2364542462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SdshftBldCtrlMdeOperatorControl2364542462::from((((frame_payload >> 28) & 0xF) as f64) as u64)
    }

    /// This parameter indicates the right blade offset operator control state the user has set for the land leveling system.
    #[allow(dead_code)]
    pub fn rghtdsrdbladeoffsetoperatorctrl(&self) -> RghtDsrdBladeOffsetOperatorCtrl2364542462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RghtDsrdBladeOffsetOperatorCtrl2364542462::from((((frame_payload >> 24) & 0xF) as f64) as u64)
    }

    /// This parameter indicates the right blade control mode operator control state the user has set for the land leveling system.
    #[allow(dead_code)]
    pub fn rghtbldectrlmodeoperatorcontrol(&self) -> RghtBldeCtrlModeOperatorControl2364542462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RghtBldeCtrlModeOperatorControl2364542462::from((((frame_payload >> 16) & 0xF) as f64) as u64)
    }

    /// This parameter indicates the left blade offset operator control state the user has set for the land leveling system.
    #[allow(dead_code)]
    pub fn lftdsredbladeoffsetoperatorctrl(&self) -> LftDsredBladeOffsetOperatorCtrl2364542462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LftDsredBladeOffsetOperatorCtrl2364542462::from((((frame_payload >> 20) & 0xF) as f64) as u64)
    }

    /// This parameter indicates the left blade control mode operator control state the user has set for the land leveling system.
    #[allow(dead_code)]
    pub fn lftbladectrlmodeoperatorcontrol(&self) -> LftBladeCtrlModeOperatorControl2364542462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LftBladeCtrlModeOperatorControl2364542462::from((((frame_payload >> 12) & 0xF) as f64) as u64)
    }

    /// Read BladeAutoModeCmd signal from can frame
    #[allow(dead_code)]
    pub fn bladeautomodecmd(&self) -> BladeAutoModeCmd2364542462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BladeAutoModeCmd2364542462::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// This parameter indicates the grade offset switch state the user has set for the land leveling system.
    #[allow(dead_code)]
    pub fn desiredgradeoffsetswitch(&self) -> DesiredGradeOffsetSwitch2364542462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DesiredGradeOffsetSwitch2364542462::from((((frame_payload >> 4) & 0xF) as f64) as u64)
    }

    /// This parameter indicates the blade control mode switch state the user has set for the land leveling system.
    #[allow(dead_code)]
    pub fn bladectrlmodeswitch(&self) -> BladeCtrlModeSwitch2364542462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BladeCtrlModeSwitch2364542462::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// Laser Receiver Mast Position
#[allow(dead_code)]
#[derive(Debug)]
pub struct Lmp {
    frame_payload: Vec<u8>,
}

impl Lmp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Lmp {
        Lmp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Lmp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365486078 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Lmp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Used to monitor the position of the sensor attached to the land leveling mast.
    #[allow(dead_code)]
    pub fn mastpos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000 + -3200f64
    }
}

/// Fuel Information (Liquid)
#[allow(dead_code)]
#[derive(Debug)]
pub struct Lfi {
    frame_payload: Vec<u8>,
}

impl Lfi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Lfi {
        Lfi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Lfi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633937918 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Lfi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Average fuel rate, equal to trip fuel divided by trip time while the engine speed is above zero, since the last trip reset.
    #[allow(dead_code)]
    pub fn tripaveragefuelrate(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.050000
    }

    /// Total fuel used while the PTO or remote PTO is in the hold state and engine speed is above zero, over the life of the engine.
    #[allow(dead_code)]
    pub fn totalengptofuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.500000
    }
}

/// Fuel Economy (Liquid)
#[allow(dead_code)]
#[derive(Debug)]
pub struct Lfe {
    frame_payload: Vec<u8>,
}

impl Lfe {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Lfe {
        Lfe { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Lfe, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566845182 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Lfe::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Average of instantaneous fuel economy for that segment of vehicle operation of interest.
    #[allow(dead_code)]
    pub fn engaveragefueleconomy(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.001953
    }

    /// Current fuel economy at current vehicle velocity.
    #[allow(dead_code)]
    pub fn enginstantaneousfueleconomy(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.001953
    }

    /// Amount of fuel consumed by engine per unit of time.
    #[allow(dead_code)]
    pub fn engfuelrate(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000
    }

    /// Read EngThrottle2Pos signal from can frame
    #[allow(dead_code)]
    pub fn engthrottle2pos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 0.400000
    }

    /// The position of the valve used to regulate the supply of a fluid, usually air or fuel/air mixture, to an engine.
    #[allow(dead_code)]
    pub fn engthrottlepos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 0.400000
    }
}

/// Fuel Consumption (Liquid)
#[allow(dead_code)]
#[derive(Debug)]
pub struct Lfc {
    frame_payload: Vec<u8>,
}

impl Lfc {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Lfc {
        Lfc { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Lfc, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566842878 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Lfc::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Accumulated amount of fuel used during vehicle operation.
    #[allow(dead_code)]
    pub fn engtotalfuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.500000
    }

    /// Fuel consumed during all or part of a journey.
    #[allow(dead_code)]
    pub fn engtripfuel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.500000
    }
}

/// Front Wheel Drive Status
#[allow(dead_code)]
#[derive(Debug)]
pub struct Fwd {
    frame_payload: Vec<u8>,
}

impl Fwd {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Fwd {
        Fwd { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Fwd, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633883646 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Fwd::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Feedback on the front wheel drive actuator.
    #[allow(dead_code)]
    pub fn frontwheeldriveactuatorstatus(&self) -> FrontWheelDriveActuatorStatus2633883646 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FrontWheelDriveActuatorStatus2633883646::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// FMS-standard Interface Identity/Capabilities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Fms {
    frame_payload: Vec<u8>,
}

impl Fms {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Fms {
        Fms { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Fms, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633880062 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Fms::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Information that identifies which issue level of the FMS-standard document the software included in the FMS gateway supports.
    #[allow(dead_code)]
    pub fn fmsstandardswversionsupported(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFFFFFF) as f64
    }

    /// Read FMSstandardRqsSupported signal from can frame
    #[allow(dead_code)]
    pub fn fmsstandardrqssupported(&self) -> FmSstandardRqsSupported2633880062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FmSstandardRqsSupported2633880062::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Read FMSstandardDiagnosticsSupported signal from can frame
    #[allow(dead_code)]
    pub fn fmsstandarddiagnosticssupported(&self) -> FmSstandardDiagnosticsSupported2633880062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FmSstandardDiagnosticsSupported2633880062::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Forward Lane Image
#[allow(dead_code)]
#[derive(Debug)]
pub struct Fli2 {
    frame_payload: Vec<u8>,
}

impl Fli2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Fli2 {
        Fli2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Fli2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566806526 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Fli2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicates whether lane departure indication is active.
    #[allow(dead_code)]
    pub fn lndprtureindicationenablestatus(&self) -> LnDprtureIndicationEnableStatus2566806526 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LnDprtureIndicationEnableStatus2566806526::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Indicates whether the left side is tracking lane.
    #[allow(dead_code)]
    pub fn lanetrackingstatusleftside(&self) -> LaneTrackingStatusLeftSide2566806526 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LaneTrackingStatusLeftSide2566806526::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Indicates whether right side is tracking lane.
    #[allow(dead_code)]
    pub fn lanetrackingstatusrightside(&self) -> LaneTrackingStatusRightSide2566806526 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LaneTrackingStatusRightSide2566806526::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }
}

/// Forward Lane Image urgent msg
#[allow(dead_code)]
#[derive(Debug)]
pub struct Fli1 {
    frame_payload: Vec<u8>,
}

impl Fli1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Fli1 {
        Fli1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Fli1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2431649790 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Fli1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicates departure imminent on left side of lane.
    #[allow(dead_code)]
    pub fn lanedepartureimminentleftside(&self) -> LaneDepartureImminentLeftSide2431649790 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LaneDepartureImminentLeftSide2431649790::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Indicates departure imminent on right side of lane.
    #[allow(dead_code)]
    pub fn lanedepartureimminentrightside(&self) -> LaneDepartureImminentRightSide2431649790 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LaneDepartureImminentRightSide2431649790::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }
}

/// Fuel Leakage
#[allow(dead_code)]
#[derive(Debug)]
pub struct Fl {
    frame_payload: Vec<u8>,
}

impl Fl {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Fl {
        Fl { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Fl, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633929214 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Fl::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Status signal which indicates fuel leakage in the fuel rail of the engine.
    #[allow(dead_code)]
    pub fn engfuelleakage2(&self) -> EngFuelLeakage22633929214 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngFuelLeakage22633929214::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Status signal which indicates fuel leakage in the fuel rail of the engine.
    #[allow(dead_code)]
    pub fn engfuelleakage1(&self) -> EngFuelLeakage12633929214 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngFuelLeakage12633929214::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Fan Drive
#[allow(dead_code)]
#[derive(Debug)]
pub struct Fd {
    frame_payload: Vec<u8>,
}

impl Fd {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Fd {
        Fd { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Fd, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566831614 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Fd::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The speed of the fan associated with engine coolant system.
    #[allow(dead_code)]
    pub fn fanspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.125000
    }

    /// This parameter is used to indicate the current state or mode of operation by the fan drive.
    #[allow(dead_code)]
    pub fn fandrivestate(&self) -> FanDriveState2566831614 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FanDriveState2566831614::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// Estimated fan speed as a ratio of the fan drive (current speed) to the fully engaged fan drive (maximum fan speed).
    #[allow(dead_code)]
    pub fn estpercentfanspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }
}

/// Engine Torque History
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eth {
    frame_payload: Vec<u8>,
}

impl Eth {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eth {
        Eth { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eth, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566820094 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eth::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Limit applied to the engine output torque based on the maximum allowable axle input torque.
    #[allow(dead_code)]
    pub fn engtorquelimit6axleinput(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 248) & 0xFFFF) as f64 * 2.000000
    }

    /// Limit applied to the engine output torque based on activation of an ECU switch input.
    #[allow(dead_code)]
    pub fn engtorquelimit5switch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 232) & 0xFFFF) as f64
    }

    /// Read EngTorqueLimit4Trans signal from can frame
    #[allow(dead_code)]
    pub fn engtorquelimit4trans(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 216) & 0xFFFF) as f64
    }

    /// Read EngTorqueLimit3Trans signal from can frame
    #[allow(dead_code)]
    pub fn engtorquelimit3trans(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 200) & 0xFFFF) as f64
    }

    /// Read TransGearRatio3 signal from can frame
    #[allow(dead_code)]
    pub fn transgearratio3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 184) & 0xFFFF) as f64 * 0.010000
    }

    /// Read EngTorqueLimit2Trans signal from can frame
    #[allow(dead_code)]
    pub fn engtorquelimit2trans(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 168) & 0xFFFF) as f64
    }

    /// Read TransGearRatio2 signal from can frame
    #[allow(dead_code)]
    pub fn transgearratio2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 152) & 0xFFFF) as f64 * 0.010000
    }

    /// Read EngTorqueLimit1Trans signal from can frame
    #[allow(dead_code)]
    pub fn engtorquelimit1trans(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 136) & 0xFFFF) as f64
    }

    /// Read TransGearRatio1 signal from can frame
    #[allow(dead_code)]
    pub fn transgearratio1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 120) & 0xFFFF) as f64 * 0.010000
    }

    /// Torque limit rating described in the current record.
    #[allow(dead_code)]
    pub fn engtorquelimitfeature(&self) -> EngTorqueLimitFeature2566820094 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngTorqueLimitFeature2566820094::from((((frame_payload >> 114) & 0x7) as f64) as u64)
    }

    /// Status of an ECU feature which limits the torque output of the engine.
    #[allow(dead_code)]
    pub fn torquelimitingfeaturestatus(&self) -> TorqueLimitingFeatureStatus2566820094 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TorqueLimitingFeatureStatus2566820094::from((((frame_payload >> 112) & 0x3) as f64) as u64)
    }

    /// Duration in hours for which the engine operated in the conditions captured in the current record.
    #[allow(dead_code)]
    pub fn calibrecorddurationtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 80) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Calendar year timestamp when an ECU record was established.
    #[allow(dead_code)]
    pub fn calibrecordstartyear(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 72) & 0xFF) as f64 + 1985f64
    }

    /// Calendar day timestamp when an ECU record was established.
    #[allow(dead_code)]
    pub fn calibrecordstartday(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFF) as f64 * 0.250000
    }

    /// Calendar month timestamp when an ECU record was established.
    #[allow(dead_code)]
    pub fn calibrecordstartmonth(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64
    }

    /// Maximum torque output of the current ECU calibration when the engine operates on torque curve 2.
    #[allow(dead_code)]
    pub fn engpeaktorque2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64
    }

    /// Maximum torque output of the current ECU calibration when the engine operates on torque curve 1.
    #[allow(dead_code)]
    pub fn engpeaktorque1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64
    }

    /// Advertised engine power capability.
    #[allow(dead_code)]
    pub fn engpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.500000
    }

    /// Number of torque history records contained in the engine torque history PGN.
    #[allow(dead_code)]
    pub fn numberofengtorquehistoryrecords(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Electronic Transmission Controller #8
#[allow(dead_code)]
#[derive(Debug)]
pub struct Etc8 {
    frame_payload: Vec<u8>,
}

impl Etc8 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Etc8 {
        Etc8 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Etc8, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364542206 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Etc8::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Ratio of the transmissions torque converter output torque to torque converter input torque at current speed.
    #[allow(dead_code)]
    pub fn transtorqueconverterratio(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.001000
    }
}

/// Electronic Transmission Controller 7
#[allow(dead_code)]
#[derive(Debug)]
pub struct Etc7 {
    frame_payload: Vec<u8>,
}

impl Etc7 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Etc7 {
        Etc7 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Etc7, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566802174 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Etc7::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read TransRqedGearFeedback signal from can frame
    #[allow(dead_code)]
    pub fn transrqedgearfeedback(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 + -125f64
    }

    /// Read TransMode1Indicator signal from can frame
    #[allow(dead_code)]
    pub fn transmode1indicator(&self) -> TransMode1Indicator2566802174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransMode1Indicator2566802174::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Read TransMode2Indicator signal from can frame
    #[allow(dead_code)]
    pub fn transmode2indicator(&self) -> TransMode2Indicator2566802174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransMode2Indicator2566802174::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read TransMode3Indicator signal from can frame
    #[allow(dead_code)]
    pub fn transmode3indicator(&self) -> TransMode3Indicator2566802174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransMode3Indicator2566802174::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Read TransMode4Indicator signal from can frame
    #[allow(dead_code)]
    pub fn transmode4indicator(&self) -> TransMode4Indicator2566802174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransMode4Indicator2566802174::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// State signal indicating a transmission request for the Shift Inhibit Indicator to be active or inactive.
    #[allow(dead_code)]
    pub fn transshiftinhibitindicator(&self) -> TransShiftInhibitIndicator2566802174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransShiftInhibitIndicator2566802174::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// State signal from the transmission indicating if the transmission�s status is such that engine cranking is allowed (i.
    #[allow(dead_code)]
    pub fn transengcrankenable(&self) -> TransEngCrankEnable2566802174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransEngCrankEnable2566802174::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Read ActiveShiftConsoleIndicator signal from can frame
    #[allow(dead_code)]
    pub fn activeshiftconsoleindicator(&self) -> ActiveShiftConsoleIndicator2566802174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ActiveShiftConsoleIndicator2566802174::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Read TransReadyForBrakeRelease signal from can frame
    #[allow(dead_code)]
    pub fn transreadyforbrakerelease(&self) -> TransReadyForBrakeRelease2566802174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransReadyForBrakeRelease2566802174::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Read TransRqedRangeDisplayFlashState signal from can frame
    #[allow(dead_code)]
    pub fn transrqedrangedisplayflashstate(&self) -> TransRqedRangeDisplayFlashState2566802174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransRqedRangeDisplayFlashState2566802174::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Read TransRqedRangeDisplayBlankState signal from can frame
    #[allow(dead_code)]
    pub fn transrqedrangedisplayblankstate(&self) -> TransRqedRangeDisplayBlankState2566802174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransRqedRangeDisplayBlankState2566802174::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }
}

/// Electronic Transmission Controller 6
#[allow(dead_code)]
#[derive(Debug)]
pub struct Etc6 {
    frame_payload: Vec<u8>,
}

impl Etc6 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Etc6 {
        Etc6 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Etc6, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633935870 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Etc6::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Signal which indicates the actual clutch life remaining in percent.
    #[allow(dead_code)]
    pub fn clutchliferemaining(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.400000
    }

    /// The transmission calculates this gear continuously.
    #[allow(dead_code)]
    pub fn lowestpossiblegear(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -125f64
    }

    /// The transmission calculates this gear continuously.
    #[allow(dead_code)]
    pub fn highestpossiblegear(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -125f64
    }

    /// The transmission calculates this gear continuously.
    #[allow(dead_code)]
    pub fn recommendedgear(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -125f64
    }
}

/// Electronic Transmission Controller 5
#[allow(dead_code)]
#[derive(Debug)]
pub struct Etc5 {
    frame_payload: Vec<u8>,
}

impl Etc5 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Etc5 {
        Etc5 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Etc5, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633942014 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Etc5::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Identifies the status of the switch that indicates forward direction.
    #[allow(dead_code)]
    pub fn transforwarddirectionswitch(&self) -> TransForwardDirectionSwitch2633942014 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransForwardDirectionSwitch2633942014::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the switch that indicates neutral.
    #[allow(dead_code)]
    pub fn transneutralswitch(&self) -> TransNeutralSwitch2633942014 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransNeutralSwitch2633942014::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the switch that indicates reverse direction.
    #[allow(dead_code)]
    pub fn transreversedirectionswitch(&self) -> TransReverseDirectionSwitch2633942014 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransReverseDirectionSwitch2633942014::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the switch that represents low range.
    #[allow(dead_code)]
    pub fn translowrangesenseswitch(&self) -> TransLowRangeSenseSwitch2633942014 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransLowRangeSenseSwitch2633942014::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the switch that represents high range.
    #[allow(dead_code)]
    pub fn transhighrangesenseswitch(&self) -> TransHighRangeSenseSwitch2633942014 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransHighRangeSenseSwitch2633942014::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Electronic Transmission Controller 4
#[allow(dead_code)]
#[derive(Debug)]
pub struct Etc4 {
    frame_payload: Vec<u8>,
}

impl Etc4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Etc4 {
        Etc4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Etc4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633942526 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Etc4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The current modulated value for the air supply to the synchronizer brake.
    #[allow(dead_code)]
    pub fn transsynchronizerbrakevalue(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.400000
    }

    /// The current modulated value for the air supply to the synchronizer clutch.
    #[allow(dead_code)]
    pub fn transsynchronizerclutchvalue(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }
}

/// Electronic Transmission Controller 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Etc3 {
    frame_payload: Vec<u8>,
}

impl Etc3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Etc3 {
        Etc3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Etc3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633943038 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Etc3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Identifies the status of the actuator that controls the inertia brake.
    #[allow(dead_code)]
    pub fn transinertiabrakeactuator(&self) -> TransInertiaBrakeActuator2633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransInertiaBrakeActuator2633943038::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the actuator that controls the engine defuel mechanism.
    #[allow(dead_code)]
    pub fn transdefuelactuator(&self) -> TransDefuelActuator2633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransDefuelActuator2633943038::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the actuator that controls the lockup clutch.
    #[allow(dead_code)]
    pub fn translockupclutchactuator(&self) -> TransLockupClutchActuator2633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransLockupClutchActuator2633943038::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the actuator that controls the clutch.
    #[allow(dead_code)]
    pub fn transclutchactuator(&self) -> TransClutchActuator2633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransClutchActuator2633943038::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the splitter indirect actuator in the auxiliary unit.
    #[allow(dead_code)]
    pub fn transsplitterindirectactuator(&self) -> TransSplitterIndirectActuator2633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransSplitterIndirectActuator2633943038::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the splitter direct actuator in the auxiliary unit.
    #[allow(dead_code)]
    pub fn transsplitterdirectactuator(&self) -> TransSplitterDirectActuator2633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransSplitterDirectActuator2633943038::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the range low actuator in the auxiliary unit.
    #[allow(dead_code)]
    pub fn transrangelowactuator(&self) -> TransRangeLowActuator2633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransRangeLowActuator2633943038::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the range high actuator in the auxiliary unit.
    #[allow(dead_code)]
    pub fn transrangehighactuator(&self) -> TransRangeHighActuator2633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransRangeHighActuator2633943038::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the actuator that moves the shift finger identified as gear actuator #2.
    #[allow(dead_code)]
    pub fn transshiftfingergearactuator2(&self) -> TransShiftFingerGearActuator22633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransShiftFingerGearActuator22633943038::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the actuator that moves the shift finger identified as rail actuator #2.
    #[allow(dead_code)]
    pub fn transshiftfingerrailactuator2(&self) -> TransShiftFingerRailActuator22633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransShiftFingerRailActuator22633943038::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the actuator that moves the shift finger identified as gear actuator #1.
    #[allow(dead_code)]
    pub fn transshiftfingergearactuator1(&self) -> TransShiftFingerGearActuator12633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransShiftFingerGearActuator12633943038::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the actuator that moves the shift finger identified as rail actuator #1.
    #[allow(dead_code)]
    pub fn transshiftfingerrailactuator1(&self) -> TransShiftFingerRailActuator12633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransShiftFingerRailActuator12633943038::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the shift finger in the center rail position.
    #[allow(dead_code)]
    pub fn trnsshftfngrcenterrailindicator(&self) -> TrnsShftFngrCenterRailIndicator2633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrnsShftFngrCenterRailIndicator2633943038::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Identifies the status of the shift finger in the engagement position.
    #[allow(dead_code)]
    pub fn trnsshftfngrengagementindicator(&self) -> TrnsShftFngrEngagementIndicator2633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrnsShftFngrEngagementIndicator2633943038::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Indicates the status of the shift finger in the neutral position.
    #[allow(dead_code)]
    pub fn trnsshiftfingerneutralindicator(&self) -> TrnsShiftFingerNeutralIndicator2633943038 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrnsShiftFingerNeutralIndicator2633943038::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// The current position of the shift finger in the rail direction.
    #[allow(dead_code)]
    pub fn transshiftfingerrailpos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.400000
    }

    /// The current position of the shift finger in the gear direction.
    #[allow(dead_code)]
    pub fn transshiftfingergearpos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }
}

/// Electronic Transmission Controller 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Etc2 {
    frame_payload: Vec<u8>,
}

impl Etc2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Etc2 {
        Etc2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Etc2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565867006 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Etc2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Range currently being commanded by the transmission control system.
    #[allow(dead_code)]
    pub fn transcurrentrange(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Range selected by the operator.
    #[allow(dead_code)]
    pub fn transrqedrange(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Read TransCurrentGear signal from can frame
    #[allow(dead_code)]
    pub fn transcurrentgear(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 + -125f64
    }

    /// Actual ratio of input shaft speed to output shaft speed.
    #[allow(dead_code)]
    pub fn transactualgearratio(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.001000
    }

    /// Read TransSelectedGear signal from can frame
    #[allow(dead_code)]
    pub fn transselectedgear(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -125f64
    }
}

/// Electronic Transmission Controller 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Etc1 {
    frame_payload: Vec<u8>,
}

impl Etc1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Etc1 {
        Etc1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Etc1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364539646 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Etc1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The source address of the SAE J1939 device currently controlling the transmission.
    #[allow(dead_code)]
    pub fn srcaddrssofctrllngdvcfrtrnsctrl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64
    }

    /// Rotational velocity of the primary shaft transferring power into the transmission.
    #[allow(dead_code)]
    pub fn transinputshaftspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64 * 0.125000
    }

    /// Command signal used to indicate that progressive shifting by the engine should be disallowed.
    #[allow(dead_code)]
    pub fn progressiveshiftdisable(&self) -> ProgressiveShiftDisable2364539646 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ProgressiveShiftDisable2364539646::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Read EngMomentaryOverspeedEnable signal from can frame
    #[allow(dead_code)]
    pub fn engmomentaryoverspeedenable(&self) -> EngMomentaryOverspeedEnable2364539646 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngMomentaryOverspeedEnable2364539646::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Parameter which represents the ratio of input shaft speed to current engine speed (in percent).
    #[allow(dead_code)]
    pub fn percentclutchslip(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.400000
    }

    /// Calculated speed of the transmission output shaft.
    #[allow(dead_code)]
    pub fn transoutputshaftspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.125000
    }

    /// Indicates that the transmission is in process of shifting from the current gear to the selected gear.
    #[allow(dead_code)]
    pub fn transshiftinprocess(&self) -> TransShiftInProcess2364539646 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransShiftInProcess2364539646::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// State signal which indicates whether the torque converter lockup is engaged.
    #[allow(dead_code)]
    pub fn torqueconverterlockupengaged(&self) -> TorqueConverterLockupEngaged2364539646 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TorqueConverterLockupEngaged2364539646::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Read TransDrivelineEngaged signal from can frame
    #[allow(dead_code)]
    pub fn transdrivelineengaged(&self) -> TransDrivelineEngaged2364539646 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransDrivelineEngaged2364539646::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Engine Temperature 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Et3 {
    frame_payload: Vec<u8>,
}

impl Et3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Et3 {
        Et3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Et3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566810110 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Et3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of combustion air after it exits from the Charge Air Cooler but before any mixing of Recirculated Exhaust Gas.
    #[allow(dead_code)]
    pub fn engchargeaircooleroutlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of liquid found in engine cooling system.
    #[allow(dead_code)]
    pub fn engcoolanttemphires(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// The temperature of the oil in the hydraulic system that powers the intake valve actuation system.
    #[allow(dead_code)]
    pub fn engintkvlvactationsystemoiltemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of pre-combustion air found in intake manifold of engine air supply system.
    #[allow(dead_code)]
    pub fn engintakemanifold1airtemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Engine Temperature 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Et2 {
    frame_payload: Vec<u8>,
}

impl Et2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Et2 {
        Et2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Et2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566825214 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Et2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngExhaustGasRecirculationTemp signal from can frame
    #[allow(dead_code)]
    pub fn engexhaustgasrecirculationtemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Read EngExhstGsRcirculationDiffPress signal from can frame
    #[allow(dead_code)]
    pub fn engexhstgsrcirculationdiffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.007812 + -250f64
    }

    /// Temperature of the engine electronic control unit.
    #[allow(dead_code)]
    pub fn engecutemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the engine lubricant.
    #[allow(dead_code)]
    pub fn engoiltemp2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Engine Temperature 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Et1 {
    frame_payload: Vec<u8>,
}

impl Et1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Et1 {
        Et1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Et1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566844158 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Et1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The current position of the thermostat used to regulate the temperature of the engine intercooler.
    #[allow(dead_code)]
    pub fn engintercoolerthermostatopening(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 0.400000
    }

    /// Temperature of liquid found in the intercooler located after the turbocharger.
    #[allow(dead_code)]
    pub fn engintercoolertemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 + -40f64
    }

    /// Temperature of the turbocharger lubricant.
    #[allow(dead_code)]
    pub fn engturbooiltemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of the engine lubricant.
    #[allow(dead_code)]
    pub fn engoiltemp1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of fuel entering injectors.
    #[allow(dead_code)]
    pub fn engfueltemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -40f64
    }

    /// Temperature of liquid found in engine cooling system.
    #[allow(dead_code)]
    pub fn engcoolanttemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -40f64
    }
}

/// Exhaust Temperature
#[allow(dead_code)]
#[derive(Debug)]
pub struct Et {
    frame_payload: Vec<u8>,
}

impl Et {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Et {
        Et { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Et, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566785022 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Et::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of combustion byproducts within the left engine exhaust manifold.
    #[allow(dead_code)]
    pub fn engexhstexhstgstempleftmanifold(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of combustion byproducts within the right engine exhaust manifold.
    #[allow(dead_code)]
    pub fn engexhstexhstgstmprightmanifold(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Electronic Steering Control
#[allow(dead_code)]
#[derive(Debug)]
pub struct Esc1 {
    frame_payload: Vec<u8>,
}

impl Esc1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Esc1 {
        Esc1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Esc1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565868542 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Esc1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// A signal which indicates if lowering of lifted axle is allowed or inhibited.
    #[allow(dead_code)]
    pub fn sterableliftaxleloweringinhibit(&self) -> SterableLiftAxleLoweringInhibit2565868542 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SterableLiftAxleLoweringInhibit2565868542::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// To identify to which of several similar devices (such as tires or fuel tanks) the information applies.
    #[allow(dead_code)]
    pub fn axlelocation(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Type of Steering Transmission (Ref.
    #[allow(dead_code)]
    pub fn typeofsteertrans(&self) -> TypeOfSteerTrans2565868542 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TypeOfSteerTrans2565868542::from((((frame_payload >> 40) & 0xF) as f64) as u64)
    }

    /// Type of Steering Forces (Ref.
    #[allow(dead_code)]
    pub fn typeofsteerforces(&self) -> TypeOfSteerForces2565868542 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TypeOfSteerForces2565868542::from((((frame_payload >> 36) & 0xF) as f64) as u64)
    }

    /// Indicates the different types of steering systems (ref.
    #[allow(dead_code)]
    pub fn steertype(&self) -> SteerType2565868542 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SteerType2565868542::from((((frame_payload >> 32) & 0xF) as f64) as u64)
    }

    /// Read StatusOfSteerAxle signal from can frame
    #[allow(dead_code)]
    pub fn statusofsteeraxle(&self) -> StatusOfSteerAxle2565868542 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        StatusOfSteerAxle2565868542::from((((frame_payload >> 24) & 0xF) as f64) as u64)
    }

    /// Signal which indicates the actual inner wheel steering angle.
    #[allow(dead_code)]
    pub fn actualinnerwheelsteerangle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.003906 + -125f64
    }
}

/// Electronic Retarder Controller 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Erc2 {
    frame_payload: Vec<u8>,
}

impl Erc2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Erc2 {
        Erc2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Erc2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633941758 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Erc2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Identifies the status of the transmission output retarder.
    #[allow(dead_code)]
    pub fn transoutputretarder(&self) -> TransOutputRetarder2633941758 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransOutputRetarder2633941758::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Electronic Retarder Controller 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Erc1 {
    frame_payload: Vec<u8>,
}

impl Erc1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Erc1 {
        Erc1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Erc1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565865726 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Erc1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read RetarderSelectionNonEng signal from can frame
    #[allow(dead_code)]
    pub fn retarderselectionnoneng(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 0.400000
    }

    /// This is the maximum amount of torque that the retarder can immediately deliver.
    #[allow(dead_code)]
    pub fn actlmxavlblrtarderpercenttorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 + -125f64
    }

    /// Read DrvrsDmandRetarderPercentTorque signal from can frame
    #[allow(dead_code)]
    pub fn drvrsdmandretarderpercenttorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 + -125f64
    }

    /// The source address of the SAE J1939 device currently controlling the retarder.
    #[allow(dead_code)]
    pub fn srcaddrssofctrllngdvcfrrtrdrctrl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64
    }

    /// Read RetarderRqingBrakeLight signal from can frame
    #[allow(dead_code)]
    pub fn retarderrqingbrakelight(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 26) & 0x3) as f64
    }

    /// Status of an event, external to the engine, that may increase the nominal temperature of the engine coolant liquid.
    #[allow(dead_code)]
    pub fn engcoolantloadincrease(&self) -> EngCoolantLoadIncrease2565865726 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCoolantLoadIncrease2565865726::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Braking torque of retarder that the retarder is currently trying to achieve.
    #[allow(dead_code)]
    pub fn intendedretarderpercenttorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -125f64
    }

    /// Actual braking torque of the retarder as a percent of retarder configuration reference torque SPN 556.
    #[allow(dead_code)]
    pub fn actualretarderpercenttorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -125f64
    }

    /// Switch signal which indicates whether the operator wishes the retarder to be enabled for transmission shift assist.
    #[allow(dead_code)]
    pub fn retarderenableshiftassistswitch(&self) -> RetarderEnableShiftAssistSwitch2565865726 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RetarderEnableShiftAssistSwitch2565865726::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates whether the operator wishes the retarder to be enabled for vehicle braking assist.
    #[allow(dead_code)]
    pub fn retarderenablebrakeassistswitch(&self) -> RetarderEnableBrakeAssistSwitch2565865726 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RetarderEnableBrakeAssistSwitch2565865726::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// State signal which indicates which retarder torque mode is currently generating, limiting, or controlling the torque.
    #[allow(dead_code)]
    pub fn retardertorquemode(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xF) as f64
    }
}

/// Exhaust Port Temperature 5
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ept5 {
    frame_payload: Vec<u8>,
}

impl Ept5 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ept5 {
        Ept5 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ept5, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633932798 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ept5::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport20temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport19temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport18temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport17temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Exhaust Port Temperature 4
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ept4 {
    frame_payload: Vec<u8>,
}

impl Ept4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ept4 {
        Ept4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ept4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566824190 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ept4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport16temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport15temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport14temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport13temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Exhaust Port Temperature 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ept3 {
    frame_payload: Vec<u8>,
}

impl Ept3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ept3 {
        Ept3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ept3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633933310 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ept3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport12temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport11temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport10temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport9temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Exhaust Port Temperature 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ept2 {
    frame_payload: Vec<u8>,
}

impl Ept2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ept2 {
        Ept2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ept2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633933566 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ept2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport8temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport7temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport6temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport5temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Exhaust Port Temperature 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ept1 {
    frame_payload: Vec<u8>,
}

impl Ept1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ept1 {
        Ept1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ept1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633933822 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ept1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport4temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport3temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport2temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature at the cylinder exhaust port of the engine.
    #[allow(dead_code)]
    pub fn engexhaustgasport1temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Equipment Performance Data
#[allow(dead_code)]
#[derive(Debug)]
pub struct Epd {
    frame_payload: Vec<u8>,
}

impl Epd {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Epd {
        Epd { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Epd, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566776062 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Epd::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The current payload of the equipment, reported as a percentage of the equipment's rated payload limit.
    #[allow(dead_code)]
    pub fn payloadpercentage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// ECU Performance
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ep {
    frame_payload: Vec<u8>,
}

impl Ep {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ep {
        Ep { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ep, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566771454 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ep::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The used storage capacity of the data buffer memory internal to an ECU, such as a data logger.
    #[allow(dead_code)]
    pub fn datamemoryusage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 0.400000
    }

    /// The capacity consumed from the direct battery connection since the key was last turned off.
    #[allow(dead_code)]
    pub fn keepalivebatteryconsumption(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Equipment Operation and Control
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eoac {
    frame_payload: Vec<u8>,
}

impl Eoac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eoac {
        Eoac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eoac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566775806 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eoac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read TravelVelocityCtrlPos signal from can frame
    #[allow(dead_code)]
    pub fn travelvelocityctrlpos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -125f64
    }
}

/// Exhaust Oxygen 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eo1 {
    frame_payload: Vec<u8>,
}

impl Eo1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eo1 {
        Eo1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eo1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633935358 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eo1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicates whether the engine is using the Exhaust Gas Oxygen sensor to control the air/fuel ratio.
    #[allow(dead_code)]
    pub fn engexhstgsoxygnsnsrclsdlpoprton(&self) -> EngExhstGsOxygnSnsrClsdLpOprton2633935358 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngExhstGsOxygnSnsrClsdLpOprton2633935358::from((((frame_payload >> 62) & 0x3) as f64) as u64)
    }

    /// Read EngExhstGsOxygnSnsrFlngCrrction signal from can frame
    #[allow(dead_code)]
    pub fn engexhstgsoxygnsnsrflngcrrction(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 + -125f64
    }

    /// Read EngActualExhaustOxygen signal from can frame
    #[allow(dead_code)]
    pub fn engactualexhaustoxygen(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.002500
    }

    /// Read EngDesiredExhaustOxygen signal from can frame
    #[allow(dead_code)]
    pub fn engdesiredexhaustoxygen(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.002500
    }

    /// Read EngDesiredRatedExhaustOxygen signal from can frame
    #[allow(dead_code)]
    pub fn engdesiredratedexhaustoxygen(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.002500
    }
}

/// Extended Joystick Message 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ejm3 {
    frame_payload: Vec<u8>,
}

impl Ejm3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ejm3 {
        Ejm3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ejm3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365447166 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ejm3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Reports when the current joystick grip position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck3gripxaxisdetentposstatus(&self) -> Jystck3GripXAxisDetentPosStatus2365447166 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3GripXAxisDetentPosStatus2365447166::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick grip position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck3gripyaxisdetentposstatus(&self) -> Jystck3GripYAxisDetentPosStatus2365447166 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3GripYAxisDetentPosStatus2365447166::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck3thetaaxisdetentposstatus(&self) -> Jystck3ThetaAxisDetentPosStatus2365447166 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3ThetaAxisDetentPosStatus2365447166::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// The position of the joystick in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick3thetaaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 38) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck3ThtAxsClckwsPstvPsStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck3thtaxsclckwspstvpsstatus(&self) -> Jystck3ThtAxsClckwsPstvPsStatus2365447166 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3ThtAxsClckwsPstvPsStatus2365447166::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Read Jystck3ThtAxsCntrClckwsNgtvPsStt signal from can frame
    #[allow(dead_code)]
    pub fn jystck3thtaxscntrclckwsngtvpsstt(&self) -> Jystck3ThtAxsCntrClckwsNgtvPsStt2365447166 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3ThtAxsCntrClckwsNgtvPsStt2365447166::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck3thtaaxisneutralposstatus(&self) -> Jystck3ThtaAxisNeutralPosStatus2365447166 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3ThtaAxisNeutralPosStatus2365447166::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// The position of the joystick grip in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick3gripyaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 22) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck3GrpYAxsLvrFrwrdPstvPsStts signal from can frame
    #[allow(dead_code)]
    pub fn jystck3grpyaxslvrfrwrdpstvpsstts(&self) -> Jystck3GrpYAxsLvrFrwrdPstvPsStts2365447166 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3GrpYAxsLvrFrwrdPstvPsStts2365447166::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read Jystck3GrpYAxsLvrBckNgtvPsSttus signal from can frame
    #[allow(dead_code)]
    pub fn jystck3grpyaxslvrbckngtvpssttus(&self) -> Jystck3GrpYAxsLvrBckNgtvPsSttus2365447166 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3GrpYAxsLvrBckNgtvPsSttus2365447166::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick grip position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck3grpyaxisneutralposstatus(&self) -> Jystck3GrpYAxisNeutralPosStatus2365447166 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3GrpYAxisNeutralPosStatus2365447166::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// The position of the joystick grip in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick3gripxaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 6) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck3GrpXAxsLvrRghtPstvPsStts signal from can frame
    #[allow(dead_code)]
    pub fn jystck3grpxaxslvrrghtpstvpsstts(&self) -> Jystck3GrpXAxsLvrRghtPstvPsStts2365447166 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3GrpXAxsLvrRghtPstvPsStts2365447166::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Read Jystck3GrpXAxsLvrLftNgtvPsSttus signal from can frame
    #[allow(dead_code)]
    pub fn jystck3grpxaxslvrlftngtvpssttus(&self) -> Jystck3GrpXAxsLvrLftNgtvPsSttus2365447166 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3GrpXAxsLvrLftNgtvPsSttus2365447166::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick grip position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck3grpxaxisneutralposstatus(&self) -> Jystck3GrpXAxisNeutralPosStatus2365447166 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3GrpXAxisNeutralPosStatus2365447166::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Extended Joystick Message 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ejm2 {
    frame_payload: Vec<u8>,
}

impl Ejm2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ejm2 {
        Ejm2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ejm2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365446654 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ejm2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Reports when the current joystick grip position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck2gripxaxisdetentposstatus(&self) -> Jystck2GripXAxisDetentPosStatus2365446654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2GripXAxisDetentPosStatus2365446654::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick grip position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck2gripyaxisdetentposstatus(&self) -> Jystck2GripYAxisDetentPosStatus2365446654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2GripYAxisDetentPosStatus2365446654::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck2thetaaxisdetentposstatus(&self) -> Jystck2ThetaAxisDetentPosStatus2365446654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2ThetaAxisDetentPosStatus2365446654::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// The position of the joystick in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick2thetaaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 38) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck2ThtAxsClckwsPstvPsStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck2thtaxsclckwspstvpsstatus(&self) -> Jystck2ThtAxsClckwsPstvPsStatus2365446654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2ThtAxsClckwsPstvPsStatus2365446654::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Read Jystck2ThtAxsCntrClckwsNgtvPsStt signal from can frame
    #[allow(dead_code)]
    pub fn jystck2thtaxscntrclckwsngtvpsstt(&self) -> Jystck2ThtAxsCntrClckwsNgtvPsStt2365446654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2ThtAxsCntrClckwsNgtvPsStt2365446654::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck2thtaaxisneutralposstatus(&self) -> Jystck2ThtaAxisNeutralPosStatus2365446654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2ThtaAxisNeutralPosStatus2365446654::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// The position of the joystick grip in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick2gripyaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 22) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck2GrpYAxsLvrFrwrdPstvPsStts signal from can frame
    #[allow(dead_code)]
    pub fn jystck2grpyaxslvrfrwrdpstvpsstts(&self) -> Jystck2GrpYAxsLvrFrwrdPstvPsStts2365446654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2GrpYAxsLvrFrwrdPstvPsStts2365446654::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read Jystck2GrpYAxsLvrBckNgtvPsSttus signal from can frame
    #[allow(dead_code)]
    pub fn jystck2grpyaxslvrbckngtvpssttus(&self) -> Jystck2GrpYAxsLvrBckNgtvPsSttus2365446654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2GrpYAxsLvrBckNgtvPsSttus2365446654::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick grip position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck2grpyaxisneutralposstatus(&self) -> Jystck2GrpYAxisNeutralPosStatus2365446654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2GrpYAxisNeutralPosStatus2365446654::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// The position of the joystick grip in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick2gripxaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 6) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck2GrpXAxsLvrRghtPstvPsStts signal from can frame
    #[allow(dead_code)]
    pub fn jystck2grpxaxslvrrghtpstvpsstts(&self) -> Jystck2GrpXAxsLvrRghtPstvPsStts2365446654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2GrpXAxsLvrRghtPstvPsStts2365446654::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Read Jystck2GrpXAxsLvrLftNgtvPsSttus signal from can frame
    #[allow(dead_code)]
    pub fn jystck2grpxaxslvrlftngtvpssttus(&self) -> Jystck2GrpXAxsLvrLftNgtvPsSttus2365446654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2GrpXAxsLvrLftNgtvPsSttus2365446654::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick grip position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck2grpxaxisneutralposstatus(&self) -> Jystck2GrpXAxisNeutralPosStatus2365446654 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2GrpXAxisNeutralPosStatus2365446654::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Extended Joystick Message 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ejm1 {
    frame_payload: Vec<u8>,
}

impl Ejm1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ejm1 {
        Ejm1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ejm1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365446142 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ejm1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Reports when the current joystick grip position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck1gripxaxisdetentposstatus(&self) -> Jystck1GripXAxisDetentPosStatus2365446142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1GripXAxisDetentPosStatus2365446142::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick grip position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck1gripyaxisdetentposstatus(&self) -> Jystck1GripYAxisDetentPosStatus2365446142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1GripYAxisDetentPosStatus2365446142::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck1thetaaxisdetentposstatus(&self) -> Jystck1ThetaAxisDetentPosStatus2365446142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1ThetaAxisDetentPosStatus2365446142::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// The position of the joystick in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick1thetaaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 38) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck1ThtAxsClckwsPstvPsStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck1thtaxsclckwspstvpsstatus(&self) -> Jystck1ThtAxsClckwsPstvPsStatus2365446142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1ThtAxsClckwsPstvPsStatus2365446142::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Read Jystck1ThtAxsCntrClckwsNgtvPsStt signal from can frame
    #[allow(dead_code)]
    pub fn jystck1thtaxscntrclckwsngtvpsstt(&self) -> Jystck1ThtAxsCntrClckwsNgtvPsStt2365446142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1ThtAxsCntrClckwsNgtvPsStt2365446142::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck1thtaaxisneutralposstatus(&self) -> Jystck1ThtaAxisNeutralPosStatus2365446142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1ThtaAxisNeutralPosStatus2365446142::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// The position of the joystick grip in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick1gripyaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 22) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck1GrpYAxsLvrFrwrdPstvPsStts signal from can frame
    #[allow(dead_code)]
    pub fn jystck1grpyaxslvrfrwrdpstvpsstts(&self) -> Jystck1GrpYAxsLvrFrwrdPstvPsStts2365446142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1GrpYAxsLvrFrwrdPstvPsStts2365446142::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read Jystck1GrpYAxsLvrBckNgtvPsSttus signal from can frame
    #[allow(dead_code)]
    pub fn jystck1grpyaxslvrbckngtvpssttus(&self) -> Jystck1GrpYAxsLvrBckNgtvPsSttus2365446142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1GrpYAxsLvrBckNgtvPsSttus2365446142::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick grip position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck1grpyaxisneutralposstatus(&self) -> Jystck1GrpYAxisNeutralPosStatus2365446142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1GrpYAxisNeutralPosStatus2365446142::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// The position of the joystick grip in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick1gripxaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 6) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck1GrpXAxsLvrRghtPstvPsStts signal from can frame
    #[allow(dead_code)]
    pub fn jystck1grpxaxslvrrghtpstvpsstts(&self) -> Jystck1GrpXAxsLvrRghtPstvPsStts2365446142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1GrpXAxsLvrRghtPstvPsStts2365446142::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Read Jystck1GrpXAxsLvrLftNgtvPsSttus signal from can frame
    #[allow(dead_code)]
    pub fn jystck1grpxaxslvrlftngtvpssttus(&self) -> Jystck1GrpXAxsLvrLftNgtvPsSttus2365446142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1GrpXAxsLvrLftNgtvPsSttus2365446142::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick grip position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn jystck1grpxaxisneutralposstatus(&self) -> Jystck1GrpXAxisNeutralPosStatus2365446142 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1GrpXAxisNeutralPosStatus2365446142::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Engine Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ei {
    frame_payload: Vec<u8>,
}

impl Ei {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ei {
        Ei { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ei, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633929470 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ei::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Measured position of the engine fuel rack.
    #[allow(dead_code)]
    pub fn engfuelrackpos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.400000
    }

    /// Estimate of the power developed by the engine.
    #[allow(dead_code)]
    pub fn instantaneousestbrakepower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.500000
    }

    /// Mass flow of natural gas to the engine.
    #[allow(dead_code)]
    pub fn engmassflow(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.050000
    }

    /// Gage pressure of the exhaust gasses as measured at the turbine inlet of the turbocharger.
    #[allow(dead_code)]
    pub fn engexhaustgaspress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.007812 + -250f64
    }

    /// Gage pressure of the engine oil before the oil reaches the oil filter.
    #[allow(dead_code)]
    pub fn engprefilteroilpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 4.000000
    }
}

/// ECU History
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eh {
    frame_payload: Vec<u8>,
}

impl Eh {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eh {
        Eh { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eh, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633937406 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eh::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total time accumulated over the life of the ECU, from ignition switch ON to ignition switch OFF.
    #[allow(dead_code)]
    pub fn totalecuruntime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.050000
    }

    /// Total distance accumulated over the life of the ECU.
    #[allow(dead_code)]
    pub fn totalecudistance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.125000
    }
}

/// Engine Gas Flow Rate
#[allow(dead_code)]
#[derive(Debug)]
pub struct Egf1 {
    frame_payload: Vec<u8>,
}

impl Egf1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Egf1 {
        Egf1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Egf1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364541694 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Egf1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Mass flow rate of fresh air entering the engine air intake, before any EGR mixer, if used.
    #[allow(dead_code)]
    pub fn enginletairmassflowrate(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.050000
    }

    /// Flow rate of gas through the EGR system.
    #[allow(dead_code)]
    pub fn engexhstgsrcrcltionmassflowrate(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000
    }
}

/// Engine Fuel/lube systems
#[allow(dead_code)]
#[derive(Debug)]
pub struct Efs {
    frame_payload: Vec<u8>,
}

impl Efs {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Efs {
        Efs { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Efs, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566810366 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Efs::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Differential pressure measured across the fuel filter located between the fuel tank and the supply pump.
    #[allow(dead_code)]
    pub fn engfuelfiltersucsidediffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 2.000000
    }

    /// Absolute pressure of fuel at the fuel supply pump inlet.
    #[allow(dead_code)]
    pub fn engfuelsupplypumpinletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 2.000000
    }

    /// Ratio of current volume of engine oil in a remote reservoir to the maximum required volume.
    #[allow(dead_code)]
    pub fn engoillevelremotereservoir(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }

    /// Level of crankcase blowby emulsion collected by a container.
    #[allow(dead_code)]
    pub fn engwasteoilreservoirlevel(&self) -> EngWasteOilReservoirLevel2566810366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngWasteOilReservoirLevel2566810366::from((((frame_payload >> 24) & 0xFF) as f64 * 0.400000) as u64)
    }

    /// Engine ventilation control states.
    #[allow(dead_code)]
    pub fn engventilationstatus(&self) -> EngVentilationStatus2566810366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngVentilationStatus2566810366::from((((frame_payload >> 48) & 0x7) as f64) as u64)
    }

    /// Determination of whether or not the engine is (or has recently been) sufficiently lubricated for starting purposes.
    #[allow(dead_code)]
    pub fn engoilprimingstate(&self) -> EngOilPrimingState2566810366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngOilPrimingState2566810366::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Switch input for activating the engine oil priming pump.
    #[allow(dead_code)]
    pub fn engoilprimingpumpswitch(&self) -> EngOilPrimingPumpSwitch2566810366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngOilPrimingPumpSwitch2566810366::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Indicates whether the engine oil pre-heated sufficiently for starting purposes.
    #[allow(dead_code)]
    pub fn engoilpreheatedstate(&self) -> EngOilPreHeatedState2566810366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngOilPreHeatedState2566810366::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Oil pressure (gauge) measured just downstream of oil filter.
    #[allow(dead_code)]
    pub fn engoilfilteroutletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 4.000000
    }

    /// Indicates whether the engine coolant is pre-heated sufficiently for starting purposes.
    #[allow(dead_code)]
    pub fn engcoolantpreheatedstate(&self) -> EngCoolantPreheatedState2566810366 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngCoolantPreheatedState2566810366::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }
}

/// Engine Fluid Level/Pressure 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct EflP3 {
    frame_payload: Vec<u8>,
}

impl EflP3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> EflP3 {
        EflP3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = EflP3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566767102 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| EflP3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// EGR inlet gage pressure is measured after the EGR cooler and before the EGR valve.
    #[allow(dead_code)]
    pub fn engexhstgsrcrculationinletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 2.000000
    }

    /// Read EngIntkVlvActtionSystemOilPress signal from can frame
    #[allow(dead_code)]
    pub fn engintkvlvacttionsystemoilpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.003906
    }
}

/// Engine Fluid Level/Pressure 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct EflP2 {
    frame_payload: Vec<u8>,
}

impl EflP2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> EflP2 {
        EflP2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = EflP2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566839294 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| EflP2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The gage pressure of fuel in the metering rail #2 as delivered from the supply pump to the injector metering inlet.
    #[allow(dead_code)]
    pub fn enginjectormeteringrail2press(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.003906
    }

    /// The gage pressure of fuel in the timing rail delivered from the supply pump to the injector timing inlet.
    #[allow(dead_code)]
    pub fn enginjectortimingrail1press(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.003906
    }

    /// The gage pressure of fuel in the primary, or first, metering rail as delivered from the supply pump to the injector metering inlet.
    #[allow(dead_code)]
    pub fn enginjectormeteringrail1press(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.003906
    }

    /// The gage pressure of the engine oil in the hydraulic accumulator that powers an intensifier used for fuel injection.
    #[allow(dead_code)]
    pub fn enginjectionctrlpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.003906
    }
}

/// Engine Fluid Level/Pressure 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct EflP1 {
    frame_payload: Vec<u8>,
}

impl EflP1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> EflP1 {
        EflP1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = EflP1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566844414 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| EflP1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Ratio of volume of liquid found in engine cooling system to total cooling system volume.
    #[allow(dead_code)]
    pub fn engcoolantlevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 0.400000
    }

    /// Gage pressure of liquid found in engine cooling system.
    #[allow(dead_code)]
    pub fn engcoolantpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 2.000000
    }

    /// Gage pressure inside engine crankcase.
    #[allow(dead_code)]
    pub fn engcrankcasepress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.007812 + -250f64
    }

    /// Gage pressure of oil in engine lubrication system as provided by oil pump.
    #[allow(dead_code)]
    pub fn engoilpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 4.000000
    }

    /// Ratio of current volume of engine sump oil to maximum required volume.
    #[allow(dead_code)]
    pub fn engoillevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 0.400000
    }

    /// Differential crankcase blow-by pressure as measured through a tube with a venturi.
    #[allow(dead_code)]
    pub fn engexcrankcaseblowbypress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.050000
    }

    /// Gage pressure of fuel in system as delivered from supply pump to the injection pump.
    #[allow(dead_code)]
    pub fn engfueldeliverypress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 4.000000
    }
}

/// Engine Electrical System/Module Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ees {
    frame_payload: Vec<u8>,
}

impl Ees {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ees {
        Ees { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ees, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633929726 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ees::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Status signal which indicates that the turning gear is engaged.
    #[allow(dead_code)]
    pub fn turninggearengaged(&self) -> TurningGearEngaged2633929726 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TurningGearEngaged2633929726::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Status signal which indicates that the safety wire has been activated.
    #[allow(dead_code)]
    pub fn safetywirestatus(&self) -> SafetyWireStatus2633929726 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SafetyWireStatus2633929726::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Electrical power delivered by the engine to the electrical system connected to the generator.
    #[allow(dead_code)]
    pub fn electricalload(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.500000
    }
}

/// Electronic Engine Controller 5
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eec5 {
    frame_payload: Vec<u8>,
}

impl Eec5 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eec5 {
        Eec5 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eec5, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566772222 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eec5::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Sensor that measures the position of the variable geometry turbocharger actuator.
    #[allow(dead_code)]
    pub fn engvrblgometryturbo1actuatorpos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 0.400000
    }

    /// Isolates vehicle brake air from the Variable Geometry Turbocharger (VGT) system when engine is not running.
    #[allow(dead_code)]
    pub fn engvrblgmtrytrbarctrlshtffvalve(&self) -> EngVrblGmtryTrbArCtrlShtffValve2566772222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngVrblGmtryTrbArCtrlShtffValve2566772222::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Desired percentage of maximum Exhaust Gas Recirculation (EGR) valve opening.
    #[allow(dead_code)]
    pub fn engexhstgsrcirculationvalvectrl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.002500
    }

    /// Calculated value of turbocharger compressor outlet air temperature.
    #[allow(dead_code)]
    pub fn engtrb1clcltedturbineoutlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Read EngTrb1ClclatedTurbineInletTemp signal from can frame
    #[allow(dead_code)]
    pub fn engtrb1clclatedturbineinlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Electronic Engine Controller 4
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eec4 {
    frame_payload: Vec<u8>,
}

impl Eec4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eec4 {
        Eec4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eec4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633940734 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eec4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Direction of engine rotation, as reported by the engine.
    #[allow(dead_code)]
    pub fn engrotationdirection(&self) -> EngRotationDirection2633940734 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngRotationDirection2633940734::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Reports the number of cranking cycles undergone during the present start attempt.
    #[allow(dead_code)]
    pub fn crnkattmptcntonprsntstrtattempt(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64
    }

    /// The maximum governed rotational velocity of the engine crankshaft under full load conditions.
    #[allow(dead_code)]
    pub fn engratedspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.125000
    }

    /// Net brake power that the engine will deliver continuously, specified for a given application at a rated speed.
    #[allow(dead_code)]
    pub fn engratedpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.500000
    }
}

/// Electronic Engine Controller 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eec3 {
    frame_payload: Vec<u8>,
}

impl Eec3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eec3 {
        Eec3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eec3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566840318 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eec3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Measured/calculated exhaust gas mass upstream of the after-treatment system.
    #[allow(dead_code)]
    pub fn exhaustgasmass(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64 * 2.000000
    }

    /// Read AftrTrtmntIntakeDewPointMessage signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmntintakedewpointmessage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0x3) as f64
    }

    /// Read AftrTrtmntExhustDewPointMessage signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmntexhustdewpointmessage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 58) & 0x3) as f64
    }

    /// Read EstEngPrsticLossesPercentTorque signal from can frame
    #[allow(dead_code)]
    pub fn estengprsticlossespercenttorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 + -125f64
    }

    /// Read EngsDsrdOprtngSpdAsymmtryAdjstmn signal from can frame
    #[allow(dead_code)]
    pub fn engsdsrdoprtngspdasymmtryadjstmn(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// An indication by the engine of the optimal operating speed of the engine for the current existing conditions.
    #[allow(dead_code)]
    pub fn engsdesiredoperatingspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.125000
    }

    /// Read NominalFrictionPercentTorque signal from can frame
    #[allow(dead_code)]
    pub fn nominalfrictionpercenttorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -125f64
    }
}

/// Electronic Engine Controller 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eec2 {
    frame_payload: Vec<u8>,
}

impl Eec2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eec2 {
        Eec2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eec2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364539902 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eec2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This is the maximum amount of torque that the engine can immediately deliver as a percentage of the reference engine torque.
    #[allow(dead_code)]
    pub fn actmaxavailengpercenttorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 0.400000
    }

    /// Read AccelPedalPos2 signal from can frame
    #[allow(dead_code)]
    pub fn accelpedalpos2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 0.400000
    }

    /// Status (active or not active) of the system used to limit maximum forward vehicle acceleration.
    #[allow(dead_code)]
    pub fn vhclaccelerationratelimitstatus(&self) -> VhclAccelerationRateLimitStatus2364539902 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VhclAccelerationRateLimitStatus2364539902::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Read EngPercentLoadAtCurrentSpeed signal from can frame
    #[allow(dead_code)]
    pub fn engpercentloadatcurrentspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Switch signal which indicates the state of the accelerator pedal 2 low idle switch.
    #[allow(dead_code)]
    pub fn accelpedal2lowidleswitch(&self) -> AccelPedal2LowIdleSwitch2364539902 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AccelPedal2LowIdleSwitch2364539902::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Status (active or not active) of the system used to limit maximum vehicle velocity.
    #[allow(dead_code)]
    pub fn roadspeedlimitstatus(&self) -> RoadSpeedLimitStatus2364539902 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RoadSpeedLimitStatus2364539902::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates whether the accelerator pedal kickdown switch is opened or closed.
    #[allow(dead_code)]
    pub fn accelpedalkickdownswitch(&self) -> AccelPedalKickdownSwitch2364539902 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AccelPedalKickdownSwitch2364539902::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates the state of the accelerator pedal 1 low idle switch.
    #[allow(dead_code)]
    pub fn accelpedal1lowidleswitch(&self) -> AccelPedal1LowIdleSwitch2364539902 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AccelPedal1LowIdleSwitch2364539902::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// Read RemoteAccelPedalPos signal from can frame
    #[allow(dead_code)]
    pub fn remoteaccelpedalpos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.400000
    }

    /// Read AccelPedalPos1 signal from can frame
    #[allow(dead_code)]
    pub fn accelpedalpos1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.400000
    }
}

/// Electronic Engine Controller 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eec1 {
    frame_payload: Vec<u8>,
}

impl Eec1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eec1 {
        Eec1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eec1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364540158 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eec1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngDemandPercentTorque signal from can frame
    #[allow(dead_code)]
    pub fn engdemandpercenttorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 + -125f64
    }

    /// There are several phases in a starting action and different reasons why a start cannot take place.
    #[allow(dead_code)]
    pub fn engstartermode(&self) -> EngStarterMode2364540158 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngStarterMode2364540158::from((((frame_payload >> 48) & 0xF) as f64) as u64)
    }

    /// The source address of the SAE J1939 device currently controlling the engine.
    #[allow(dead_code)]
    pub fn srcaddrssofctrllngdvcforengctrl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64
    }

    /// Actual engine speed which is calculated over a minimum crankshaft angle of 720 degrees divided by the number of cylinders.
    #[allow(dead_code)]
    pub fn engspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64 * 0.125000
    }

    /// The calculated output torque of the engine.
    #[allow(dead_code)]
    pub fn actualengpercenttorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -125f64
    }

    /// The requested torque output of the engine by the driver.
    #[allow(dead_code)]
    pub fn driversdemandengpercenttorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -125f64
    }

    /// State signal which indicates which engine torque mode is currently generating, limiting, or controlling the torque.
    #[allow(dead_code)]
    pub fn engtorquemode(&self) -> EngTorqueMode2364540158 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngTorqueMode2364540158::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// ECU Identification Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ecuid {
    frame_payload: Vec<u8>,
}

impl Ecuid {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ecuid {
        Ecuid { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ecuid, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566768126 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ecuid::new(frame.data().to_vec()));
        Box::new(f)
    }
}

/// Engine Continuous Torque & Speed Limit
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ect1 {
    frame_payload: Vec<u8>,
}

impl Ect1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ect1 {
        Ect1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ect1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566804734 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ect1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngMinContinuousTorque signal from can frame
    #[allow(dead_code)]
    pub fn engmincontinuoustorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 + -125f64
    }

    /// Applied limit for maximum continuous engine torque.
    #[allow(dead_code)]
    pub fn engmaxcontinuoustorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 + -125f64
    }

    /// Read EngMinContinuousRPM signal from can frame
    #[allow(dead_code)]
    pub fn engmincontinuousrpm(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 32.000000
    }

    /// Read EngMaxContinuousRPM signal from can frame
    #[allow(dead_code)]
    pub fn engmaxcontinuousrpm(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 32.000000
    }

    /// Maximum allowable value for minimum continuous torque.
    #[allow(dead_code)]
    pub fn enghghlmtthrshhldfrmncntnstrqfrm(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 + -125f64
    }

    /// Minimum allowable value for maximum continuous torque.
    #[allow(dead_code)]
    pub fn englwlmtthrshldfrmxtrquefromeng(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -125f64
    }

    /// Read EngHghLmtThrshhldFrMnCntnsEngRPM signal from can frame
    #[allow(dead_code)]
    pub fn enghghlmtthrshhldfrmncntnsengrpm(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 32.000000
    }

    /// Read EngLwLmtThrshhldFrMaxRPMFromEng signal from can frame
    #[allow(dead_code)]
    pub fn englwlmtthrshhldfrmaxrpmfromeng(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 32.000000
    }
}

/// Engine Configuration
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ec1 {
    frame_payload: Vec<u8>,
}

impl Ec1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ec1 {
        Ec1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ec1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566841342 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ec1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter indicates which TSC1 control purposes are supported in group 4 of 4.
    #[allow(dead_code)]
    pub fn supporttsc1ctrlpurposegroup4of4(&self) -> SupportTsc1CtrlPurposeGroup4Of42566841342 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SupportTsc1CtrlPurposeGroup4Of42566841342::from((((frame_payload >> 304) & 0xFF) as f64) as u64)
    }

    /// Read SupportVariableRateTSC1Message signal from can frame
    #[allow(dead_code)]
    pub fn supportvariableratetsc1message(&self) -> SupportVariableRateTsc1Message2566841342 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SupportVariableRateTsc1Message2566841342::from((((frame_payload >> 272) & 0xFF) as f64) as u64)
    }

    /// This parameter indicates which TSC1 control purposes are supported in group 3 of 4.
    #[allow(dead_code)]
    pub fn supporttsc1ctrlpurposegroup3of4(&self) -> SupportTsc1CtrlPurposeGroup3Of42566841342 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SupportTsc1CtrlPurposeGroup3Of42566841342::from((((frame_payload >> 296) & 0xFF) as f64) as u64)
    }

    /// This parameter indicates which TSC1 control purposes are supported in group 2 of 4.
    #[allow(dead_code)]
    pub fn supporttsc1ctrlpurposegroup2of4(&self) -> SupportTsc1CtrlPurposeGroup2Of42566841342 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SupportTsc1CtrlPurposeGroup2Of42566841342::from((((frame_payload >> 288) & 0xFF) as f64) as u64)
    }

    /// This parameter indicates which TSC1 control purposes are supported in group 1 of 4.
    #[allow(dead_code)]
    pub fn supporttsc1ctrlpurposegroup1of4(&self) -> SupportTsc1CtrlPurposeGroup1Of42566841342 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SupportTsc1CtrlPurposeGroup1Of42566841342::from((((frame_payload >> 280) & 0xFF) as f64) as u64)
    }

    /// Companion parameter to Transmission Torque Limit (SPN 1845).
    #[allow(dead_code)]
    pub fn engdefaulttorquelimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 256) & 0xFFFF) as f64
    }

    /// Moment of inertia for the engine, including items driven full-time by the engine such as fuel, oil and cooling pumps.
    #[allow(dead_code)]
    pub fn engmomentofinertia(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 240) & 0xFFFF) as f64 * 0.004000
    }

    /// Read EngExRngRqdSpdCtrlRngUpperLimit signal from can frame
    #[allow(dead_code)]
    pub fn engexrngrqdspdctrlrngupperlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 224) & 0xFFFF) as f64 * 0.125000
    }

    /// The maximum engine torque that the engine will allow when operating in a torque control/limit mode.
    #[allow(dead_code)]
    pub fn engrqdtorquectrlrangeupperlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 216) & 0xFF) as f64 + -125f64
    }

    /// The minimum engine torque that the engine will allow when operating in a torque control/limit mode.
    #[allow(dead_code)]
    pub fn engrqdtorquectrlrangelowerlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 208) & 0xFF) as f64 + -125f64
    }

    /// Read EngRqedSpeedCtrlRangeUpperLimit signal from can frame
    #[allow(dead_code)]
    pub fn engrqedspeedctrlrangeupperlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 200) & 0xFF) as f64 * 10.000000
    }

    /// The minimum engine speed that the engine will allow when operating in a speed control/limit mode.
    #[allow(dead_code)]
    pub fn engrqedspeedctrlrangelowerlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 192) & 0xFF) as f64 * 10.000000
    }

    /// The maximum time limit allowed to override the engine's high idle speed.
    #[allow(dead_code)]
    pub fn engmxmomentaryoverridetimelimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 184) & 0xFF) as f64 * 0.100000
    }

    /// The maximum engine speed above high idle allowed by the engine control during a momentary high idle override.
    #[allow(dead_code)]
    pub fn engmxmmntaryoverridespeedpoint7(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 168) & 0xFFFF) as f64 * 0.125000
    }

    /// This parameter is the 100% reference value for all defined indicated engine torque parameters.
    #[allow(dead_code)]
    pub fn engreferencetorque(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 152) & 0xFFFF) as f64
    }

    /// Engine speed of high idle (point 6) of the engine torque map (see PGN 65251 and supporting document).
    #[allow(dead_code)]
    pub fn engspeedathighidlepoint6(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 120) & 0xFFFF) as f64 * 0.125000
    }

    /// Read EngGainOfEndspeedGovernor signal from can frame
    #[allow(dead_code)]
    pub fn enggainofendspeedgovernor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 136) & 0xFFFF) as f64 * 0.000781
    }

    /// Read EngPercentTorqueAtPoint5 signal from can frame
    #[allow(dead_code)]
    pub fn engpercenttorqueatpoint5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 112) & 0xFF) as f64 + -125f64
    }

    /// Engine speed of point 3, 4, and 5 of the engine torque map (see PGN 65251 and supporting document).
    #[allow(dead_code)]
    pub fn engspeedatpoint5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 96) & 0xFFFF) as f64 * 0.125000
    }

    /// Read EngPercentTorqueAtPoint4 signal from can frame
    #[allow(dead_code)]
    pub fn engpercenttorqueatpoint4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 88) & 0xFF) as f64 + -125f64
    }

    /// Engine speed of point 3, 4, and 5 of the engine torque map (see PGN 65251 and supporting document).
    #[allow(dead_code)]
    pub fn engspeedatpoint4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 72) & 0xFFFF) as f64 * 0.125000
    }

    /// Read EngPercentTorqueAtPoint3 signal from can frame
    #[allow(dead_code)]
    pub fn engpercenttorqueatpoint3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFF) as f64 + -125f64
    }

    /// Engine speed of point 3, 4, and 5 of the engine torque map (see PGN 65251 and supporting document).
    #[allow(dead_code)]
    pub fn engspeedatpoint3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.125000
    }

    /// Read EngPercentTorqueAtPoint2 signal from can frame
    #[allow(dead_code)]
    pub fn engpercenttorqueatpoint2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 + -125f64
    }

    /// Engine speed of point 2 of the engine torque map (see PGN 65251 and supporting document).
    #[allow(dead_code)]
    pub fn engspeedatpoint2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64 * 0.125000
    }

    /// The torque limit that indicates the available engine torque which can be provided by the engine at idle speed.
    #[allow(dead_code)]
    pub fn engpercenttorqueatidlepoint1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -125f64
    }

    /// Read EngSpeedAtIdlePoint1 signal from can frame
    #[allow(dead_code)]
    pub fn engspeedatidlepoint1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.125000
    }
}

/// Electronic Brake Controller 5
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ebc5 {
    frame_payload: Vec<u8>,
}

impl Ebc5 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ebc5 {
        Ebc5 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ebc5, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566767870 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ebc5::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter indicates if the temperature in the service brakes exceeds a certain value.
    #[allow(dead_code)]
    pub fn braketempwarning(&self) -> BrakeTempWarning2566767870 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BrakeTempWarning2566767870::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// The brake system may temporarily or generally limit the maximum brake performance available for external systems.
    #[allow(dead_code)]
    pub fn xbraccelerationlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 0.100000 + -12.5f64
    }

    /// This parameter indicates which XBR Control Mode is executed by the brake system.
    #[allow(dead_code)]
    pub fn xbractivectrlmode(&self) -> XbrActiveCtrlMode2566767870 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        XbrActiveCtrlMode2566767870::from((((frame_payload >> 12) & 0xF) as f64) as u64)
    }

    /// This parameter indicates which external brake control is allowed.
    #[allow(dead_code)]
    pub fn xbrsystemstate(&self) -> XbrSystemState2566767870 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        XbrSystemState2566767870::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// This parameter indicates if the brake system presently uses the foundation brakes.
    #[allow(dead_code)]
    pub fn foundationbrakeuse(&self) -> FoundationBrakeUse2566767870 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FoundationBrakeUse2566767870::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the current mode of the hill holder function.
    #[allow(dead_code)]
    pub fn hillholdermode(&self) -> HillHolderMode2566767870 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HillHolderMode2566767870::from((((frame_payload >> 5) & 0x7) as f64) as u64)
    }

    /// Signal which indicates the current mode of the halt brake function.
    #[allow(dead_code)]
    pub fn haltbrakemode(&self) -> HaltBrakeMode2566767870 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HaltBrakeMode2566767870::from((((frame_payload >> 2) & 0x7) as f64) as u64)
    }
}

/// Wheel Brake Lining Remaining Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ebc4 {
    frame_payload: Vec<u8>,
}

impl Ebc4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ebc4 {
        Ebc4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ebc4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633936126 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ebc4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The percentage of brake lining which can still be measured for the right wheel on the rear axle #3.
    #[allow(dead_code)]
    pub fn brklnngrmnngrearaxle3rightwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 0.400000
    }

    /// The percentage of brake lining which can still be measured for the left wheel on the rear axle #3.
    #[allow(dead_code)]
    pub fn brklnngrmningrearaxle3leftwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 0.400000
    }

    /// The percentage of brake lining which can still be measured for the right wheel on the rear axle #2.
    #[allow(dead_code)]
    pub fn brklnngrmnngrearaxle2rightwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 0.400000
    }

    /// The percentage of brake lining which can still be measured for the left wheel on the rear axle #2.
    #[allow(dead_code)]
    pub fn brklnngrmningrearaxle2leftwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 0.400000
    }

    /// The percentage of brake lining which can still be measured for the right wheel on the rear axle #1.
    #[allow(dead_code)]
    pub fn brklnngrmnngrearaxle1rightwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.400000
    }

    /// The percentage of brake lining which can still be measured for the left wheel on the rear axle #1.
    #[allow(dead_code)]
    pub fn brklnngrmningrearaxle1leftwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 0.400000
    }

    /// The percentage of brake lining which can still be measured for the right wheel on the front axle.
    #[allow(dead_code)]
    pub fn brklnngrmnngfrontaxlerightwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.400000
    }

    /// The percentage of brake lining which can still be measured for the left wheel on the front axle.
    #[allow(dead_code)]
    pub fn brklnngrmningfrontaxleleftwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }
}

/// Wheel Application Pressure High Range Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ebc3 {
    frame_payload: Vec<u8>,
}

impl Ebc3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ebc3 {
        Ebc3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ebc3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566827518 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ebc3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The brake application pressure for the right wheel on the rear axle #3.
    #[allow(dead_code)]
    pub fn brkappprsshghrngrraxl3rghtwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 5.000000
    }

    /// The brake application pressure for the left wheel on the rear axle #3.
    #[allow(dead_code)]
    pub fn brkappprsshghrngrraxl3leftwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 5.000000
    }

    /// The brake application pressure for the right wheel on the rear axle #2.
    #[allow(dead_code)]
    pub fn brkappprsshghrngrraxl2rghtwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 5.000000
    }

    /// The brake application pressure for the left wheel on the rear axle #2.
    #[allow(dead_code)]
    pub fn brkappprsshghrngrraxl2leftwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 5.000000
    }

    /// The brake application pressure for the right wheel on the rear axle #1.
    #[allow(dead_code)]
    pub fn brkappprsshghrngrraxl1rghtwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 5.000000
    }

    /// The brake application pressure for the left wheel on the rear axle #1.
    #[allow(dead_code)]
    pub fn brkappprsshghrngrraxl1leftwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 5.000000
    }

    /// The brake application pressure for the right wheel on the front axle.
    #[allow(dead_code)]
    pub fn brkappprsshghrngfrntaxlrghtwhel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 5.000000
    }

    /// The brake application pressure for the left wheel on the front axle.
    #[allow(dead_code)]
    pub fn brkappprsshghrngfrntaxllftwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 5.000000
    }
}

/// Wheel Speed Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ebc2 {
    frame_payload: Vec<u8>,
}

impl Ebc2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ebc2 {
        Ebc2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ebc2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566832126 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ebc2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The speed of the rear axle #2, right wheel relative to the front axle speed, SPN 904.
    #[allow(dead_code)]
    pub fn rlativespeedrearaxle2rightwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 0.062500 + -7.8125f64
    }

    /// The speed of the rear axle #2, left wheel relative to the front axle speed, SPN 904.
    #[allow(dead_code)]
    pub fn relativespeedrearaxle2leftwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 0.062500 + -7.8125f64
    }

    /// The speed of the rear axle #1, right wheel relative to the front axle speed, SPN 904.
    #[allow(dead_code)]
    pub fn rlativespeedrearaxle1rightwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 0.062500 + -7.8125f64
    }

    /// The speed of the rear axle #1, left wheel relative to the front axle speed, SPN 904.
    #[allow(dead_code)]
    pub fn relativespeedrearaxle1leftwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 0.062500 + -7.8125f64
    }

    /// The speed of the front axle, right wheel relative to the front axle speed, SPN 904.
    #[allow(dead_code)]
    pub fn rlativespeedfrontaxlerightwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.062500 + -7.8125f64
    }

    /// The speed of the front axle, left wheel relative to the front axle speed, SPN 904.
    #[allow(dead_code)]
    pub fn relativespeedfrontaxleleftwheel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 0.062500 + -7.8125f64
    }

    /// The average speed of the two front wheels.
    #[allow(dead_code)]
    pub fn frontaxlespeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.003906
    }
}

/// Electronic Brake Controller 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ebc1 {
    frame_payload: Vec<u8>,
}

impl Ebc1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ebc1 {
        Ebc1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ebc1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565865982 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ebc1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The source address of the SAE J1939 device currently controlling the brake system.
    #[allow(dead_code)]
    pub fn srcaddrssofctrllngdvcfrbrkcntrl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64
    }

    /// Ratio of brake pedal position to maximum pedal position.
    #[allow(dead_code)]
    pub fn brakepedalpos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.400000
    }

    /// This parameter commands the tractor-mounted trailer ABS optical warning signal.
    #[allow(dead_code)]
    pub fn trctrmntdtrilerabswarningsignal(&self) -> TrctrMntdTrilerAbsWarningSignal2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrctrMntdTrilerAbsWarningSignal2565865982::from((((frame_payload >> 62) & 0x3) as f64) as u64)
    }

    /// State signal which indicates that ABS in the trailer is actively controlling the brakes.
    #[allow(dead_code)]
    pub fn trailerabsstatus(&self) -> TrailerAbsStatus2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerAbsStatus2565865982::from((((frame_payload >> 60) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates the position of the halt brake switch.
    #[allow(dead_code)]
    pub fn haltbrakeswitch(&self) -> HaltBrakeSwitch2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HaltBrakeSwitch2565865982::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// This parameter commands the ATC/ASR driver information signal, for example a dash lamp.
    #[allow(dead_code)]
    pub fn atc_asrinformationsignal(&self) -> AtcAsrInformationSignal2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AtcAsrInformationSignal2565865982::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Read ABS_EBSAmberWarningSignal signal from can frame
    #[allow(dead_code)]
    pub fn abs_ebsamberwarningsignal(&self) -> AbsEbsAmberWarningSignal2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AbsEbsAmberWarningSignal2565865982::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Read EBSRedWarningSignal signal from can frame
    #[allow(dead_code)]
    pub fn ebsredwarningsignal(&self) -> EbsRedWarningSignal2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EbsRedWarningSignal2565865982::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Read ABSFullyOperational signal from can frame
    #[allow(dead_code)]
    pub fn absfullyoperational(&self) -> AbsFullyOperational2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AbsFullyOperational2565865982::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Read EngRetarderSelection signal from can frame
    #[allow(dead_code)]
    pub fn engretarderselection(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 0.400000
    }

    /// Switch signal which indicates that the remote accelerator has been enabled and controls the engine.
    #[allow(dead_code)]
    pub fn remoteaccelenableswitch(&self) -> RemoteAccelEnableSwitch2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RemoteAccelEnableSwitch2565865982::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Switch signal which requests that all engine fueling stop.
    #[allow(dead_code)]
    pub fn engauxengshutdownswitch(&self) -> EngAuxEngShutdownSwitch2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngAuxEngShutdownSwitch2565865982::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Switch signal used to activate the torque limiting feature of the engine.
    #[allow(dead_code)]
    pub fn engderateswitch(&self) -> EngDerateSwitch2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngDerateSwitch2565865982::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Switch signal used to disable the accelerator and remote accelerator inputs, causing the engine to return to idle.
    #[allow(dead_code)]
    pub fn accelinterlockswitch(&self) -> AccelInterlockSwitch2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AccelInterlockSwitch2565865982::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates the position of the traction control override switch.
    #[allow(dead_code)]
    pub fn tractionctrloverrideswitch(&self) -> TractionCtrlOverrideSwitch2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractionCtrlOverrideSwitch2565865982::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates the position of the ASR �hill holder� switch.
    #[allow(dead_code)]
    pub fn asrhillholderswitch(&self) -> AsrHillHolderSwitch2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AsrHillHolderSwitch2565865982::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates the position of the ASR off-road switch.
    #[allow(dead_code)]
    pub fn asroffroadswitch(&self) -> AsrOffroadSwitch2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AsrOffroadSwitch2565865982::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates the position of the ABS off-road switch.
    #[allow(dead_code)]
    pub fn absoffroadswitch(&self) -> AbsOffroadSwitch2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AbsOffroadSwitch2565865982::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates that the brake pedal is being pressed.
    #[allow(dead_code)]
    pub fn ebsbrakeswitch(&self) -> EbsBrakeSwitch2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EbsBrakeSwitch2565865982::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// State signal which indicates that the ABS is active.
    #[allow(dead_code)]
    pub fn antilockbrakingactive(&self) -> AntiLockBrakingActive2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AntiLockBrakingActive2565865982::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// State signal which indicates that ASR brake control is active.
    #[allow(dead_code)]
    pub fn asrbrakectrlactive(&self) -> AsrBrakeCtrlActive2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AsrBrakeCtrlActive2565865982::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// State signal which indicates that ASR engine control has been commanded to be active.
    #[allow(dead_code)]
    pub fn asrengctrlactive(&self) -> AsrEngCtrlActive2565865982 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AsrEngCtrlActive2565865982::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Electronic Axle Controller 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eac1 {
    frame_payload: Vec<u8>,
}

impl Eac1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eac1 {
        Eac1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eac1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565867262 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eac1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read RearAxleGroupEngagementStatus signal from can frame
    #[allow(dead_code)]
    pub fn rearaxlegroupengagementstatus(&self) -> RearAxleGroupEngagementStatus2565867262 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RearAxleGroupEngagementStatus2565867262::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Read FrontAxleGroupEngagementStatus signal from can frame
    #[allow(dead_code)]
    pub fn frontaxlegroupengagementstatus(&self) -> FrontAxleGroupEngagementStatus2565867262 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FrontAxleGroupEngagementStatus2565867262::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// State used which indicates the condition of the central rear differential lock.
    #[allow(dead_code)]
    pub fn difflockstatecentralrear(&self) -> DiffLockStateCentralRear2565867262 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DiffLockStateCentralRear2565867262::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// State used which indicates the condition of the central front differential lock.
    #[allow(dead_code)]
    pub fn difflockstatecentralfront(&self) -> DiffLockStateCentralFront2565867262 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DiffLockStateCentralFront2565867262::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// State used which indicates the condition of the central differential lock.
    #[allow(dead_code)]
    pub fn difflockstatecentral(&self) -> DiffLockStateCentral2565867262 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DiffLockStateCentral2565867262::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// State used which indicates the condition of the rear axle 2 differential lock.
    #[allow(dead_code)]
    pub fn difflockstaterearaxle2(&self) -> DiffLockStateRearAxle22565867262 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DiffLockStateRearAxle22565867262::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// State used which indicates the condition of the rear axle 1 differential lock.
    #[allow(dead_code)]
    pub fn difflockstaterearaxle1(&self) -> DiffLockStateRearAxle12565867262 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DiffLockStateRearAxle12565867262::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// State used which indicates the condition of the front axle 2 differential lock.
    #[allow(dead_code)]
    pub fn difflockstatefrontaxle2(&self) -> DiffLockStateFrontAxle22565867262 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DiffLockStateFrontAxle22565867262::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// State used which indicates the condition of the front axle 1 differential lock.
    #[allow(dead_code)]
    pub fn difflockstatefrontaxle1(&self) -> DiffLockStateFrontAxle12565867262 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DiffLockStateFrontAxle12565867262::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// To identify to which of several similar devices (such as tires or fuel tanks) the information applies.
    #[allow(dead_code)]
    pub fn location(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Engine Auxiliary Coolant
#[allow(dead_code)]
#[derive(Debug)]
pub struct Eac {
    frame_payload: Vec<u8>,
}

impl Eac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Eac {
        Eac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Eac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566821118 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Eac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Gauge pressure of liquid found at outlet of sea water pump in sea water cooling system.
    #[allow(dead_code)]
    pub fn seawaterpumpoutletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 2.000000
    }

    /// Temperature of coolant found in the intercooler which is located after the turbocharger.
    #[allow(dead_code)]
    pub fn engauxcoolanttemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -40f64
    }

    /// Gage pressure of coolant found in the intercooler which is located after the turbocharger.
    #[allow(dead_code)]
    pub fn engauxcoolantpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 4.000000
    }
}

/// Driver's Identification
#[allow(dead_code)]
#[derive(Debug)]
pub struct Di {
    frame_payload: Vec<u8>,
}

impl Di {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Di {
        Di { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Di, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566810622 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Di::new(frame.data().to_vec()));
        Box::new(f)
    }
}

/// Dash Display
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dd {
    frame_payload: Vec<u8>,
}

impl Dd {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dd {
        Dd { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dd, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566847742 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dd::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of air inside vehicle container used to accommodate cargo.
    #[allow(dead_code)]
    pub fn cargoambienttemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Read EngOilFilterDiffPress signal from can frame
    #[allow(dead_code)]
    pub fn engoilfilterdiffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.500000
    }

    /// Differential pressure measured across the fuel filter located between the fuel tank and the supply pump.
    #[allow(dead_code)]
    pub fn engfuelfilterdiffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 2.000000
    }

    /// Ratio of volume of fuel to the total volume of fuel storage container.
    #[allow(dead_code)]
    pub fn fuellevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.400000
    }

    /// Ratio of volume of liquid to total container volume of fluid reservoir in windshield wash system.
    #[allow(dead_code)]
    pub fn washerfluidlevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }
}

/// Cold Start Aids
#[allow(dead_code)]
#[derive(Debug)]
pub struct Csa {
    frame_payload: Vec<u8>,
}

impl Csa {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Csa {
        Csa { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Csa, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566768382 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Csa::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The start enable device installed for start enable device 2.
    #[allow(dead_code)]
    pub fn engstartenabledevice2config(&self) -> EngStartEnableDevice2Config2566768382 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngStartEnableDevice2Config2566768382::from((((frame_payload >> 12) & 0xF) as f64) as u64)
    }

    /// The start enable device installed for start enable device 1.
    #[allow(dead_code)]
    pub fn engstartenabledevice1config(&self) -> EngStartEnableDevice1Config2566768382 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngStartEnableDevice1Config2566768382::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// Devices that assist an engine in starting, e.
    #[allow(dead_code)]
    pub fn engstartenabledevice2(&self) -> EngStartEnableDevice22566768382 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngStartEnableDevice22566768382::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Devices that assist an Engine in starting, e.
    #[allow(dead_code)]
    pub fn engstartenabledevice1(&self) -> EngStartEnableDevice12566768382 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngStartEnableDevice12566768382::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Combination Vehicle Weight
#[allow(dead_code)]
#[derive(Debug)]
pub struct Cvw {
    frame_payload: Vec<u8>,
}

impl Cvw {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Cvw {
        Cvw { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Cvw, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566811902 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Cvw::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total mass imposed by the tires of the powered vehicle on the road surface.
    #[allow(dead_code)]
    pub fn poweredvehicleweight(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 10.000000
    }

    /// The total weight of the truck and all attached trailers.
    #[allow(dead_code)]
    pub fn grosscombinationvehicleweight(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 10.000000
    }
}

/// Continuous Torque & Speed Limit Request
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ctl {
    frame_payload: Vec<u8>,
}

impl Ctl {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ctl {
        Ctl { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ctl, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2563768062 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ctl::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read MxCntnuousRetarderTorqueLimitRq signal from can frame
    #[allow(dead_code)]
    pub fn mxcntnuousretardertorquelimitrq(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 + -125f64
    }

    /// Read MnCntnuousRetarderTorqueLimitRq signal from can frame
    #[allow(dead_code)]
    pub fn mncntnuousretardertorquelimitrq(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 + -125f64
    }

    /// Read MxCntinuousRetarderSpeedLimitRq signal from can frame
    #[allow(dead_code)]
    pub fn mxcntinuousretarderspeedlimitrq(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 32.000000
    }

    /// Read MnCntinuousRetarderSpeedLimitRq signal from can frame
    #[allow(dead_code)]
    pub fn mncntinuousretarderspeedlimitrq(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 32.000000
    }

    /// Read EngTorqueLimitRqMaxContinuous signal from can frame
    #[allow(dead_code)]
    pub fn engtorquelimitrqmaxcontinuous(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 + -125f64
    }

    /// Read EngTorqueLimitRqMinContinuous signal from can frame
    #[allow(dead_code)]
    pub fn engtorquelimitrqmincontinuous(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -125f64
    }

    /// Read EngSpeedLimitRqMaxContinuous signal from can frame
    #[allow(dead_code)]
    pub fn engspeedlimitrqmaxcontinuous(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 32.000000
    }

    /// Read EngSpeedLimitRqMinContinuous signal from can frame
    #[allow(dead_code)]
    pub fn engspeedlimitrqmincontinuous(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 32.000000
    }
}

/// Combustion Time 6
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ct6 {
    frame_payload: Vec<u8>,
}

impl Ct6 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ct6 {
        Ct6 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ct6, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633924862 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ct6::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The average combustion time of all cylinders of an engine.
    #[allow(dead_code)]
    pub fn engaveragecombustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.010000
    }

    /// The desired combustion time based upon engine load and speed lookup maps.
    #[allow(dead_code)]
    pub fn engdesiredcombustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.010000
    }
}

/// Combustion Time 5
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ct5 {
    frame_payload: Vec<u8>,
}

impl Ct5 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ct5 {
        Ct5 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ct5, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633924606 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ct5::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl20combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl19combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl18combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl17combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.010000
    }
}

/// Combustion Time 4
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ct4 {
    frame_payload: Vec<u8>,
}

impl Ct4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ct4 {
        Ct4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ct4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633924350 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ct4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl16combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl15combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl14combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl13combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.010000
    }
}

/// Combustion Time 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ct3 {
    frame_payload: Vec<u8>,
}

impl Ct3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ct3 {
        Ct3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ct3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633924094 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ct3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl12combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl11combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl10combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl9combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.010000
    }
}

/// Combustion Time 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ct2 {
    frame_payload: Vec<u8>,
}

impl Ct2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ct2 {
        Ct2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ct2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633923838 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ct2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl8combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl7combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl6combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl5combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.010000
    }
}

/// Combustion Time 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ct1 {
    frame_payload: Vec<u8>,
}

impl Ct1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ct1 {
        Ct1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ct1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633923582 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ct1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl4combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl3combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl2combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.010000
    }

    /// The amount of time from when the ignition of the fuel is initiated to when the fuel is completely ignited (i.
    #[allow(dead_code)]
    pub fn engcyl1combustiontime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.010000
    }
}

/// Electronic Control Module Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Cmi {
    frame_payload: Vec<u8>,
}

impl Cmi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Cmi {
        Cmi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Cmi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633878014 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Cmi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total number of times changes have been made to any of the configurable parameters.
    #[allow(dead_code)]
    pub fn totalcountofconfigchangesmade(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Cab Message 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Cm3 {
    frame_payload: Vec<u8>,
}

impl Cm3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Cm3 {
        Cm3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Cm3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566771966 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Cm3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Conveys operator or vehicle system desire for a transmission oil level reading to be taken.
    #[allow(dead_code)]
    pub fn transoillevelrq(&self) -> TransOilLevelRq2566771966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransOilLevelRq2566771966::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Operator input used to release the fifth wheel.
    #[allow(dead_code)]
    pub fn fifthwheelreleasectrl(&self) -> FifthWheelReleaseCtrl2566771966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FifthWheelReleaseCtrl2566771966::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Operator's fifth wheel release control interlock.
    #[allow(dead_code)]
    pub fn ffthwhlrlasectrlsecuritylockout(&self) -> FfthWhlRlaseCtrlSecurityLockout2566771966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FfthWhlRlaseCtrlSecurityLockout2566771966::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Operator switch to select the condition of the transfer case.
    #[allow(dead_code)]
    pub fn transfercaseselectorswitch(&self) -> TransferCaseSelectorSwitch2566771966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransferCaseSelectorSwitch2566771966::from(((frame_payload & 0x7) as f64) as u64)
    }
}

/// Cab Message 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Cm1 {
    frame_payload: Vec<u8>,
}

impl Cm1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Cm1 {
        Cm1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Cm1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2564882174 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Cm1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read SelectedMaxVehicleSpeedLimit signal from can frame
    #[allow(dead_code)]
    pub fn selectedmaxvehiclespeedlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64
    }

    /// Request to activate cab zone heating.
    #[allow(dead_code)]
    pub fn rqcabzoneheating(&self) -> RqCabZoneHeating2564882174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RqCabZoneHeating2564882174::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Request to activate engine zone heating.
    #[allow(dead_code)]
    pub fn rqengzoneheating(&self) -> RqEngZoneHeating2564882174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RqEngZoneHeating2564882174::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Request to activate the auxiliary heater.
    #[allow(dead_code)]
    pub fn auxheatermoderq(&self) -> AuxHeaterModeRq2564882174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxHeaterModeRq2564882174::from((((frame_payload >> 48) & 0xF) as f64) as u64)
    }

    /// Switch signal which enables the idle management system to be enabled.
    #[allow(dead_code)]
    pub fn engautomaticstartenableswitch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 46) & 0x3) as f64
    }

    /// Read AtmaticGearShiftingEnableSwitch signal from can frame
    #[allow(dead_code)]
    pub fn atmaticgearshiftingenableswitch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 44) & 0x3) as f64
    }

    /// Read VhclLmtngSpdGvernorEnableSwitch signal from can frame
    #[allow(dead_code)]
    pub fn vhcllmtngspdgvernorenableswitch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 38) & 0x3) as f64
    }

    /// Switch signal which increases the Vehicle Limiting Speed Governor (VLSG).
    #[allow(dead_code)]
    pub fn vhcllmtngspdgvrnrincrmentswitch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 36) & 0x3) as f64
    }

    /// Switch signal which decreases the Vehicle Limiting Speed Governor (VLSG).
    #[allow(dead_code)]
    pub fn vhcllmtngspdgvrnrdcrementswitch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 34) & 0x3) as f64
    }

    /// Read SeatBeltSwitch signal from can frame
    #[allow(dead_code)]
    pub fn seatbeltswitch(&self) -> SeatBeltSwitch2564882174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SeatBeltSwitch2564882174::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Read OperatorSeatDirectionSwitch signal from can frame
    #[allow(dead_code)]
    pub fn operatorseatdirectionswitch(&self) -> OperatorSeatDirectionSwitch2564882174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OperatorSeatDirectionSwitch2564882174::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Request to hold the battery main switch.
    #[allow(dead_code)]
    pub fn batterymainswitchholdrq(&self) -> BatteryMainSwitchHoldRq2564882174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BatteryMainSwitchHoldRq2564882174::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Indicates whether to activate the auxiliary heater coolant water pump.
    #[allow(dead_code)]
    pub fn auxheatercoolantpumprq(&self) -> AuxHeaterCoolantPumpRq2564882174 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxHeaterCoolantPumpRq2564882174::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Parameter used to command a certain cab interior temperature.
    #[allow(dead_code)]
    pub fn cabinteriortempcmd(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Fan speed as a ratio of the actual fan drive (current speed) to the fully engaged fan drive (maximum fan speed).
    #[allow(dead_code)]
    pub fn rqedpercentfanspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }
}

/// Cab Illumination Message
#[allow(dead_code)]
#[derive(Debug)]
pub struct Cl {
    frame_payload: Vec<u8>,
}

impl Cl {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Cl {
        Cl { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Cl, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2563833598 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Cl::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read IlluminationBrightnessPercent signal from can frame
    #[allow(dead_code)]
    pub fn illuminationbrightnesspercent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }
}

/// Component Identification
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ci {
    frame_payload: Vec<u8>,
}

impl Ci {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ci {
        Ci { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ci, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566843390 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ci::new(frame.data().to_vec()));
        Box::new(f)
    }
}

/// Cruise Control/Vehicle Speed
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ccvs {
    frame_payload: Vec<u8>,
}

impl Ccvs {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ccvs {
        Ccvs { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ccvs, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566844926 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ccvs::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read ParkBrakeReleaseInhibitRq signal from can frame
    #[allow(dead_code)]
    pub fn parkbrakereleaseinhibitrq(&self) -> ParkBrakeReleaseInhibitRq2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ParkBrakeReleaseInhibitRq2566844926::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates the position of the engine shutdown override switch.
    #[allow(dead_code)]
    pub fn engshutdownoverrideswitch(&self) -> EngShutdownOverrideSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngShutdownOverrideSwitch2566844926::from((((frame_payload >> 62) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates the position of the engine test mode switch.
    #[allow(dead_code)]
    pub fn engtestmodeswitch(&self) -> EngTestModeSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngTestModeSwitch2566844926::from((((frame_payload >> 60) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates the position of the idle decrement switch.
    #[allow(dead_code)]
    pub fn engidledecrementswitch(&self) -> EngIdleDecrementSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngIdleDecrementSwitch2566844926::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates the position of the idle increment switch.
    #[allow(dead_code)]
    pub fn engidleincrementswitch(&self) -> EngIdleIncrementSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngIdleIncrementSwitch2566844926::from((((frame_payload >> 56) & 0x3) as f64) as u64)
    }

    /// This parameter is used to indicate the current state, or mode, of operation by the cruise control device.
    #[allow(dead_code)]
    pub fn cruisectrlstates(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 53) & 0x7) as f64
    }

    /// This parameter is used to indicate the current state or mode of operation by the power takeoff (PTO) device.
    #[allow(dead_code)]
    pub fn ptostate(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x1F) as f64
    }

    /// Value of set (chosen) velocity of velocity control system.
    #[allow(dead_code)]
    pub fn cruisectrlsetspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64
    }

    /// Switch signal of the cruise control activator which indicates that the activator is in the position �accelerate.
    #[allow(dead_code)]
    pub fn cruisectrlaccelerateswitch(&self) -> CruiseCtrlAccelerateSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CruiseCtrlAccelerateSwitch2566844926::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Switch signal of the cruise control activator which indicates that the activator is in the position �resume.
    #[allow(dead_code)]
    pub fn cruisectrlresumeswitch(&self) -> CruiseCtrlResumeSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CruiseCtrlResumeSwitch2566844926::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Switch signal of the cruise control activator which indicates that the activator is in the position �coast (decelerate).
    #[allow(dead_code)]
    pub fn cruisectrlcoastswitch(&self) -> CruiseCtrlCoastSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CruiseCtrlCoastSwitch2566844926::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Switch signal of the cruise control activator which indicates that the activator is in the position �set.
    #[allow(dead_code)]
    pub fn cruisectrlsetswitch(&self) -> CruiseCtrlSetSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CruiseCtrlSetSwitch2566844926::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates that the clutch pedal is being pressed.
    #[allow(dead_code)]
    pub fn clutchswitch(&self) -> ClutchSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ClutchSwitch2566844926::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates that the driver operated brake foot pedal is being pressed.
    #[allow(dead_code)]
    pub fn brakeswitch(&self) -> BrakeSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BrakeSwitch2566844926::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates that it is possible to manage the cruise control function.
    #[allow(dead_code)]
    pub fn cruisectrlenableswitch(&self) -> CruiseCtrlEnableSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CruiseCtrlEnableSwitch2566844926::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Cruise control is switched on.
    #[allow(dead_code)]
    pub fn cruisectrlactive(&self) -> CruiseCtrlActive2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CruiseCtrlActive2566844926::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Speed of the vehicle as calculated from wheel or tailshaft speed.
    #[allow(dead_code)]
    pub fn wheelbasedvehiclespeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.003906
    }

    /// Switch signal which indicates the position of the Cruise Control Pause Switch used on Remote Cruise Control applications.
    #[allow(dead_code)]
    pub fn cruisectrlpauseswitch(&self) -> CruiseCtrlPauseSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CruiseCtrlPauseSwitch2566844926::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates when the parking brake is set.
    #[allow(dead_code)]
    pub fn parkingbrakeswitch(&self) -> ParkingBrakeSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ParkingBrakeSwitch2566844926::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Switch signal which indicates the current axle range.
    #[allow(dead_code)]
    pub fn twospeedaxleswitch(&self) -> TwoSpeedAxleSwitch2566844926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TwoSpeedAxleSwitch2566844926::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Cruise Control/Vehicle Speed Setup
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ccss {
    frame_payload: Vec<u8>,
}

impl Ccss {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ccss {
        Ccss { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ccss, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566843902 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ccss::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read CruiseCtrlLowSetLimitSpeed signal from can frame
    #[allow(dead_code)]
    pub fn cruisectrllowsetlimitspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Maximum vehicle velocity at which cruise can be set.
    #[allow(dead_code)]
    pub fn cruisectrlhighsetlimitspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Maximum vehicle velocity allowed.
    #[allow(dead_code)]
    pub fn maxvehiclespeedlimit(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Climate Control Configuration
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ccc {
    frame_payload: Vec<u8>,
}

impl Ccc {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ccc {
        Ccc { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ccc, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566809598 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ccc::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The maximum output power of the auxiliary heater.
    #[allow(dead_code)]
    pub fn auxheatermaxoutputpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 2.000000
    }
}

/// Compression/Service Brake Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Cbi {
    frame_payload: Vec<u8>,
}

impl Cbi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Cbi {
        Cbi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Cbi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633940222 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Cbi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total number of times the service brakes have been activated since the last trip reset.
    #[allow(dead_code)]
    pub fn tripservicebrakeapps(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 96) & 0xFFFFFFFF) as f64
    }

    /// Total distance over which the service brakes have been active since the last trip reset.
    #[allow(dead_code)]
    pub fn tripservicebrakedistance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFFFFFF) as f64 * 0.125000
    }

    /// Total distance over which the compression brakes have been active since the last trip reset.
    #[allow(dead_code)]
    pub fn tripcompressionbrakedistance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 * 0.125000
    }

    /// Total distance over which the compression brakes have been active for the life of the engine.
    #[allow(dead_code)]
    pub fn totalcompressionbrakedistance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.125000
    }
}

/// Cab A/C Climate System Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Caci {
    frame_payload: Vec<u8>,
}

impl Caci {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Caci {
        Caci { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Caci, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566775294 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Caci::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This is the gage pressure at the compressor outlet in the cab air conditioning system.
    #[allow(dead_code)]
    pub fn cba_crfrgrntcmprssoroutletpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 16.000000
    }
}

/// Battery Temperature
#[allow(dead_code)]
#[derive(Debug)]
pub struct Bt1 {
    frame_payload: Vec<u8>,
}

impl Bt1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Bt1 {
        Bt1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Bt1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566803710 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Bt1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of the battery 2.
    #[allow(dead_code)]
    pub fn battery2temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -40f64
    }

    /// Temperature of the battery 1.
    #[allow(dead_code)]
    pub fn battery1temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -40f64
    }
}

/// Battery Main Switch Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Bm {
    frame_payload: Vec<u8>,
}

impl Bm {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Bm {
        Bm { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Bm, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566809342 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Bm::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Parameter indicating whether the battery main switch is held due to an external request or not.
    #[allow(dead_code)]
    pub fn batterymainswitchholdstate(&self) -> BatteryMainSwitchHoldState2566809342 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BatteryMainSwitchHoldState2566809342::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Basic Joystick Message 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Bjm3 {
    frame_payload: Vec<u8>,
}

impl Bjm3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Bjm3 {
        Bjm3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Bjm3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365446910 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Bjm3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Reports when the current joystick position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn joystick3xaxisdetentposstatus(&self) -> Joystick3XAxisDetentPosStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3XAxisDetentPosStatus2365446910::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick3button9pressedstatus(&self) -> Joystick3Button9PressedStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3Button9PressedStatus2365446910::from((((frame_payload >> 62) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick3button10pressedstatus(&self) -> Joystick3Button10PressedStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3Button10PressedStatus2365446910::from((((frame_payload >> 60) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick3button11pressedstatus(&self) -> Joystick3Button11PressedStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3Button11PressedStatus2365446910::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick3button12pressedstatus(&self) -> Joystick3Button12PressedStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3Button12PressedStatus2365446910::from((((frame_payload >> 56) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn joystick3yaxisdetentposstatus(&self) -> Joystick3YAxisDetentPosStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3YAxisDetentPosStatus2365446910::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// The position of the joystick in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick3yaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 22) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck3YAxsLvrFrwrdPstvPsStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck3yaxslvrfrwrdpstvpsstatus(&self) -> Jystck3YAxsLvrFrwrdPstvPsStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3YAxsLvrFrwrdPstvPsStatus2365446910::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read Jystck3YAxsLvrBckNgtvePosStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck3yaxslvrbckngtveposstatus(&self) -> Jystck3YAxsLvrBckNgtvePosStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3YAxsLvrBckNgtvePosStatus2365446910::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn joystick3yaxisneutralposstatus(&self) -> Joystick3YAxisNeutralPosStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3YAxisNeutralPosStatus2365446910::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// The position of the joystick in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick3xaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 6) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck3XAxsLvrRghtPstvPosStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck3xaxslvrrghtpstvposstatus(&self) -> Jystck3XAxsLvrRghtPstvPosStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3XAxsLvrRghtPstvPosStatus2365446910::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Read Jystck3XAxsLvrLftNgtvePosStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck3xaxslvrlftngtveposstatus(&self) -> Jystck3XAxsLvrLftNgtvePosStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck3XAxsLvrLftNgtvePosStatus2365446910::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn joystick3xaxisneutralposstatus(&self) -> Joystick3XAxisNeutralPosStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3XAxisNeutralPosStatus2365446910::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick3button5pressedstatus(&self) -> Joystick3Button5PressedStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3Button5PressedStatus2365446910::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick3button6pressedstatus(&self) -> Joystick3Button6PressedStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3Button6PressedStatus2365446910::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick3button7pressedstatus(&self) -> Joystick3Button7PressedStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3Button7PressedStatus2365446910::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick3button8pressedstatus(&self) -> Joystick3Button8PressedStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3Button8PressedStatus2365446910::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick3button1pressedstatus(&self) -> Joystick3Button1PressedStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3Button1PressedStatus2365446910::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick3button2pressedstatus(&self) -> Joystick3Button2PressedStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3Button2PressedStatus2365446910::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick3button3pressedstatus(&self) -> Joystick3Button3PressedStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3Button3PressedStatus2365446910::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick3button4pressedstatus(&self) -> Joystick3Button4PressedStatus2365446910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick3Button4PressedStatus2365446910::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }
}

/// Basic Joystick Message 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Bjm2 {
    frame_payload: Vec<u8>,
}

impl Bjm2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Bjm2 {
        Bjm2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Bjm2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365446398 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Bjm2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Reports when the current joystick position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn joystick2xaxisdetentposstatus(&self) -> Joystick2XAxisDetentPosStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2XAxisDetentPosStatus2365446398::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn joystick2yaxisdetentposstatus(&self) -> Joystick2YAxisDetentPosStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2YAxisDetentPosStatus2365446398::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// The position of the joystick in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick2yaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 22) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck2YAxsLvrFrwrdPstvPsStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck2yaxslvrfrwrdpstvpsstatus(&self) -> Jystck2YAxsLvrFrwrdPstvPsStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2YAxsLvrFrwrdPstvPsStatus2365446398::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read Jystck2YAxsLvrBckNgtvePosStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck2yaxslvrbckngtveposstatus(&self) -> Jystck2YAxsLvrBckNgtvePosStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2YAxsLvrBckNgtvePosStatus2365446398::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn joystick2yaxisneutralposstatus(&self) -> Joystick2YAxisNeutralPosStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2YAxisNeutralPosStatus2365446398::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// The position of the joystick in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick2xaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 6) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck2XAxsLvrRghtPstvPosStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck2xaxslvrrghtpstvposstatus(&self) -> Jystck2XAxsLvrRghtPstvPosStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2XAxsLvrRghtPstvPosStatus2365446398::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Read Jystck2XAxsLvrLftNgtvePosStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck2xaxslvrlftngtveposstatus(&self) -> Jystck2XAxsLvrLftNgtvePosStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck2XAxsLvrLftNgtvePosStatus2365446398::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn joystick2xaxisneutralposstatus(&self) -> Joystick2XAxisNeutralPosStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2XAxisNeutralPosStatus2365446398::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick2button9pressedstatus(&self) -> Joystick2Button9PressedStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2Button9PressedStatus2365446398::from((((frame_payload >> 62) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick2button10pressedstatus(&self) -> Joystick2Button10PressedStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2Button10PressedStatus2365446398::from((((frame_payload >> 60) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick2button11pressedstatus(&self) -> Joystick2Button11PressedStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2Button11PressedStatus2365446398::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick2button12pressedstatus(&self) -> Joystick2Button12PressedStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2Button12PressedStatus2365446398::from((((frame_payload >> 56) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick2button5pressedstatus(&self) -> Joystick2Button5PressedStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2Button5PressedStatus2365446398::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick2button6pressedstatus(&self) -> Joystick2Button6PressedStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2Button6PressedStatus2365446398::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick2button7pressedstatus(&self) -> Joystick2Button7PressedStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2Button7PressedStatus2365446398::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick2button8pressedstatus(&self) -> Joystick2Button8PressedStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2Button8PressedStatus2365446398::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick2button1pressedstatus(&self) -> Joystick2Button1PressedStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2Button1PressedStatus2365446398::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick2button2pressedstatus(&self) -> Joystick2Button2PressedStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2Button2PressedStatus2365446398::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick2button3pressedstatus(&self) -> Joystick2Button3PressedStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2Button3PressedStatus2365446398::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick2button4pressedstatus(&self) -> Joystick2Button4PressedStatus2365446398 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick2Button4PressedStatus2365446398::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }
}

/// Basic Joystick Message 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Bjm1 {
    frame_payload: Vec<u8>,
}

impl Bjm1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Bjm1 {
        Bjm1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Bjm1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365445886 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Bjm1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Reports when the current joystick position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn joystick1xaxisdetentposstatus(&self) -> Joystick1XAxisDetentPosStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1XAxisDetentPosStatus2365445886::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the detent position for that axis of travel.
    #[allow(dead_code)]
    pub fn joystick1yaxisdetentposstatus(&self) -> Joystick1YAxisDetentPosStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1YAxisDetentPosStatus2365445886::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// The position of the joystick in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick1yaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 22) & 0x3FF) as f64 * 0.100000
    }

    /// Read Jystck1YAxsLvrFrwrdPstvPsStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck1yaxslvrfrwrdpstvpsstatus(&self) -> Jystck1YAxsLvrFrwrdPstvPsStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1YAxsLvrFrwrdPstvPsStatus2365445886::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read Jystck1YAxsLvrBckNgtvePosStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck1yaxslvrbckngtveposstatus(&self) -> Jystck1YAxsLvrBckNgtvePosStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1YAxsLvrBckNgtvePosStatus2365445886::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn joystick1yaxisneutralposstatus(&self) -> Joystick1YAxisNeutralPosStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1YAxisNeutralPosStatus2365445886::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// The position of the joystick in the relative motion of travel from the neutral position.
    #[allow(dead_code)]
    pub fn joystick1xaxispos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 6) & 0x3FF) as f64 * 0.100000
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick1button9pressedstatus(&self) -> Joystick1Button9PressedStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1Button9PressedStatus2365445886::from((((frame_payload >> 62) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick1button10pressedstatus(&self) -> Joystick1Button10PressedStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1Button10PressedStatus2365445886::from((((frame_payload >> 60) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick1button11pressedstatus(&self) -> Joystick1Button11PressedStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1Button11PressedStatus2365445886::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick1button12pressedstatus(&self) -> Joystick1Button12PressedStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1Button12PressedStatus2365445886::from((((frame_payload >> 56) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick1button5pressedstatus(&self) -> Joystick1Button5PressedStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1Button5PressedStatus2365445886::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick1button6pressedstatus(&self) -> Joystick1Button6PressedStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1Button6PressedStatus2365445886::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick1button7pressedstatus(&self) -> Joystick1Button7PressedStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1Button7PressedStatus2365445886::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick1button8pressedstatus(&self) -> Joystick1Button8PressedStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1Button8PressedStatus2365445886::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick1button1pressedstatus(&self) -> Joystick1Button1PressedStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1Button1PressedStatus2365445886::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick1button2pressedstatus(&self) -> Joystick1Button2PressedStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1Button2PressedStatus2365445886::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick1button3pressedstatus(&self) -> Joystick1Button3PressedStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1Button3PressedStatus2365445886::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Reports when the joystick button has been pressed.
    #[allow(dead_code)]
    pub fn joystick1button4pressedstatus(&self) -> Joystick1Button4PressedStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1Button4PressedStatus2365445886::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Read Jystck1XAxsLvrRghtPstvPosStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck1xaxslvrrghtpstvposstatus(&self) -> Jystck1XAxsLvrRghtPstvPosStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1XAxsLvrRghtPstvPosStatus2365445886::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Read Jystck1XAxsLvrLftNgtvePosStatus signal from can frame
    #[allow(dead_code)]
    pub fn jystck1xaxslvrlftngtveposstatus(&self) -> Jystck1XAxsLvrLftNgtvePosStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Jystck1XAxsLvrLftNgtvePosStatus2365445886::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Reports when the current joystick position is in the neutral position for that axis of travel.
    #[allow(dead_code)]
    pub fn joystick1xaxisneutralposstatus(&self) -> Joystick1XAxisNeutralPosStatus2365445886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Joystick1XAxisNeutralPosStatus2365445886::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Brakes
#[allow(dead_code)]
#[derive(Debug)]
pub struct B {
    frame_payload: Vec<u8>,
}

impl B {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> B {
        B { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = B, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566847230 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| B::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter commands the Parking Brake red optical warning signal.
    #[allow(dead_code)]
    pub fn parkingbrakeredwarningsignal(&self) -> ParkingBrakeRedWarningSignal2566847230 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ParkingBrakeRedWarningSignal2566847230::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// This parameter provides reports on the status of the Park Brake Release Inhibit function.
    #[allow(dead_code)]
    pub fn parkbrakereleaseinhibitstatus(&self) -> ParkBrakeReleaseInhibitStatus2566847230 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ParkBrakeReleaseInhibitStatus2566847230::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the current state of the actuator(s) that control the parking brake (see also SPN 70).
    #[allow(dead_code)]
    pub fn parkingbrakeactuator(&self) -> ParkingBrakeActuator2566847230 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ParkingBrakeActuator2566847230::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Gage pressure of air in the secondary, or service side, of the air brake system.
    #[allow(dead_code)]
    pub fn brakesecondpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 4.000000
    }

    /// Gage pressure of air in the primary, or supply side, of the air brake system.
    #[allow(dead_code)]
    pub fn brakeprimarypress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 4.000000
    }

    /// Read BrakeAppPress signal from can frame
    #[allow(dead_code)]
    pub fn brakeapppress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 4.000000
    }
}

/// Auxiliary Water Pump Pressure
#[allow(dead_code)]
#[derive(Debug)]
pub struct Awpp {
    frame_payload: Vec<u8>,
}

impl Awpp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Awpp {
        Awpp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Awpp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566848254 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Awpp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Gage pressure of auxiliary water pump driven as a PTO device.
    #[allow(dead_code)]
    pub fn auxpumppress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 16.000000
    }
}

/// Anti-theft Status
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ats {
    frame_payload: Vec<u8>,
}

impl Ats {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ats {
        Ats { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ats, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2631728894 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ats::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// A seven byte random numeric code provided by the component in response to an anti-theft request.
    #[allow(dead_code)]
    pub fn antitheftrandomnumber(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFFFFFFFFFFFF) as f64
    }

    /// Indicates whether or not the component can be started.
    #[allow(dead_code)]
    pub fn antitheftcomponentstatusstates(&self) -> AntitheftComponentStatusStates2631728894 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AntitheftComponentStatusStates2631728894::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Indicates the presence of the encryption seed random number.
    #[allow(dead_code)]
    pub fn antthftencryptnsdprsntindicator(&self) -> AntthftEncryptnSdPrsntIndicator2631728894 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AntthftEncryptnSdPrsntIndicator2631728894::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// Read AntitheftModifyPwdStates signal from can frame
    #[allow(dead_code)]
    pub fn antitheftmodifypwdstates(&self) -> AntitheftModifyPwdStates2631728894 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AntitheftModifyPwdStates2631728894::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Indicates the presence of a validated password.
    #[allow(dead_code)]
    pub fn antitheftpwdvalidindicator(&self) -> AntitheftPwdValidIndicator2631728894 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AntitheftPwdValidIndicator2631728894::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }
}

/// Anti-theft Request
#[allow(dead_code)]
#[derive(Debug)]
pub struct Atr {
    frame_payload: Vec<u8>,
}

impl Atr {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Atr {
        Atr { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Atr, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2631794430 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Atr::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter is the seven byte numeric code (i.
    #[allow(dead_code)]
    pub fn antitheftpasswordrepresentation(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFFFFFFFFFFFF) as f64
    }

    /// This parameter is used to identify the specific requests being sent to the component.
    #[allow(dead_code)]
    pub fn antitheftcmdstates(&self) -> AntitheftCmdStates2631794430 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AntitheftCmdStates2631794430::from((((frame_payload >> 5) & 0x7) as f64) as u64)
    }

    /// Read AntitheftDesiredExitModeStates signal from can frame
    #[allow(dead_code)]
    pub fn antitheftdesiredexitmodestates(&self) -> AntitheftDesiredExitModeStates2631794430 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AntitheftDesiredExitModeStates2631794430::from((((frame_payload >> 3) & 0x3) as f64) as u64)
    }

    /// Read AntthftEncryptonIndicatorStates signal from can frame
    #[allow(dead_code)]
    pub fn antthftencryptonindicatorstates(&self) -> AntthftEncryptonIndicatorStates2631794430 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AntthftEncryptonIndicatorStates2631794430::from((((frame_payload >> 1) & 0x3) as f64) as u64)
    }
}

/// Alternator Temperature
#[allow(dead_code)]
#[derive(Debug)]
pub struct At {
    frame_payload: Vec<u8>,
}

impl At {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> At {
        At { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = At, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633934846 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| At::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Temperature of the windings inside the alternator.
    #[allow(dead_code)]
    pub fn engaltwinding3temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 + -40f64
    }

    /// Temperature of the windings inside the alternator.
    #[allow(dead_code)]
    pub fn engaltwinding2temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 + -40f64
    }

    /// Temperature of the windings inside the alternator.
    #[allow(dead_code)]
    pub fn engaltwinding1temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 + -40f64
    }

    /// Temperature of the bearing inside the alternator.
    #[allow(dead_code)]
    pub fn engaltbearing2temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -40f64
    }

    /// Temperature of the bearing inside the alternator.
    #[allow(dead_code)]
    pub fn engaltbearing1temp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -40f64
    }
}

/// Air Suspension Control 6
#[allow(dead_code)]
#[derive(Debug)]
pub struct Asc6 {
    frame_payload: Vec<u8>,
}

impl Asc6 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Asc6 {
        Asc6 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Asc6, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2362572542 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Asc6::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Set value for nominal level 'preset level' at the right side of the rear axle.
    #[allow(dead_code)]
    pub fn levelpresetrearaxleright(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.100000 + -3200f64
    }

    /// Set value for nominal level 'preset level' at the left side of the rear axle.
    #[allow(dead_code)]
    pub fn levelpresetrearaxleleft(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.100000 + -3200f64
    }

    /// Set value for nominal level 'preset level' at the right side of the front axle.
    #[allow(dead_code)]
    pub fn levelpresetfrontaxleright(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000 + -3200f64
    }

    /// Set value for nominal level 'preset level' at the left side of the front axle.
    #[allow(dead_code)]
    pub fn levelpresetfrontaxleleft(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000 + -3200f64
    }
}

/// Air Suspension Control 5
#[allow(dead_code)]
#[derive(Debug)]
pub struct Asc5 {
    frame_payload: Vec<u8>,
}

impl Asc5 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Asc5 {
        Asc5 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Asc5, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365478910 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Asc5::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Signal which indicates the current mode of operation of the electronic shock absorber control at the lift/tag axle.
    #[allow(dead_code)]
    pub fn elctrncshckabsrbrctrlmdlft_tgaxl(&self) -> ElctrncShckAbsrbrCtrlMdLftTgAxl2365478910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ElctrncShckAbsrbrCtrlMdLftTgAxl2365478910::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the current mode of operation of the electronic shock absorber control at the rear axle.
    #[allow(dead_code)]
    pub fn elctrncshckabsrbrctrlmdrearaxle(&self) -> ElctrncShckAbsrbrCtrlMdRearAxle2365478910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ElctrncShckAbsrbrCtrlMdRearAxle2365478910::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the current mode of operation of the electronic shock absorber control at the front axle.
    #[allow(dead_code)]
    pub fn elctrncshckabsrbrctrlmdfrntaxle(&self) -> ElctrncShckAbsrbrCtrlMdFrntAxle2365478910 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ElctrncShckAbsrbrCtrlMdFrntAxle2365478910::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Read DamperStiffnessLift_TagAxle signal from can frame
    #[allow(dead_code)]
    pub fn damperstiffnesslift_tagaxle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 0.400000
    }

    /// Read DamperStiffnessRearAxle signal from can frame
    #[allow(dead_code)]
    pub fn damperstiffnessrearaxle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.400000
    }

    /// Read DamperStiffnessFrontAxle signal from can frame
    #[allow(dead_code)]
    pub fn damperstiffnessfrontaxle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }
}

/// Air Suspension Control 4
#[allow(dead_code)]
#[derive(Debug)]
pub struct Asc4 {
    frame_payload: Vec<u8>,
}

impl Asc4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Asc4 {
        Asc4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Asc4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566805758 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Asc4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read BellowPressRearAxleRight signal from can frame
    #[allow(dead_code)]
    pub fn bellowpressrearaxleright(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.100000
    }

    /// Read BellowPressRearAxleLeft signal from can frame
    #[allow(dead_code)]
    pub fn bellowpressrearaxleleft(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.100000
    }

    /// Read BellowPressFrontAxleRight signal from can frame
    #[allow(dead_code)]
    pub fn bellowpressfrontaxleright(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }

    /// Read BellowPressFrontAxleLeft signal from can frame
    #[allow(dead_code)]
    pub fn bellowpressfrontaxleleft(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// Air Suspension Control 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Asc3 {
    frame_payload: Vec<u8>,
}

impl Asc3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Asc3 {
        Asc3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Asc3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566806014 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Asc3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Information of the height at the left side of the rear axle referred to normal level 1.
    #[allow(dead_code)]
    pub fn relativelevelrearaxleright(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.100000 + -3200f64
    }

    /// Information of the height at the left side of the rear axle referred to normal level 1.
    #[allow(dead_code)]
    pub fn relativelevelrearaxleleft(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.100000 + -3200f64
    }

    /// Information of the height at the right side of the front axle referred to normal level 1.
    #[allow(dead_code)]
    pub fn relativelevelfrontaxleright(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000 + -3200f64
    }

    /// Information of the height at the left side of the front axle referred to normal level 1.
    #[allow(dead_code)]
    pub fn relativelevelfrontaxleleft(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000 + -3200f64
    }
}

/// Air Suspension Control 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Asc2 {
    frame_payload: Vec<u8>,
}

impl Asc2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Asc2 {
        Asc2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Asc2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2362638078 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Asc2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter contains an external request to prohibit all air suspension control.
    #[allow(dead_code)]
    pub fn prohibitairsuspensionctrl(&self) -> ProhibitAirSuspensionCtrl2362638078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ProhibitAirSuspensionCtrl2362638078::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Command signal to activate the kneeling functionality at the rear axle of the vehicle.
    #[allow(dead_code)]
    pub fn kneelingcmdrearaxle(&self) -> KneelingCmdRearAxle2362638078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        KneelingCmdRearAxle2362638078::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Read KneelingCmdFrontAxle signal from can frame
    #[allow(dead_code)]
    pub fn kneelingcmdfrontaxle(&self) -> KneelingCmdFrontAxle2362638078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        KneelingCmdFrontAxle2362638078::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Read DamperStiffnessRqLift_TagAxle signal from can frame
    #[allow(dead_code)]
    pub fn damperstiffnessrqlift_tagaxle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 0.400000
    }

    /// Demand value for the shock absorber control at the rear axle.
    #[allow(dead_code)]
    pub fn damperstiffnessrqrearaxle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 0.400000
    }

    /// Demand value for the shock absorber control at the front axle.
    #[allow(dead_code)]
    pub fn damperstiffnessrqfrontaxle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.400000
    }

    /// Read LevelCtrlModeRq signal from can frame
    #[allow(dead_code)]
    pub fn levelctrlmoderq(&self) -> LevelCtrlModeRq2362638078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LevelCtrlModeRq2362638078::from((((frame_payload >> 16) & 0xF) as f64) as u64)
    }

    /// Command signal to activate a level of the rear axle programmed and/or memorised in the ECU.
    #[allow(dead_code)]
    pub fn nominallevelrqrearaxle(&self) -> NominalLevelRqRearAxle2362638078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        NominalLevelRqRearAxle2362638078::from((((frame_payload >> 12) & 0xF) as f64) as u64)
    }

    /// Read NominalLevelRqFrontAxle signal from can frame
    #[allow(dead_code)]
    pub fn nominallevelrqfrontaxle(&self) -> NominalLevelRqFrontAxle2362638078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        NominalLevelRqFrontAxle2362638078::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// Read KneelingCtrlModeRq signal from can frame
    #[allow(dead_code)]
    pub fn kneelingctrlmoderq(&self) -> KneelingCtrlModeRq2362638078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        KneelingCtrlModeRq2362638078::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Read KneelingRqRightSide signal from can frame
    #[allow(dead_code)]
    pub fn kneelingrqrightside(&self) -> KneelingRqRightSide2362638078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        KneelingRqRightSide2362638078::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Read KneelingRqLeftSide signal from can frame
    #[allow(dead_code)]
    pub fn kneelingrqleftside(&self) -> KneelingRqLeftSide2362638078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        KneelingRqLeftSide2362638078::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Read AutomaticTractionHelp signal from can frame
    #[allow(dead_code)]
    pub fn automatictractionhelp(&self) -> AutomaticTractionHelp2362638078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AutomaticTractionHelp2362638078::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// Signal to command the position / load condition of lift / tag axle #2.
    #[allow(dead_code)]
    pub fn liftaxle2poscmd(&self) -> LiftAxle2PosCmd2362638078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LiftAxle2PosCmd2362638078::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Signal to command the position/load condition of lift/tag axle #1.
    #[allow(dead_code)]
    pub fn liftaxle1poscmd(&self) -> LiftAxle1PosCmd2362638078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LiftAxle1PosCmd2362638078::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }
}

/// Air Suspension Control 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Asc1 {
    frame_payload: Vec<u8>,
}

impl Asc1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Asc1 {
        Asc1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Asc1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365479678 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Asc1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Signal which indicates that the air suspension control cannot perform a request due to the operating conditions.
    #[allow(dead_code)]
    pub fn sspensionctrlrefusalinformation(&self) -> SspensionCtrlRefusalInformation2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SspensionCtrlRefusalInformation2365479678::from((((frame_payload >> 56) & 0xF) as f64) as u64)
    }

    /// Signal which indicates that the suspension system is controlled by remote control #2.
    #[allow(dead_code)]
    pub fn suspensionremotectrl2(&self) -> SuspensionRemoteCtrl22365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SuspensionRemoteCtrl22365479678::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that the suspension system is controlled by remote control #1.
    #[allow(dead_code)]
    pub fn suspensionremotectrl1(&self) -> SuspensionRemoteCtrl12365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SuspensionRemoteCtrl12365479678::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that the vehicle height at the rear axle (SPNs 1723 and 1724) is within the bumper range.
    #[allow(dead_code)]
    pub fn rearaxleinbumperrange(&self) -> RearAxleInBumperRange2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RearAxleInBumperRange2365479678::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that the vehicle height at the front axle (SPNs 1721 and 1722) is within the bumper range.
    #[allow(dead_code)]
    pub fn frontaxleinbumperrange(&self) -> FrontAxleInBumperRange2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FrontAxleInBumperRange2365479678::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Signal which indicates that the doors may be opened.
    #[allow(dead_code)]
    pub fn doorrelease(&self) -> DoorRelease2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        DoorRelease2365479678::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Signal which indicates whether vehicle motion is inhibited.
    #[allow(dead_code)]
    pub fn vehiclemotioninhibit(&self) -> VehicleMotionInhibit2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VehicleMotionInhibit2365479678::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// The signal which indicates the status of the security device.
    #[allow(dead_code)]
    pub fn securitydevice(&self) -> SecurityDevice2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SecurityDevice2365479678::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Read LevelCtrlMode signal from can frame
    #[allow(dead_code)]
    pub fn levelctrlmode(&self) -> LevelCtrlMode2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LevelCtrlMode2365479678::from((((frame_payload >> 28) & 0xF) as f64) as u64)
    }

    /// Read KneelingInformation signal from can frame
    #[allow(dead_code)]
    pub fn kneelinginformation(&self) -> KneelingInformation2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        KneelingInformation2365479678::from((((frame_payload >> 24) & 0xF) as f64) as u64)
    }

    /// Read LiftingCtrlModeRearAxle signal from can frame
    #[allow(dead_code)]
    pub fn liftingctrlmoderearaxle(&self) -> LiftingCtrlModeRearAxle2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LiftingCtrlModeRearAxle2365479678::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Read LiftingCtrlModeFrontAxle signal from can frame
    #[allow(dead_code)]
    pub fn liftingctrlmodefrontaxle(&self) -> LiftingCtrlModeFrontAxle2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LiftingCtrlModeFrontAxle2365479678::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Read LoweringCtrlModeRearAxle signal from can frame
    #[allow(dead_code)]
    pub fn loweringctrlmoderearaxle(&self) -> LoweringCtrlModeRearAxle2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LoweringCtrlModeRearAxle2365479678::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Read LoweringCtrlModeFrontAxle signal from can frame
    #[allow(dead_code)]
    pub fn loweringctrlmodefrontaxle(&self) -> LoweringCtrlModeFrontAxle2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LoweringCtrlModeFrontAxle2365479678::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Signal which indicates whether the actual height of the rear axle is above the nominal (desired) level of the rear axle.
    #[allow(dead_code)]
    pub fn abovenominallevelrearaxle(&self) -> AboveNominalLevelRearAxle2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AboveNominalLevelRearAxle2365479678::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// Signal which indicates whether the actual height of the front axle is above the nominal (desired) level of the front axle.
    #[allow(dead_code)]
    pub fn abovenominallevelfrontaxle(&self) -> AboveNominalLevelFrontAxle2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AboveNominalLevelFrontAxle2365479678::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Signal which indicates whether the actual height of the rear axle is below the nominal (desired) level for the rear axle.
    #[allow(dead_code)]
    pub fn belownominallevelrearaxle(&self) -> BelowNominalLevelRearAxle2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BelowNominalLevelRearAxle2365479678::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Signal which indicates whether the actual height of the front axle is below the nominal (desired) level for the front axle.
    #[allow(dead_code)]
    pub fn belownominallevelfrontaxle(&self) -> BelowNominalLevelFrontAxle2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        BelowNominalLevelFrontAxle2365479678::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the nominal (desired) height of the rear axle to be controlled by the suspension system.
    #[allow(dead_code)]
    pub fn nominallevelrearaxle(&self) -> NominalLevelRearAxle2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        NominalLevelRearAxle2365479678::from((((frame_payload >> 4) & 0xF) as f64) as u64)
    }

    /// Signal which indicates the nominal (desired) height of the front axle to be controlled by the suspension system.
    #[allow(dead_code)]
    pub fn nominallevelfrontaxle(&self) -> NominalLevelFrontAxle2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        NominalLevelFrontAxle2365479678::from(((frame_payload & 0xF) as f64) as u64)
    }

    /// Signal which indicates the position / load condition of lift axle / tag axle #2.
    #[allow(dead_code)]
    pub fn liftaxle2pos(&self) -> LiftAxle2Pos2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LiftAxle2Pos2365479678::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the position / load condition of lift axle / tag axle #1.
    #[allow(dead_code)]
    pub fn liftaxle1pos(&self) -> LiftAxle1Pos2365479678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LiftAxle1Pos2365479678::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }
}

/// Alternator Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct As {
    frame_payload: Vec<u8>,
}

impl As {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> As {
        As { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = As, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566837758 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| As::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Alternator 4 operating status.
    #[allow(dead_code)]
    pub fn alt4status(&self) -> Alt4Status2566837758 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Alt4Status2566837758::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Alternator 3 operating status.
    #[allow(dead_code)]
    pub fn alt3status(&self) -> Alt3Status2566837758 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Alt3Status2566837758::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Alternator 2 operating status.
    #[allow(dead_code)]
    pub fn alt2status(&self) -> Alt2Status2566837758 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Alt2Status2566837758::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Alternator 1 operating status.
    #[allow(dead_code)]
    pub fn alt1status(&self) -> Alt1Status2566837758 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Alt1Status2566837758::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Actual rotation speed of the alternator.
    #[allow(dead_code)]
    pub fn altspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.500000
    }
}

/// Auxiliary Pressures
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ap {
    frame_payload: Vec<u8>,
}

impl Ap {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ap {
        Ap { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ap, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633922558 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ap::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Identifies the current absolute pressure (relative to 0 pressure) that is configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxabspressreading(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.500000
    }

    /// Identifies the current gage pressure (relative to atmosphere) that is configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxgagepressreading1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.500000
    }

    /// Identifies the current vacuum pressure (relative to atmosphere) that is configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxvacuumpressreading(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.500000
    }
}

/// Ambient Conditions 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Amb2 {
    frame_payload: Vec<u8>,
}

impl Amb2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Amb2 {
        Amb2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Amb2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566775038 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Amb2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This is the maximum value which can be reported by the sensor for the solar intensity.
    #[allow(dead_code)]
    pub fn solarsensormax(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.400000
    }

    /// This is the solar radiation (power density) falling on the vehicle in percent of the maximum sensor value (SPN 2611).
    #[allow(dead_code)]
    pub fn solarintensitypercent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }
}

/// Working Set Member
#[allow(dead_code)]
#[derive(Debug)]
pub struct Wsmem {
    frame_payload: Vec<u8>,
}

impl Wsmem {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Wsmem {
        Wsmem { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Wsmem, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633895166 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Wsmem::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read ArbitraryAddressCapable signal from can frame
    #[allow(dead_code)]
    pub fn arbitraryaddresscapable(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 63) & 0x1) as f64
    }

    /// 0 = Global; 
    ///    1  = On-Highway; 
    ///    2  = Agricultural and Forestry; 
    ///    3  = Construction; 
    ///    4  = Marine;
    ///    5  = Industrial - Process
    ///           Control - Stationary (Gen-Sets)
    ///    6  = Reserve for SAE
    ///    7  = Reserve for SAE
    #[allow(dead_code)]
    pub fn industrygroup(&self) -> IndustryGroup2633895166 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        IndustryGroup2633895166::from((((frame_payload >> 60) & 0x7) as f64) as u64)
    }

    /// Read VehicleSystemInstance signal from can frame
    #[allow(dead_code)]
    pub fn vehiclesysteminstance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xF) as f64
    }

    /// Read VehicleSystem signal from can frame
    #[allow(dead_code)]
    pub fn vehiclesystem(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 49) & 0x7F) as f64
    }

    /// Read Function signal from can frame
    #[allow(dead_code)]
    pub fn function(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64
    }

    /// Read FunctionInstance signal from can frame
    #[allow(dead_code)]
    pub fn functioninstance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 35) & 0x1F) as f64
    }

    /// Read ECUInstance signal from can frame
    #[allow(dead_code)]
    pub fn ecuinstance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0x7) as f64
    }

    /// Assigned by NMEA 2000 Committee
    #[allow(dead_code)]
    pub fn manufacturercode(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 21) & 0x7FF) as f64
    }

    /// Read IdentityNumber signal from can frame
    #[allow(dead_code)]
    pub fn identitynumber(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0x1FFFFF) as f64
    }
}

/// Test results for non-continously monitored systems.
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm8 {
    frame_payload: Vec<u8>,
}

impl Dm8 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm8 {
        Dm8 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm8, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566836478 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm8::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The threshold which the test value must be above to pass the test.
    #[allow(dead_code)]
    pub fn testlimitminimum(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// The threshold which the test value must be below to pass the test.
    #[allow(dead_code)]
    pub fn testlimitmaximum(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// The test value collected during the test.
    #[allow(dead_code)]
    pub fn testvalue(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Identifies the non-continously monitored component identifier that was tested.
    #[allow(dead_code)]
    pub fn testtype(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Designates the test to be run.
    #[allow(dead_code)]
    pub fn testidentifier(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Command non-continously monitored test
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm7 {
    frame_payload: Vec<u8>,
}

impl Dm7 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm7 {
        Dm7 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm7, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565078782 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm7::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Designates the test to be run.
    #[allow(dead_code)]
    pub fn testidentifier(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Pending DTCs
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm6 {
    frame_payload: Vec<u8>,
}

impl Dm6 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm6 {
        Dm6 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm6, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566836222 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm6::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 144) & 0xFFFF) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 112) & 0xFFFF) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 80) & 0xFFFF) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier5(&self) -> FailureModeIdentifier52566836222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier52566836222::from((((frame_payload >> 160) & 0x1F) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier4(&self) -> FailureModeIdentifier42566836222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier42566836222::from((((frame_payload >> 128) & 0x1F) as f64) as u64)
    }

    /// This parameter provides the capability to flash the RSL (SPN 3039).
    #[allow(dead_code)]
    pub fn flashredstoplamp(&self) -> FlashRedStopLamp2566836222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashRedStopLamp2566836222::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the engine protect lamp (SPN 3041).
    #[allow(dead_code)]
    pub fn flashprotectlamp(&self) -> FlashProtectLamp2566836222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashProtectLamp2566836222::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the MIL (SPN 3038).
    #[allow(dead_code)]
    pub fn flashmalfuncindicatorlamp(&self) -> FlashMalfuncIndicatorLamp2566836222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashMalfuncIndicatorLamp2566836222::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the AWL (SPN 3040). 
    #[allow(dead_code)]
    pub fn flashamberwarninglamp(&self) -> FlashAmberWarningLamp2566836222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashAmberWarningLamp2566836222::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier3(&self) -> FailureModeIdentifier32566836222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier32566836222::from((((frame_payload >> 96) & 0x1F) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier2(&self) -> FailureModeIdentifier22566836222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier22566836222::from((((frame_payload >> 64) & 0x1F) as f64) as u64)
    }

    /// Read SPNConversionMethod5 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 175) & 0x1) as f64
    }

    /// Read SPNConversionMethod4 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 143) & 0x1) as f64
    }

    /// Read SPNConversionMethod3 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 111) & 0x1) as f64
    }

    /// Read SPNConversionMethod2 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 79) & 0x1) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 168) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 136) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 104) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 72) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x7F) as f64
    }

    /// Read SPNConversionMethod1 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 47) & 0x1) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier1(&self) -> FailureModeIdentifier12566836222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier12566836222::from((((frame_payload >> 32) & 0x1F) as f64) as u64)
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// A lamp used to relay only emissions-related trouble code information.
    #[allow(dead_code)]
    pub fn malfunctionindicatorlampstatus(&self) -> MalfunctionIndicatorLampStatus2566836222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MalfunctionIndicatorLampStatus2566836222::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// This lamp is uesed to relay trouble code information that is of a severe enought condition that it warrants stopping the vehicle.
    #[allow(dead_code)]
    pub fn redstoplampstate(&self) -> RedStopLampState2566836222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RedStopLampState2566836222::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code information that is reporting a problem with the vehicle system but the vehicle need
    /// not be immediately stopped.
    #[allow(dead_code)]
    pub fn amberwarninglampstatus(&self) -> AmberWarningLampStatus2566836222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AmberWarningLampStatus2566836222::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code informatio that is reporting a problem with a vehicle system that is most
    /// probably not electronic subsystem related.
    #[allow(dead_code)]
    pub fn protectlampstatus(&self) -> ProtectLampStatus2566836222 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ProtectLampStatus2566836222::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 165) & 0x7) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 133) & 0x7) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 101) & 0x7) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 69) & 0x7) as f64
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 37) & 0x7) as f64
    }
}

/// Diagnostic readiness 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm5 {
    frame_payload: Vec<u8>,
}

impl Dm5 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm5 {
        Dm5 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm5, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566835966 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm5::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read MisfireMonitoringSupport signal from can frame
    #[allow(dead_code)]
    pub fn misfiremonitoringsupport(&self) -> MisfireMonitoringSupport2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MisfireMonitoringSupport2566835966::from((((frame_payload >> 24) & 0x1) as f64) as u64)
    }

    /// Identifies the OBD compliance capabilityof the responding controller.
    #[allow(dead_code)]
    pub fn obdcompliance(&self) -> ObdCompliance2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ObdCompliance2566835966::from((((frame_payload >> 16) & 0xFF) as f64) as u64)
    }

    /// Identifies the number of previously active trouble codes that are present in a specific controller.
    #[allow(dead_code)]
    pub fn previouslyactivetroublecodes(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Identifies the number of active trouble codes that are present in a specific controller.
    #[allow(dead_code)]
    pub fn activetroublecodes(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }

    /// Read SecondAirSystemMonStatus signal from can frame
    #[allow(dead_code)]
    pub fn secondairsystemmonstatus(&self) -> SecondAirSystemMonStatus2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SecondAirSystemMonStatus2566835966::from((((frame_payload >> 51) & 0x1) as f64) as u64)
    }

    /// Read EvaporativeSystemMonStatus signal from can frame
    #[allow(dead_code)]
    pub fn evaporativesystemmonstatus(&self) -> EvaporativeSystemMonStatus2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EvaporativeSystemMonStatus2566835966::from((((frame_payload >> 50) & 0x1) as f64) as u64)
    }

    /// Read ACSystemRefrigerantMonStatus signal from can frame
    #[allow(dead_code)]
    pub fn acsystemrefrigerantmonstatus(&self) -> AcSystemRefrigerantMonStatus2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AcSystemRefrigerantMonStatus2566835966::from((((frame_payload >> 52) & 0x1) as f64) as u64)
    }

    /// Read OxygenSensorHeaterMonStatus signal from can frame
    #[allow(dead_code)]
    pub fn oxygensensorheatermonstatus(&self) -> OxygenSensorHeaterMonStatus2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OxygenSensorHeaterMonStatus2566835966::from((((frame_payload >> 54) & 0x1) as f64) as u64)
    }

    /// Read OxygenSensorMonStatus signal from can frame
    #[allow(dead_code)]
    pub fn oxygensensormonstatus(&self) -> OxygenSensorMonStatus2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OxygenSensorMonStatus2566835966::from((((frame_payload >> 53) & 0x1) as f64) as u64)
    }

    /// Read EGRSystemMonitoringStatus signal from can frame
    #[allow(dead_code)]
    pub fn egrsystemmonitoringstatus(&self) -> EgrSystemMonitoringStatus2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EgrSystemMonitoringStatus2566835966::from((((frame_payload >> 55) & 0x1) as f64) as u64)
    }

    /// Read CatalystMonStatus signal from can frame
    #[allow(dead_code)]
    pub fn catalystmonstatus(&self) -> CatalystMonStatus2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CatalystMonStatus2566835966::from((((frame_payload >> 48) & 0x1) as f64) as u64)
    }

    /// Read ColdStartAidSystemMonStatus signal from can frame
    #[allow(dead_code)]
    pub fn coldstartaidsystemmonstatus(&self) -> ColdStartAidSystemMonStatus2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ColdStartAidSystemMonStatus2566835966::from((((frame_payload >> 56) & 0x1) as f64) as u64)
    }

    /// Read HeatedCatalystMonStatus signal from can frame
    #[allow(dead_code)]
    pub fn heatedcatalystmonstatus(&self) -> HeatedCatalystMonStatus2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HeatedCatalystMonStatus2566835966::from((((frame_payload >> 49) & 0x1) as f64) as u64)
    }

    /// Read CatalystMonSupp signal from can frame
    #[allow(dead_code)]
    pub fn catalystmonsupp(&self) -> CatalystMonSupp2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CatalystMonSupp2566835966::from((((frame_payload >> 32) & 0x1) as f64) as u64)
    }

    /// Read ColdStartAidSystemMonSupp signal from can frame
    #[allow(dead_code)]
    pub fn coldstartaidsystemmonsupp(&self) -> ColdStartAidSystemMonSupp2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ColdStartAidSystemMonSupp2566835966::from((((frame_payload >> 40) & 0x1) as f64) as u64)
    }

    /// Read HeatedCatalystMonSupp signal from can frame
    #[allow(dead_code)]
    pub fn heatedcatalystmonsupp(&self) -> HeatedCatalystMonSupp2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HeatedCatalystMonSupp2566835966::from((((frame_payload >> 33) & 0x1) as f64) as u64)
    }

    /// Read EvaporativeSystemMonSupp signal from can frame
    #[allow(dead_code)]
    pub fn evaporativesystemmonsupp(&self) -> EvaporativeSystemMonSupp2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EvaporativeSystemMonSupp2566835966::from((((frame_payload >> 34) & 0x1) as f64) as u64)
    }

    /// Read SecondAirSystemMonSupp signal from can frame
    #[allow(dead_code)]
    pub fn secondairsystemmonsupp(&self) -> SecondAirSystemMonSupp2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SecondAirSystemMonSupp2566835966::from((((frame_payload >> 35) & 0x1) as f64) as u64)
    }

    /// Read ACSystemRefrigerantMonSupp signal from can frame
    #[allow(dead_code)]
    pub fn acsystemrefrigerantmonsupp(&self) -> AcSystemRefrigerantMonSupp2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AcSystemRefrigerantMonSupp2566835966::from((((frame_payload >> 36) & 0x1) as f64) as u64)
    }

    /// Read OxygenSensorMonSupp signal from can frame
    #[allow(dead_code)]
    pub fn oxygensensormonsupp(&self) -> OxygenSensorMonSupp2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OxygenSensorMonSupp2566835966::from((((frame_payload >> 37) & 0x1) as f64) as u64)
    }

    /// Read OxygenSensorHeaterMonSupp signal from can frame
    #[allow(dead_code)]
    pub fn oxygensensorheatermonsupp(&self) -> OxygenSensorHeaterMonSupp2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        OxygenSensorHeaterMonSupp2566835966::from((((frame_payload >> 38) & 0x1) as f64) as u64)
    }

    /// Read EGRSystemMonitoringSupp signal from can frame
    #[allow(dead_code)]
    pub fn egrsystemmonitoringsupp(&self) -> EgrSystemMonitoringSupp2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EgrSystemMonitoringSupp2566835966::from((((frame_payload >> 39) & 0x1) as f64) as u64)
    }

    /// Read MisfireMonitoringStatus signal from can frame
    #[allow(dead_code)]
    pub fn misfiremonitoringstatus(&self) -> MisfireMonitoringStatus2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MisfireMonitoringStatus2566835966::from((((frame_payload >> 28) & 0x1) as f64) as u64)
    }

    /// Read ComprehensiveCompMonStatus signal from can frame
    #[allow(dead_code)]
    pub fn comprehensivecompmonstatus(&self) -> ComprehensiveCompMonStatus2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ComprehensiveCompMonStatus2566835966::from((((frame_payload >> 30) & 0x1) as f64) as u64)
    }

    /// Read FuelSystemMonitoringStatus signal from can frame
    #[allow(dead_code)]
    pub fn fuelsystemmonitoringstatus(&self) -> FuelSystemMonitoringStatus2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FuelSystemMonitoringStatus2566835966::from((((frame_payload >> 29) & 0x1) as f64) as u64)
    }

    /// Read ComprehensiveComponentMonSupp signal from can frame
    #[allow(dead_code)]
    pub fn comprehensivecomponentmonsupp(&self) -> ComprehensiveComponentMonSupp2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ComprehensiveComponentMonSupp2566835966::from((((frame_payload >> 26) & 0x1) as f64) as u64)
    }

    /// Read FuelSystemMonitoringSupport signal from can frame
    #[allow(dead_code)]
    pub fn fuelsystemmonitoringsupport(&self) -> FuelSystemMonitoringSupport2566835966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FuelSystemMonitoringSupport2566835966::from((((frame_payload >> 25) & 0x1) as f64) as u64)
    }
}

/// Freeze frame parameters
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm4 {
    frame_payload: Vec<u8>,
}

impl Dm4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm4 {
        Dm4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566835710 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0x7F) as f64
    }

    /// Read SPNConversionMethod1 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 39) & 0x1) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier1(&self) -> FailureModeIdentifier12566835710 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier12566835710::from((((frame_payload >> 24) & 0x1F) as f64) as u64)
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64
    }

    /// The freeze frame length shall be equal to the number of bytes in the required parameters plus the number of bytes in the
    /// manufacturer specific parameters.
    #[allow(dead_code)]
    pub fn freezeframelength(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }

    /// Actual engine speed which is calculated over a minimum crankshaft angle of 720 degrees divided by the number of cylinders.
    #[allow(dead_code)]
    pub fn engspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFFFF) as f64 * 0.125000
    }

    /// State signal which indicates which engine torque mode is currently generating, limiting, or controlling the torque.
    #[allow(dead_code)]
    pub fn engtorquemode(&self) -> EngTorqueMode2566835710 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EngTorqueMode2566835710::from((((frame_payload >> 40) & 0xF) as f64) as u64)
    }

    /// Gage pressure of air measured downstream on the compressor discharge side of the turbocharger.
    #[allow(dead_code)]
    pub fn engturboboostpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 2.000000
    }

    /// Speed of the vehicle as calculated from wheel or tailshaft speed.
    #[allow(dead_code)]
    pub fn wheelbasedvehiclespeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 88) & 0xFFFF) as f64 * 0.003906
    }

    /// Read EngPercentLoadAtCurrentSpeed signal from can frame
    #[allow(dead_code)]
    pub fn engpercentloadatcurrentspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 72) & 0xFF) as f64
    }

    /// Read EngineCoolantTemperature signal from can frame
    #[allow(dead_code)]
    pub fn enginecoolanttemperature(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 80) & 0xFF) as f64 + -40f64
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 29) & 0x7) as f64
    }
}

/// Diagnostic data clear/reset of previously active DTCs.
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm3 {
    frame_payload: Vec<u8>,
}

impl Dm3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm3 {
        Dm3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566835454 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm3::new(frame.data().to_vec()));
        Box::new(f)
    }
}

/// Expanded freeze frame.
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm25 {
    frame_payload: Vec<u8>,
}

impl Dm25 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm25 {
        Dm25 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm25, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566764542 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm25::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0x7F) as f64
    }

    /// Read SPNConversionMethod1 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 39) & 0x1) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier1(&self) -> FailureModeIdentifier12566764542 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier12566764542::from((((frame_payload >> 24) & 0x1F) as f64) as u64)
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64
    }

    /// The freeze frame length shall be equal to the number of bytes in the required parameters plus the number of bytes in the
    /// manufacturer specific parameters.
    #[allow(dead_code)]
    pub fn expandedfreezeframelength(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 29) & 0x7) as f64
    }
}

/// SPN Support. This message is used to identify those SPNs supported by the product for freeze frames and data stream messages.
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm24 {
    frame_payload: Vec<u8>,
}

impl Dm24 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm24 {
        Dm24 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm24, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566764286 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm24::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter defines the SPN(s) that is/are supported for the freeze frame and/or data stream information.
    #[allow(dead_code)]
    pub fn spnsupported1high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 21) & 0x7) as f64
    }

    /// This parameter defines whether the applicable parameter (that is the SPN) is supported in the freeze frame, the data stream or both the freeze frame and data stream.
    #[allow(dead_code)]
    pub fn spnsupporttypestr3(&self) -> SpnSupportTypeStr32566764286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SpnSupportTypeStr32566764286::from((((frame_payload >> 82) & 0x1) as f64) as u64)
    }

    /// This parameter defines whether the applicable parameter (that is the SPN) is supported in the freeze frame, the data stream or both the freeze frame and data stream.
    #[allow(dead_code)]
    pub fn spnsupporttypestr2(&self) -> SpnSupportTypeStr22566764286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SpnSupportTypeStr22566764286::from((((frame_payload >> 81) & 0x1) as f64) as u64)
    }

    /// This parameter defines whether the applicable parameter (that is the SPN) is supported in the freeze frame, the data stream or both the freeze frame and data stream.
    #[allow(dead_code)]
    pub fn spnsupporttypeeff3(&self) -> SpnSupportTypeEff32566764286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SpnSupportTypeEff32566764286::from((((frame_payload >> 80) & 0x1) as f64) as u64)
    }

    /// This parameter defines whether the applicable parameter (that is the SPN) is supported in the freeze frame, the data stream or both the freeze frame and data stream.
    #[allow(dead_code)]
    pub fn spnsupporttypeeff2(&self) -> SpnSupportTypeEff22566764286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SpnSupportTypeEff22566764286::from((((frame_payload >> 48) & 0x1) as f64) as u64)
    }

    /// This parameter defines whether the applicable parameter (that is the SPN) is supported in the freeze frame, the data stream or both the freeze frame and data stream.
    #[allow(dead_code)]
    pub fn spnsupporttypeds3(&self) -> SpnSupportTypeDs32566764286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SpnSupportTypeDs32566764286::from((((frame_payload >> 50) & 0x1) as f64) as u64)
    }

    /// This parameter defines whether the applicable parameter (that is the SPN) is supported in the freeze frame, the data stream or both the freeze frame and data stream.
    #[allow(dead_code)]
    pub fn spnsupporttypeds2(&self) -> SpnSupportTypeDs22566764286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SpnSupportTypeDs22566764286::from((((frame_payload >> 49) & 0x1) as f64) as u64)
    }

    /// This parameter defines the SPN(s) that is/are supported for the freeze frame and/or data stream information.
    #[allow(dead_code)]
    pub fn spnsupported3high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 85) & 0x7) as f64
    }

    /// This parameter defines the SPN(s) that is/are supported for the freeze frame and/or data stream information.
    #[allow(dead_code)]
    pub fn spnsupported2high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 53) & 0x7) as f64
    }

    /// This parameter defines the SPN(s) that is/are supported for the freeze frame and/or data stream information.
    #[allow(dead_code)]
    pub fn spnsupported3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFF) as f64
    }

    /// This parameter defines the SPN(s) that is/are supported for the freeze frame and/or data stream information.
    #[allow(dead_code)]
    pub fn spnsupported2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// The number of data bytes associated with the SPN in the Freeze Frame.
    #[allow(dead_code)]
    pub fn spndatalength3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 88) & 0xFF) as f64
    }

    /// This parameter defines whether the applicable parameter (that is the SPN) is supported in the freeze frame, the data stream or both the freeze frame and data stream.
    #[allow(dead_code)]
    pub fn spnsupporttypestr1(&self) -> SpnSupportTypeStr12566764286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SpnSupportTypeStr12566764286::from((((frame_payload >> 18) & 0x1) as f64) as u64)
    }

    /// This parameter defines whether the applicable parameter (that is the SPN) is supported in the freeze frame, the data stream or both the freeze frame and data stream.
    #[allow(dead_code)]
    pub fn spnsupporttypeds1(&self) -> SpnSupportTypeDs12566764286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SpnSupportTypeDs12566764286::from((((frame_payload >> 17) & 0x1) as f64) as u64)
    }

    /// This parameter defines whether the applicable parameter (that is the SPN) is supported in the freeze frame, the data stream or both the freeze frame and data stream.
    #[allow(dead_code)]
    pub fn spnsupporttypeeff1(&self) -> SpnSupportTypeEff12566764286 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SpnSupportTypeEff12566764286::from((((frame_payload >> 16) & 0x1) as f64) as u64)
    }

    /// The number of data bytes associated with the SPN in the Freeze Frame.
    #[allow(dead_code)]
    pub fn spndatalength2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64
    }

    /// The number of data bytes associated with the SPN in the Freeze Frame.
    #[allow(dead_code)]
    pub fn spndatalength1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// This parameter defines the SPN(s) that is/are supported for the freeze frame and/or data stream information.
    #[allow(dead_code)]
    pub fn spnsupported1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Previously active emission related faults.
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm23 {
    frame_payload: Vec<u8>,
}

impl Dm23 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm23 {
        Dm23 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm23, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2555576062 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm23::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter provides the capability to flash the RSL (SPN 3039).
    #[allow(dead_code)]
    pub fn flashredstoplamp(&self) -> FlashRedStopLamp2555576062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashRedStopLamp2555576062::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the engine protect lamp (SPN 3041).
    #[allow(dead_code)]
    pub fn flashprotectlamp(&self) -> FlashProtectLamp2555576062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashProtectLamp2555576062::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the MIL (SPN 3038).
    #[allow(dead_code)]
    pub fn flashmalfuncindicatorlamp(&self) -> FlashMalfuncIndicatorLamp2555576062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashMalfuncIndicatorLamp2555576062::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 144) & 0xFFFF) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 112) & 0xFFFF) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 80) & 0xFFFF) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// This parameter provides the capability to flash the AWL (SPN 3040). 
    #[allow(dead_code)]
    pub fn flashamberwarninglamp(&self) -> FlashAmberWarningLamp2555576062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashAmberWarningLamp2555576062::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier5(&self) -> FailureModeIdentifier52555576062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier52555576062::from((((frame_payload >> 160) & 0x1F) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier4(&self) -> FailureModeIdentifier42555576062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier42555576062::from((((frame_payload >> 128) & 0x1F) as f64) as u64)
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x7F) as f64
    }

    /// Read SPNConversionMethod1 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 47) & 0x1) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier1(&self) -> FailureModeIdentifier12555576062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier12555576062::from((((frame_payload >> 32) & 0x1F) as f64) as u64)
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// A lamp used to relay only emissions-related trouble code information.
    #[allow(dead_code)]
    pub fn malfunctionindicatorlampstatus(&self) -> MalfunctionIndicatorLampStatus2555576062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MalfunctionIndicatorLampStatus2555576062::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// This lamp is uesed to relay trouble code information that is of a severe enought condition that it warrants stopping the vehicle.
    #[allow(dead_code)]
    pub fn redstoplampstate(&self) -> RedStopLampState2555576062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RedStopLampState2555576062::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code information that is reporting a problem with the vehicle system but the vehicle need
    /// not be immediately stopped.
    #[allow(dead_code)]
    pub fn amberwarninglampstatus(&self) -> AmberWarningLampStatus2555576062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AmberWarningLampStatus2555576062::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code informatio that is reporting a problem with a vehicle system that is most
    /// probably not electronic subsystem related.
    #[allow(dead_code)]
    pub fn protectlampstatus(&self) -> ProtectLampStatus2555576062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ProtectLampStatus2555576062::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier3(&self) -> FailureModeIdentifier32555576062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier32555576062::from((((frame_payload >> 96) & 0x1F) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier2(&self) -> FailureModeIdentifier22555576062 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier22555576062::from((((frame_payload >> 64) & 0x1F) as f64) as u64)
    }

    /// Read SPNConversionMethod5 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 175) & 0x1) as f64
    }

    /// Read SPNConversionMethod4 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 143) & 0x1) as f64
    }

    /// Read SPNConversionMethod3 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 111) & 0x1) as f64
    }

    /// Read SPNConversionMethod2 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 79) & 0x1) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 168) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 136) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 104) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 72) & 0x7F) as f64
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 165) & 0x7) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 133) & 0x7) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 101) & 0x7) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 69) & 0x7) as f64
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 37) & 0x7) as f64
    }
}

/// Individual Clear/Reset of active and previously active DTC.
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm22 {
    frame_payload: Vec<u8>,
}

impl Dm22 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm22 {
        Dm22 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm22, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2562981630 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm22::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read IndividualDTCClearControlByte signal from can frame
    #[allow(dead_code)]
    pub fn individualdtcclearcontrolbyte(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }

    /// Read CtrlByteIndicIndividualDTCClear signal from can frame
    #[allow(dead_code)]
    pub fn ctrlbyteindicindividualdtcclear(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFF) as f64
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 61) & 0x7) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier1(&self) -> FailureModeIdentifier12562981630 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier12562981630::from((((frame_payload >> 56) & 0x1F) as f64) as u64)
    }
}

/// Diagnostic readiness 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm21 {
    frame_payload: Vec<u8>,
}

impl Dm21 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm21 {
        Dm21 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm21, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2562850558 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm21::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Time accumulated since DTCs were cleared (via an external test equipment or possibly, a battery disconnect) (SPN=?).
    #[allow(dead_code)]
    pub fn timesincedtcscleared(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Accumulated count (in minutes) while the MIL is activated (on) (SPN=?).
    #[allow(dead_code)]
    pub fn minutesrunbyenginemilactivated(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Distance accumulated since DTCs were cleared (SPN=?).
    #[allow(dead_code)]
    pub fn distancesincedtcscleared(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// The kilometers accumulated while the MIL is activated (SPN 3060).
    #[allow(dead_code)]
    pub fn distancewhilemilisactivated(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Monitor Performance Ratio
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm20 {
    frame_payload: Vec<u8>,
}

impl Dm20 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm20 {
        Dm20 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm20, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2562916094 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm20::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The number of times a vehicle has been operated that constitutes a driving cycle where this Applicable System Monitor could be operated per regulatory requirements (SPN 3068).
    #[allow(dead_code)]
    pub fn applsysmonitordenominator(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 72) & 0xFFFF) as f64
    }

    /// The number of times a vehicle has been operated such that all conditions necessary for the Applicable System Monitor to detect a malfunction have been encountered (SPN 3067).
    #[allow(dead_code)]
    pub fn applsysmonitornumerator(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFFFF) as f64
    }

    /// Contain the SPN of the system monitor for which Monitor ratio is being reported (SPN 3066).
    #[allow(dead_code)]
    pub fn spnofapplsysmonitor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFF) as f64
    }

    /// Displays the number of times that the vehicle has been operated in the specified OBD monitoring conditions (SPN 3049).
    #[allow(dead_code)]
    pub fn obdmonitoringcondencountered(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// A single counter that defines the number of ignition cycles (SPN 3048).
    #[allow(dead_code)]
    pub fn ignitioncyclecounter(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Previously active diagnostic trouble codes
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm2 {
    frame_payload: Vec<u8>,
}

impl Dm2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm2 {
        Dm2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566835198 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 144) & 0xFFFF) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 112) & 0xFFFF) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 80) & 0xFFFF) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier5(&self) -> FailureModeIdentifier52566835198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier52566835198::from((((frame_payload >> 160) & 0x1F) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier4(&self) -> FailureModeIdentifier42566835198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier42566835198::from((((frame_payload >> 128) & 0x1F) as f64) as u64)
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x7F) as f64
    }

    /// Read SPNConversionMethod1 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 47) & 0x1) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier1(&self) -> FailureModeIdentifier12566835198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier12566835198::from((((frame_payload >> 32) & 0x1F) as f64) as u64)
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// A lamp used to relay only emissions-related trouble code information.
    #[allow(dead_code)]
    pub fn malfunctionindicatorlampstatus(&self) -> MalfunctionIndicatorLampStatus2566835198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MalfunctionIndicatorLampStatus2566835198::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// This lamp is uesed to relay trouble code information that is of a severe enought condition that it warrants stopping the vehicle.
    #[allow(dead_code)]
    pub fn redstoplampstate(&self) -> RedStopLampState2566835198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RedStopLampState2566835198::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code information that is reporting a problem with the vehicle system but the vehicle need
    /// not be immediately stopped.
    #[allow(dead_code)]
    pub fn amberwarninglampstatus(&self) -> AmberWarningLampStatus2566835198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AmberWarningLampStatus2566835198::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code informatio that is reporting a problem with a vehicle system that is most
    /// probably not electronic subsystem related.
    #[allow(dead_code)]
    pub fn protectlampstatus(&self) -> ProtectLampStatus2566835198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ProtectLampStatus2566835198::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier3(&self) -> FailureModeIdentifier32566835198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier32566835198::from((((frame_payload >> 96) & 0x1F) as f64) as u64)
    }

    /// This parameter provides the capability to flash the RSL (SPN 3039).
    #[allow(dead_code)]
    pub fn flashredstoplamp(&self) -> FlashRedStopLamp2566835198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashRedStopLamp2566835198::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the engine protect lamp (SPN 3041).
    #[allow(dead_code)]
    pub fn flashprotectlamp(&self) -> FlashProtectLamp2566835198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashProtectLamp2566835198::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the MIL (SPN 3038).
    #[allow(dead_code)]
    pub fn flashmalfuncindicatorlamp(&self) -> FlashMalfuncIndicatorLamp2566835198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashMalfuncIndicatorLamp2566835198::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the AWL (SPN 3040). 
    #[allow(dead_code)]
    pub fn flashamberwarninglamp(&self) -> FlashAmberWarningLamp2566835198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashAmberWarningLamp2566835198::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier2(&self) -> FailureModeIdentifier22566835198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier22566835198::from((((frame_payload >> 64) & 0x1F) as f64) as u64)
    }

    /// Read SPNConversionMethod5 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 175) & 0x1) as f64
    }

    /// Read SPNConversionMethod4 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 143) & 0x1) as f64
    }

    /// Read SPNConversionMethod3 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 111) & 0x1) as f64
    }

    /// Read SPNConversionMethod2 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 79) & 0x1) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 168) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 136) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 104) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 72) & 0x7F) as f64
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 165) & 0x7) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 133) & 0x7) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 101) & 0x7) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 69) & 0x7) as f64
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 37) & 0x7) as f64
    }
}

/// Calibration Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm19 {
    frame_payload: Vec<u8>,
}

impl Dm19 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm19 {
        Dm19 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm19, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2564030206 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm19::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read CalibrationID4 signal from can frame
    #[allow(dead_code)]
    pub fn calibrationid4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 128) & 0xFFFFFFFF) as f64
    }

    /// Read CalibrationID3 signal from can frame
    #[allow(dead_code)]
    pub fn calibrationid3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 96) & 0xFFFFFFFF) as f64
    }

    /// Read CalibrationID2 signal from can frame
    #[allow(dead_code)]
    pub fn calibrationid2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFFFFFF) as f64
    }

    /// Read CalibrationID1 signal from can frame
    #[allow(dead_code)]
    pub fn calibrationid1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64
    }

    /// Read CalibrationVerificationNumber signal from can frame
    #[allow(dead_code)]
    pub fn calibrationverificationnumber(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64
    }
}

/// Boot Load Data
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm17 {
    frame_payload: Vec<u8>,
}

impl Dm17 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm17 {
        Dm17 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm17, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2564226814 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm17::new(frame.data().to_vec()));
        Box::new(f)
    }
}

/// Binary Data Transfer
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm16 {
    frame_payload: Vec<u8>,
}

impl Dm16 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm16 {
        Dm16 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm16, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2564292350 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm16::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Number of occurance of raw binary data
    #[allow(dead_code)]
    pub fn numberofoccurance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Memory Access Response
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm15 {
    frame_payload: Vec<u8>,
}

impl Dm15 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm15 {
        Dm15 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm15, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2564357886 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm15::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read NumberAllowed signal from can frame
    #[allow(dead_code)]
    pub fn numberallowed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }

    /// Read Seed signal from can frame
    #[allow(dead_code)]
    pub fn seed(&self) -> Seed2564357886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Seed2564357886::from((((frame_payload >> 48) & 0xFFFF) as f64) as u64)
    }

    /// Read EDCP_Extension signal from can frame
    #[allow(dead_code)]
    pub fn edcp_extension(&self) -> EdcpExtension2564357886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        EdcpExtension2564357886::from((((frame_payload >> 40) & 0xFF) as f64) as u64)
    }

    /// Error Indicator/EDC Parameter
    #[allow(dead_code)]
    pub fn errorindicator(&self) -> ErrorIndicator2564357886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ErrorIndicator2564357886::from((((frame_payload >> 16) & 0xFFFFFF) as f64) as u64)
    }

    /// Read Status signal from can frame
    #[allow(dead_code)]
    pub fn status(&self) -> Status2564357886 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Status2564357886::from((((frame_payload >> 9) & 0x7) as f64) as u64)
    }

    /// Read NumberAllowedHigh signal from can frame
    #[allow(dead_code)]
    pub fn numberallowedhigh(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 13) & 0x7) as f64
    }
}

/// Memory Access Request
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm14 {
    frame_payload: Vec<u8>,
}

impl Dm14 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm14 {
        Dm14 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm14, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2564423422 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm14::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Key/User Level
    #[allow(dead_code)]
    pub fn keyoruserlevel(&self) -> KeyOrUserLevel2564423422 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        KeyOrUserLevel2564423422::from((((frame_payload >> 48) & 0xFFFF) as f64) as u64)
    }

    /// Read PointerExtension signal from can frame
    #[allow(dead_code)]
    pub fn pointerextension(&self) -> PointerExtension2564423422 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PointerExtension2564423422::from((((frame_payload >> 40) & 0xFF) as f64) as u64)
    }

    /// Read Pointer signal from can frame
    #[allow(dead_code)]
    pub fn pointer(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFFFF) as f64
    }

    /// Read Command signal from can frame
    #[allow(dead_code)]
    pub fn command(&self) -> Command2564423422 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Command2564423422::from((((frame_payload >> 9) & 0x7) as f64) as u64)
    }

    /// Read PointerType signal from can frame
    #[allow(dead_code)]
    pub fn pointertype(&self) -> PointerType2564423422 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PointerType2564423422::from((((frame_payload >> 12) & 0x1) as f64) as u64)
    }

    /// Length/Number Requested
    #[allow(dead_code)]
    pub fn numberrequested(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }

    /// Length/Number Requested
    #[allow(dead_code)]
    pub fn numberrequestedhigh(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 13) & 0x7) as f64
    }
}

/// Stop start broadcast
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm13 {
    frame_payload: Vec<u8>,
}

impl Dm13 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm13 {
        Dm13 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm13, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2564816638 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm13::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicator to all nodes that the communication ports that have been acted upon by the 'Stop start broadcast'
    /// PGN are remaining in the modified state.
    #[allow(dead_code)]
    pub fn holdsignal(&self) -> HoldSignal2564816638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        HoldSignal2564816638::from((((frame_payload >> 28) & 0xF) as f64) as u64)
    }

    /// Identifies the action to be performed on the SAE J1939 Network #3.
    #[allow(dead_code)]
    pub fn j1939network3(&self) -> J1939Network32564816638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        J1939Network32564816638::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Identifies the action to be performed on the SAE J1939 Network #2.
    #[allow(dead_code)]
    pub fn j1939network2(&self) -> J1939Network22564816638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        J1939Network22564816638::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// Identifies the action to be performed on the ISO9141 communications port.
    #[allow(dead_code)]
    pub fn iso9141(&self) -> Iso91412564816638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Iso91412564816638::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Identifies the action to be performed on the SAE J1850 communications port.
    #[allow(dead_code)]
    pub fn sae_j1850(&self) -> SaeJ18502564816638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SaeJ18502564816638::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Identifies the action to be performed on 'Other, manufacturer specific port' communications port.
    #[allow(dead_code)]
    pub fn manufacturerspecificport(&self) -> ManufacturerSpecificPort2564816638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ManufacturerSpecificPort2564816638::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Identifies the action to be performed on the communications port that this parameter was received.
    #[allow(dead_code)]
    pub fn currentdatalink(&self) -> CurrentDataLink2564816638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        CurrentDataLink2564816638::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Identifies the action to be performed on the SAE J1587 communications port.
    #[allow(dead_code)]
    pub fn sae_j1587(&self) -> SaeJ15872564816638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SaeJ15872564816638::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Identifies the action to be performed on the SAE J1922 communications port.
    #[allow(dead_code)]
    pub fn sae_j1922(&self) -> SaeJ19222564816638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SaeJ19222564816638::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Identifies the action to be performed on the SAE J1939 Network #1, Primary vehicle communications port.
    #[allow(dead_code)]
    pub fn j1939network1(&self) -> J1939Network12564816638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        J1939Network12564816638::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// Read SuspendSignal signal from can frame
    #[allow(dead_code)]
    pub fn suspendsignal(&self) -> SuspendSignal2564816638 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        SuspendSignal2564816638::from((((frame_payload >> 24) & 0xF) as f64) as u64)
    }

    /// Read SuspendDuration signal from can frame
    #[allow(dead_code)]
    pub fn suspendduration(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }
}

/// Emissions-related active diagnostic trouble codes.
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm12 {
    frame_payload: Vec<u8>,
}

impl Dm12 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm12 {
        Dm12 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm12, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566837502 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm12::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 144) & 0xFFFF) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 112) & 0xFFFF) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 80) & 0xFFFF) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// This parameter provides the capability to flash the RSL (SPN 3039).
    #[allow(dead_code)]
    pub fn flashredstoplamp(&self) -> FlashRedStopLamp2566837502 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashRedStopLamp2566837502::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the engine protect lamp (SPN 3041).
    #[allow(dead_code)]
    pub fn flashprotectlamp(&self) -> FlashProtectLamp2566837502 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashProtectLamp2566837502::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier5(&self) -> FailureModeIdentifier52566837502 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier52566837502::from((((frame_payload >> 160) & 0x1F) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier4(&self) -> FailureModeIdentifier42566837502 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier42566837502::from((((frame_payload >> 128) & 0x1F) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier3(&self) -> FailureModeIdentifier32566837502 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier32566837502::from((((frame_payload >> 96) & 0x1F) as f64) as u64)
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x7F) as f64
    }

    /// Read SPNConversionMethod1 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 47) & 0x1) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier1(&self) -> FailureModeIdentifier12566837502 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier12566837502::from((((frame_payload >> 32) & 0x1F) as f64) as u64)
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// A lamp used to relay only emissions-related trouble code information.
    #[allow(dead_code)]
    pub fn malfunctionindicatorlampstatus(&self) -> MalfunctionIndicatorLampStatus2566837502 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MalfunctionIndicatorLampStatus2566837502::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// This lamp is uesed to relay trouble code information that is of a severe enought condition that it warrants stopping the vehicle.
    #[allow(dead_code)]
    pub fn redstoplampstate(&self) -> RedStopLampState2566837502 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RedStopLampState2566837502::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code information that is reporting a problem with the vehicle system but the vehicle need
    /// not be immediately stopped.
    #[allow(dead_code)]
    pub fn amberwarninglampstatus(&self) -> AmberWarningLampStatus2566837502 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AmberWarningLampStatus2566837502::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code informatio that is reporting a problem with a vehicle system that is most
    /// probably not electronic subsystem related.
    #[allow(dead_code)]
    pub fn protectlampstatus(&self) -> ProtectLampStatus2566837502 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ProtectLampStatus2566837502::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the MIL (SPN 3038).
    #[allow(dead_code)]
    pub fn flashmalfuncindicatorlamp(&self) -> FlashMalfuncIndicatorLamp2566837502 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashMalfuncIndicatorLamp2566837502::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the AWL (SPN 3040). 
    #[allow(dead_code)]
    pub fn flashamberwarninglamp(&self) -> FlashAmberWarningLamp2566837502 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashAmberWarningLamp2566837502::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier2(&self) -> FailureModeIdentifier22566837502 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier22566837502::from((((frame_payload >> 64) & 0x1F) as f64) as u64)
    }

    /// Read SPNConversionMethod5 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 175) & 0x1) as f64
    }

    /// Read SPNConversionMethod4 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 143) & 0x1) as f64
    }

    /// Read SPNConversionMethod3 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 111) & 0x1) as f64
    }

    /// Read SPNConversionMethod2 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 79) & 0x1) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 168) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 136) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 104) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 72) & 0x7F) as f64
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 165) & 0x7) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 133) & 0x7) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 101) & 0x7) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 69) & 0x7) as f64
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 37) & 0x7) as f64
    }
}

/// Diagnostic data clear/Reset for active DTCs
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm11 {
    frame_payload: Vec<u8>,
}

impl Dm11 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm11 {
        Dm11 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm11, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566837246 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm11::new(frame.data().to_vec()));
        Box::new(f)
    }
}

/// Non-continously monitored systems test identifiers support
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm10 {
    frame_payload: Vec<u8>,
}

impl Dm10 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm10 {
        Dm10 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm10, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566836990 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm10::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicates the test identifiers that the controller supports.
    #[allow(dead_code)]
    pub fn testidentifiersupported(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFFFFFFFFFE) as f64
    }
}

/// Active diagnostic trouble codes
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm1 {
    frame_payload: Vec<u8>,
}

impl Dm1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm1 {
        Dm1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566834942 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 144) & 0xFFFF) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 112) & 0xFFFF) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 80) & 0xFFFF) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier5(&self) -> FailureModeIdentifier52566834942 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier52566834942::from((((frame_payload >> 160) & 0x1F) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier4(&self) -> FailureModeIdentifier42566834942 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier42566834942::from((((frame_payload >> 128) & 0x1F) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier3(&self) -> FailureModeIdentifier32566834942 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier32566834942::from((((frame_payload >> 96) & 0x1F) as f64) as u64)
    }

    /// This parameter provides the capability to flash the RSL (SPN 3039).
    #[allow(dead_code)]
    pub fn flashredstoplamp(&self) -> FlashRedStopLamp2566834942 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashRedStopLamp2566834942::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the engine protect lamp (SPN 3041).
    #[allow(dead_code)]
    pub fn flashprotectlamp(&self) -> FlashProtectLamp2566834942 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashProtectLamp2566834942::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the MIL (SPN 3038).
    #[allow(dead_code)]
    pub fn flashmalfuncindicatorlamp(&self) -> FlashMalfuncIndicatorLamp2566834942 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashMalfuncIndicatorLamp2566834942::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the AWL (SPN 3040). 
    #[allow(dead_code)]
    pub fn flashamberwarninglamp(&self) -> FlashAmberWarningLamp2566834942 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashAmberWarningLamp2566834942::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// A lamp used to relay only emissions-related trouble code information.
    #[allow(dead_code)]
    pub fn malfunctionindicatorlampstatus(&self) -> MalfunctionIndicatorLampStatus2566834942 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MalfunctionIndicatorLampStatus2566834942::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code information that is reporting a problem with the vehicle system but the vehicle need
    /// not be immediately stopped.
    #[allow(dead_code)]
    pub fn amberwarninglampstatus(&self) -> AmberWarningLampStatus2566834942 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AmberWarningLampStatus2566834942::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x7F) as f64
    }

    /// Read SPNConversionMethod1 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 47) & 0x1) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier1(&self) -> FailureModeIdentifier12566834942 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier12566834942::from((((frame_payload >> 32) & 0x1F) as f64) as u64)
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// This lamp is uesed to relay trouble code information that is of a severe enought condition that it warrants stopping the vehicle.
    #[allow(dead_code)]
    pub fn redstoplampstate(&self) -> RedStopLampState2566834942 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RedStopLampState2566834942::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code informatio that is reporting a problem with a vehicle system that is most
    /// probably not electronic subsystem related.
    #[allow(dead_code)]
    pub fn protectlampstatus(&self) -> ProtectLampStatus2566834942 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ProtectLampStatus2566834942::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier2(&self) -> FailureModeIdentifier22566834942 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier22566834942::from((((frame_payload >> 64) & 0x1F) as f64) as u64)
    }

    /// Read SPNConversionMethod5 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 175) & 0x1) as f64
    }

    /// Read SPNConversionMethod4 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 143) & 0x1) as f64
    }

    /// Read SPNConversionMethod3 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 111) & 0x1) as f64
    }

    /// Read SPNConversionMethod2 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 79) & 0x1) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 168) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 136) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 104) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 72) & 0x7F) as f64
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 165) & 0x7) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 133) & 0x7) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 101) & 0x7) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 69) & 0x7) as f64
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 37) & 0x7) as f64
    }
}

/// Utility Total AC Reactive Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Utacr {
    frame_payload: Vec<u8>,
}

impl Utacr {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Utacr {
        Utacr { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Utacr, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566780926 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Utacr::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Lead/lag status for utility incomer average power factor.
    #[allow(dead_code)]
    pub fn utlityoverallpowerfactorlagging(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x3) as f64
    }

    /// The average power factor of the utility incomer.
    #[allow(dead_code)]
    pub fn utilityoverallpowerfactor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 + -1f64
    }

    /// The total reactive power delivered by the utility incomer
    #[allow(dead_code)]
    pub fn utilitytotalreactivepower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Utility Total AC Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Utacp {
    frame_payload: Vec<u8>,
}

impl Utacp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Utacp {
        Utacp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Utacp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566781182 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Utacp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The total apparent power delivered by the utility incomer.
    #[allow(dead_code)]
    pub fn utilitytotalapparentpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 + -2000000000f64
    }

    /// Total real power delivered by the utility incomer.
    #[allow(dead_code)]
    pub fn utilitytotalrealpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Utility Total AC Energy
#[allow(dead_code)]
#[derive(Debug)]
pub struct Utace {
    frame_payload: Vec<u8>,
}

impl Utace {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Utace {
        Utace { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Utace, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566778366 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Utace::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The total kilowatt-hours that have been imported by the utility incomer.
    #[allow(dead_code)]
    pub fn utilitytotalkwhoursimport(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64
    }

    /// The total kilowatt-hours that have been exported by the utility incomer.
    #[allow(dead_code)]
    pub fn utilitytotalkwhoursexport(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64
    }
}

/// Utility Phase C AC Reactive Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Upcacr {
    frame_payload: Vec<u8>,
}

impl Upcacr {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Upcacr {
        Upcacr { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Upcacr, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566778622 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Upcacr::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Lead/lag status for utility incomer phase C power factor.
    #[allow(dead_code)]
    pub fn utilityphasecpowerfactorlagging(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x3) as f64
    }

    /// The power factor of phases C of the utility incomer.
    #[allow(dead_code)]
    pub fn utilityphasecpowerfactor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 + -1f64
    }

    /// The reactive power delivered by phase C of the utility incomer
    #[allow(dead_code)]
    pub fn utilityphasecreactivepower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Utility Phase C AC Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Upcacp {
    frame_payload: Vec<u8>,
}

impl Upcacp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Upcacp {
        Upcacp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Upcacp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566778878 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Upcacp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The apparent power delivered by phase C of the utility incomer.
    #[allow(dead_code)]
    pub fn utilityphasecapparentpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 + -2000000000f64
    }

    /// The real power delivered by phase C of the utility incomer.
    #[allow(dead_code)]
    pub fn utilityphasecrealpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Utility Phase C AC Basic Quantities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Upcac {
    frame_payload: Vec<u8>,
}

impl Upcac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Upcac {
        Upcac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Upcac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566779134 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Upcac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// RMS current measured at the utility incomer phase C.
    #[allow(dead_code)]
    pub fn utilityphasecacrmscurrent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// AC frequency measured at the utility incomer phase C.
    #[allow(dead_code)]
    pub fn utilityphasecacfrequency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Line to Neutral RMS voltage measured at the utility incomer phase C.
    #[allow(dead_code)]
    pub fn utltyphsclneneutralacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Line to Line RMS voltage measured at the utility incomer phase CA.
    #[allow(dead_code)]
    pub fn utltyphsecalinelineacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Utility Phase B AC Reactive Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Upbacr {
    frame_payload: Vec<u8>,
}

impl Upbacr {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Upbacr {
        Upbacr { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Upbacr, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566779390 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Upbacr::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Lead/lag status for utility incomer phase B power factor.
    #[allow(dead_code)]
    pub fn utilityphasebpowerfactorlagging(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x3) as f64
    }

    /// The power factor of phases B of the utility incomer.
    #[allow(dead_code)]
    pub fn utilityphasebpowerfactor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 + -1f64
    }

    /// The reactive power delivered by phase B of the utility incomer
    #[allow(dead_code)]
    pub fn utilityphasebreactivepower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Utility Phase B AC Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Upbacp {
    frame_payload: Vec<u8>,
}

impl Upbacp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Upbacp {
        Upbacp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Upbacp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566779646 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Upbacp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The apparent power delivered by phase B of the utility incomer.
    #[allow(dead_code)]
    pub fn utilityphasebapparentpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 + -2000000000f64
    }

    /// The real power delivered by phase B of the utility incomer.
    #[allow(dead_code)]
    pub fn utilityphasebrealpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Utility Phase B AC Basic Quantities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Upbac {
    frame_payload: Vec<u8>,
}

impl Upbac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Upbac {
        Upbac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Upbac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566779902 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Upbac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// RMS current measured at the utility incomer phase B.
    #[allow(dead_code)]
    pub fn utilityphasebacrmscurrent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// AC frequency measured at the utility incomer phase B.
    #[allow(dead_code)]
    pub fn utilityphasebacfrequency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Line to Neutral RMS voltage measured at the utility incomer phase B.
    #[allow(dead_code)]
    pub fn utltyphsblneneutralacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Line to Line RMS voltage measured at the utility incomer phase BC.
    #[allow(dead_code)]
    pub fn utltyphsebclinelineacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Utility Phase A  AC Reactive Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Upaccr {
    frame_payload: Vec<u8>,
}

impl Upaccr {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Upaccr {
        Upaccr { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Upaccr, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566780158 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Upaccr::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Lead/lag status for utility incomer phase A power factor.
    #[allow(dead_code)]
    pub fn utilityphaseapowerfactorlagging(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x3) as f64
    }

    /// The power factor of phase A of the utility incomer.
    #[allow(dead_code)]
    pub fn utilityphaseapowerfactor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 + -1f64
    }

    /// The reactive power delivered by phase A of the utility incomer
    #[allow(dead_code)]
    pub fn utilityphaseareactivepower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Utility Phase A  AC Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Upaacp {
    frame_payload: Vec<u8>,
}

impl Upaacp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Upaacp {
        Upaacp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Upaacp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566780414 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Upaacp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The apparent power delivered by phase A of the utility incomer.
    #[allow(dead_code)]
    pub fn utilityphaseaapparentpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 + -2000000000f64
    }

    /// The real power delivered by phase A of the utility incomer.
    #[allow(dead_code)]
    pub fn utilityphasearealpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Utility Phase A Basic AC Quantities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Upaac {
    frame_payload: Vec<u8>,
}

impl Upaac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Upaac {
        Upaac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Upaac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566780670 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Upaac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// RMS current measured at the utility incomer phase A.
    #[allow(dead_code)]
    pub fn utilityphaseaacrmscurrent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// AC frequency measured at the utility incomer phase A.
    #[allow(dead_code)]
    pub fn utilityphaseaacfrequency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Line to Neutral RMS voltage measured at the utility incomer phase A.
    #[allow(dead_code)]
    pub fn utltyphsalneneutralacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Line to Line RMS voltage measured at the utility incomer phase AB.
    #[allow(dead_code)]
    pub fn utltyphseablinelineacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Utility Average Basic AC Quantities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Uaac {
    frame_payload: Vec<u8>,
}

impl Uaac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Uaac {
        Uaac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Uaac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566781438 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Uaac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Average RMS current measured at the utility incomer.
    #[allow(dead_code)]
    pub fn utilityaverageacrmscurrent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Average AC frequency measured at the utility incomer.
    #[allow(dead_code)]
    pub fn utilityaverageacfrequency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// The average Line to Neutral AC RMS voltage measured at the utility incomer .
    #[allow(dead_code)]
    pub fn utltyavrglneneutralacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Average Line to Line RMS voltage measured at the utility incomer .
    #[allow(dead_code)]
    pub fn utltyavragelinelineacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Generator Total AC Reactive Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gtacr {
    frame_payload: Vec<u8>,
}

impl Gtacr {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gtacr {
        Gtacr { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gtacr, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566784254 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gtacr::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Lead/lag status for generator average power factor.
    #[allow(dead_code)]
    pub fn gnrtoroverallpowerfactorlagging(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x3) as f64
    }

    /// The average power factor of the generator.
    #[allow(dead_code)]
    pub fn generatoroverallpowerfactor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 + -1f64
    }

    /// The total reactive power delivered by the generator
    #[allow(dead_code)]
    pub fn generatortotalreactivepower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Generator Total AC Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gtacp {
    frame_payload: Vec<u8>,
}

impl Gtacp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gtacp {
        Gtacp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gtacp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566784510 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gtacp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The total apparent power delivered by the generator.
    #[allow(dead_code)]
    pub fn generatortotalapparentpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 + -2000000000f64
    }

    /// Total real power delivered by the generator.
    #[allow(dead_code)]
    pub fn generatortotalrealpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Generator Total AC Energy
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gtace {
    frame_payload: Vec<u8>,
}

impl Gtace {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gtace {
        Gtace { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gtace, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566781694 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gtace::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The total kilowatt-hours that have been imported by the generator.
    #[allow(dead_code)]
    pub fn generatortotalkwhoursimport(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64
    }

    /// The total kilowatt-hours that have been exported by the generator.
    #[allow(dead_code)]
    pub fn generatortotalkwhoursexport(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64
    }
}

/// Generator Phase C AC Reactive Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpcacr {
    frame_payload: Vec<u8>,
}

impl Gpcacr {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpcacr {
        Gpcacr { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpcacr, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566781950 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpcacr::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Lead/lag status for generator phase C power factor.
    #[allow(dead_code)]
    pub fn gnratorphasecpowerfactorlagging(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x3) as f64
    }

    /// The power factor of phases C of the generator.
    #[allow(dead_code)]
    pub fn generatorphasecpowerfactor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 + -1f64
    }

    /// The reactive power delivered by phase C of the generator
    #[allow(dead_code)]
    pub fn generatorphasecreactivepower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Generator Phase C AC Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpcacp {
    frame_payload: Vec<u8>,
}

impl Gpcacp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpcacp {
        Gpcacp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpcacp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566782206 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpcacp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The apparent power delivered by phase C of the generator.
    #[allow(dead_code)]
    pub fn generatorphasecapparentpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 + -2000000000f64
    }

    /// The real power delivered by phase C of the generator.
    #[allow(dead_code)]
    pub fn generatorphasecrealpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Generator Phase C Basic AC Quantities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpcac {
    frame_payload: Vec<u8>,
}

impl Gpcac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpcac {
        Gpcac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpcac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566782462 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpcac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// RMS current measured at the generator phase C output.
    #[allow(dead_code)]
    pub fn generatorphasecacrmscurrent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// AC frequency measured at the generator phase C output.
    #[allow(dead_code)]
    pub fn generatorphasecacfrequency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Line to Neutral RMS voltage measured at the generator phase C output.
    #[allow(dead_code)]
    pub fn gnrtrphsclneneutralacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Line to Line RMS voltage measured at the generator phase CA output.
    #[allow(dead_code)]
    pub fn gnrtrphsecalinelineacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Generator Phase B AC Reactive Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpbacrp {
    frame_payload: Vec<u8>,
}

impl Gpbacrp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpbacrp {
        Gpbacrp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpbacrp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566782718 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpbacrp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Lead/lag status for generator phase B power factor.
    #[allow(dead_code)]
    pub fn gnratorphasebpowerfactorlagging(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x3) as f64
    }

    /// The power factor of phases B of the generator.
    #[allow(dead_code)]
    pub fn generatorphasebpowerfactor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 + -1f64
    }

    /// The reactive power delivered by phase B of the generator
    #[allow(dead_code)]
    pub fn generatorphasebreactivepower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Generator Phase B AC Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpbacp {
    frame_payload: Vec<u8>,
}

impl Gpbacp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpbacp {
        Gpbacp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpbacp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566782974 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpbacp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The apparent power delivered by phase B of the generator.
    #[allow(dead_code)]
    pub fn generatorphasebapparentpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 + -2000000000f64
    }

    /// The real power delivered by phase B of the generator.
    #[allow(dead_code)]
    pub fn generatorphasebrealpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Generator Phase B Basic AC Quantities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpbac {
    frame_payload: Vec<u8>,
}

impl Gpbac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpbac {
        Gpbac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpbac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566783230 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpbac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// RMS current measured at the generator phase B output.
    #[allow(dead_code)]
    pub fn generatorphasebacrmscurrent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// AC frequency measured at the generator phase B output.
    #[allow(dead_code)]
    pub fn generatorphasebacfrequency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Line to Neutral RMS voltage measured at the generator phase B output.
    #[allow(dead_code)]
    pub fn gnrtrphsblneneutralacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Line to Line RMS voltage measured at the generator phase BC output.
    #[allow(dead_code)]
    pub fn gnrtrphsebclinelineacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Generator Phase A AC Reactive Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpaacr {
    frame_payload: Vec<u8>,
}

impl Gpaacr {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpaacr {
        Gpaacr { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpaacr, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566783486 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpaacr::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Lead/lag status for generator phase A power factor.
    #[allow(dead_code)]
    pub fn gnratorphaseapowerfactorlagging(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x3) as f64
    }

    /// The power factor of phase A of the generator.
    #[allow(dead_code)]
    pub fn generatorphaseapowerfactor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 + -1f64
    }

    /// The reactive power delivered by phase A of the generator
    #[allow(dead_code)]
    pub fn generatorphaseareactivepower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Generator Phase A AC Power
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpaacp {
    frame_payload: Vec<u8>,
}

impl Gpaacp {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpaacp {
        Gpaacp { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpaacp, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566783742 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpaacp::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The apparent power delivered by phase A of the generator.
    #[allow(dead_code)]
    pub fn generatorphaseaapparentpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64 + -2000000000f64
    }

    /// The real power delivered by phase A of the generator.
    #[allow(dead_code)]
    pub fn generatorphasearealpower(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 + -2000000000f64
    }
}

/// Generator Phase A Basic AC Quantities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gpaac {
    frame_payload: Vec<u8>,
}

impl Gpaac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gpaac {
        Gpaac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gpaac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566783998 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gpaac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// RMS current measured at the generator phase A output.
    #[allow(dead_code)]
    pub fn generatorphaseaacrmscurrent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// AC frequency measured at the generator phase A output.
    #[allow(dead_code)]
    pub fn generatorphaseaacfrequency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Line to Neutral RMS voltage measured at the generator phase A output.
    #[allow(dead_code)]
    pub fn gnrtrphsalneneutralacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Line to Line RMS voltage measured at the generator phase AB output.
    #[allow(dead_code)]
    pub fn gnrtrphseablinelineacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Generator Average Basic AC Quantities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Gaac {
    frame_payload: Vec<u8>,
}

impl Gaac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Gaac {
        Gaac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Gaac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566784766 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Gaac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Average RMS current measured at the generator output.
    #[allow(dead_code)]
    pub fn generatoraverageacrmscurrent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Average AC frequency measured at the generator output.
    #[allow(dead_code)]
    pub fn generatoraverageacfrequency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// The average Line to Neutral AC RMS voltage measured at the Generator output.
    #[allow(dead_code)]
    pub fn gnrtravrglneneutralacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Average Line to Line RMS voltage measured at the generator output.
    #[allow(dead_code)]
    pub fn gnrtravragelinelineacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Bus #1/Utility Sync Check Status
#[allow(dead_code)]
#[derive(Debug)]
pub struct Busc {
    frame_payload: Vec<u8>,
}

impl Busc {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Busc {
        Busc { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Busc, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566776830 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Busc::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The phase difference between the Bus #1 voltage and Utility voltage.
    #[allow(dead_code)]
    pub fn bus1_utilityacphasedifference(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 + -200f64
    }

    /// Indicator of whether Bus #1 and Utility are properly synchronized for paralleling. This indicator will be based on parameters such as Voltage Match, Frequency Match, and Phase Match.
    #[allow(dead_code)]
    pub fn bus1_utilityinsync(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0x3) as f64
    }

    /// Indicator of whether voltage difference between Bus #1 and Utility is adequate for paralleling. This indicator will be based on the measured AC voltages qualified using parameters such as Voltage Tolerance.
    #[allow(dead_code)]
    pub fn bus1_utilityvoltagematch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 6) & 0x3) as f64
    }

    /// Indicator of whether frequency difference between Bus #1 and Utility is adequate for paralleling. This indicator will be based on the measured AC frequencies qualified using parameters such as Frequency Tolerance, Phase Tolerance, and Dwell Time.
    #[allow(dead_code)]
    pub fn bus1_utilityfrequencymatch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 4) & 0x3) as f64
    }

    /// Indicator of whether phase difference between Bus #1 and Utility is adequate for paralleling. This indicator will be based on the measured AC phase difference qualified using parameters such as Phase Tolerance and Dwell Time.
    #[allow(dead_code)]
    pub fn bus1_utilityphasematch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 2) & 0x3) as f64
    }

    /// Indicator of whether Bus #1 is considered dead for closing to the utility. This indicator will be based on parameters such as Bus #1 Voltage and dead bus threshold values.
    #[allow(dead_code)]
    pub fn bus1_utilitydeadbus(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0x3) as f64
    }
}

/// Bus #1 Phase C  Basic AC Quantities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Bpcac {
    frame_payload: Vec<u8>,
}

impl Bpcac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Bpcac {
        Bpcac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Bpcac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566777342 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Bpcac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// AC frequency measured at bus #1 phase C.
    #[allow(dead_code)]
    pub fn bus1phasecacfrequency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Line to Neutral RMS voltage measured at bus #1 phase C.
    #[allow(dead_code)]
    pub fn bs1phseclineneutralacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Line to Line RMS voltage measured at bus #1 phase CA.
    #[allow(dead_code)]
    pub fn bus1phasecalinelineacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Bus #1 Phase B  Basic AC Quantities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Bpbac {
    frame_payload: Vec<u8>,
}

impl Bpbac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Bpbac {
        Bpbac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Bpbac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566777598 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Bpbac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// AC frequency measured at bus #1 phase B.
    #[allow(dead_code)]
    pub fn bus1phasebacfrequency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Line to Neutral RMS voltage measured at bus #1 phase B.
    #[allow(dead_code)]
    pub fn bs1phseblineneutralacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Line to Line RMS voltage measured at bus #1 phase BC.
    #[allow(dead_code)]
    pub fn bus1phasebclinelineacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Bus #1 Phase A  Basic AC Quantities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Bpaac {
    frame_payload: Vec<u8>,
}

impl Bpaac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Bpaac {
        Bpaac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Bpaac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566777854 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Bpaac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// AC frequency measured at bus #1 phase A.
    #[allow(dead_code)]
    pub fn bus1phaseaacfrequency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// Line to Neutral RMS voltage measured at bus #1 phase A.
    #[allow(dead_code)]
    pub fn bs1phsealineneutralacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Line to Line RMS voltage measured at bus #1 phase AB.
    #[allow(dead_code)]
    pub fn bus1phaseablinelineacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Bus #1/Generator Sync Check Status
#[allow(dead_code)]
#[derive(Debug)]
pub struct Bgsc {
    frame_payload: Vec<u8>,
}

impl Bgsc {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Bgsc {
        Bgsc { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Bgsc, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566777086 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Bgsc::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The phase difference between the Bus #1 voltage and Generator voltage.
    #[allow(dead_code)]
    pub fn bus1_generatoracphasedifference(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 + -200f64
    }

    /// Indicator of whether Bus #1 and Generator are properly synchronized for paralleling. This indicator will be based on parameters such as Voltage Match, Frequency Match, and Phase Match.
    #[allow(dead_code)]
    pub fn bus1_generatorinsync(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0x3) as f64
    }

    /// Indicator of whether voltage difference between Bus #1 and Generator is adequate for paralleling. This indicator will be based on the measured AC voltages qualified using parameters such as Voltage Tolerance.
    #[allow(dead_code)]
    pub fn bus1_generatorvoltagematch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 6) & 0x3) as f64
    }

    /// Indicator of whether frequency difference between Bus #1 and Generator is adequate for paralleling. This indicator will be based on the measured AC frequencies qualified using parameters such as Frequency Tolerance, Phase Tolerance, and Dwell Time.
    #[allow(dead_code)]
    pub fn bus1_generatorfrequencymatch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 4) & 0x3) as f64
    }

    /// Indicator of whether phase difference between Bus #1 and Generator is adequate for paralleling. This indicator will be based on the measured AC phase difference qualified using parameters such as Phase Tolerance and Dwell Time.
    #[allow(dead_code)]
    pub fn bus1_generatorphasematch(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 2) & 0x3) as f64
    }

    /// Indicator of whether Bus #1 is considered dead for closing to the generator. This indicator will be based on parameters such as Bus #1 Voltage and dead bus threshold values.
    #[allow(dead_code)]
    pub fn bus1_generatordeadbus(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0x3) as f64
    }
}

/// Bus #1 Average Basic AC Quantities
#[allow(dead_code)]
#[derive(Debug)]
pub struct Baac {
    frame_payload: Vec<u8>,
}

impl Baac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Baac {
        Baac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Baac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566778110 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Baac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Average AC frequency measured at bus #1.
    #[allow(dead_code)]
    pub fn bus1averageacfrequency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }

    /// The average Line to Neutral AC RMS voltage measured at bus #1 .
    #[allow(dead_code)]
    pub fn bs1avrgelineneutralacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// Average Line to Line RMS voltage measured at bus #1 .
    #[allow(dead_code)]
    pub fn bus1averagelinelineacrmsvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64
    }
}

/// Working Set Master
#[allow(dead_code)]
#[derive(Debug)]
pub struct Wsmstr {
    frame_payload: Vec<u8>,
}

impl Wsmstr {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Wsmstr {
        Wsmstr { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Wsmstr, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633895422 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Wsmstr::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read NumberOfMembers signal from can frame
    #[allow(dead_code)]
    pub fn numberofmembers(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Commanded Address
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ca {
    frame_payload: Vec<u8>,
}

impl Ca {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ca {
        Ca { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ca, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566838526 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ca::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read ArbitraryAddressCapable signal from can frame
    #[allow(dead_code)]
    pub fn arbitraryaddresscapable(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 63) & 0x1) as f64
    }

    /// 0 = Global; 
    ///    1  = On-Highway; 
    ///    2  = Agricultural and Forestry; 
    ///    3  = Construction; 
    ///    4  = Marine;
    ///    5  = Industrial - Process
    ///           Control - Stationary (Gen-Sets)
    ///    6  = Reserve for SAE
    ///    7  = Reserve for SAE
    #[allow(dead_code)]
    pub fn industrygroup(&self) -> IndustryGroup2566838526 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        IndustryGroup2566838526::from((((frame_payload >> 60) & 0x7) as f64) as u64)
    }

    /// Read VehicleSystemInstance signal from can frame
    #[allow(dead_code)]
    pub fn vehiclesysteminstance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xF) as f64
    }

    /// Read VehicleSystem signal from can frame
    #[allow(dead_code)]
    pub fn vehiclesystem(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 49) & 0x7F) as f64
    }

    /// Read Function signal from can frame
    #[allow(dead_code)]
    pub fn function(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64
    }

    /// Read FunctionInstance signal from can frame
    #[allow(dead_code)]
    pub fn functioninstance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 35) & 0x1F) as f64
    }

    /// Read ECUInstance signal from can frame
    #[allow(dead_code)]
    pub fn ecuinstance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0x7) as f64
    }

    /// Assigned by NMEA 2000 Committee
    #[allow(dead_code)]
    pub fn manufacturercode(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 21) & 0x7FF) as f64
    }

    /// Read IdentityNumber signal from can frame
    #[allow(dead_code)]
    pub fn identitynumber(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0x1FFFFF) as f64
    }

    /// The source address that is to be assigned to the CA that has the NAME corresponding to the one conveyed in the first eight bytes of this Commanded Address message.
    #[allow(dead_code)]
    pub fn addressassignment(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFF) as f64
    }
}

/// Address Claimed
#[allow(dead_code)]
#[derive(Debug)]
pub struct Acl {
    frame_payload: Vec<u8>,
}

impl Acl {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Acl {
        Acl { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Acl, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565799678 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Acl::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read ArbitraryAddressCapable signal from can frame
    #[allow(dead_code)]
    pub fn arbitraryaddresscapable(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 63) & 0x1) as f64
    }

    /// 0 = Global; 
    ///    1  = On-Highway; 
    ///    2  = Agricultural and Forestry; 
    ///    3  = Construction; 
    ///    4  = Marine;
    ///    5  = Industrial - Process
    ///           Control - Stationary (Gen-Sets)
    ///    6  = Reserve for SAE
    ///    7  = Reserve for SAE
    #[allow(dead_code)]
    pub fn industrygroup(&self) -> IndustryGroup2565799678 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        IndustryGroup2565799678::from((((frame_payload >> 60) & 0x7) as f64) as u64)
    }

    /// Read VehicleSystemInstance signal from can frame
    #[allow(dead_code)]
    pub fn vehiclesysteminstance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xF) as f64
    }

    /// Read VehicleSystem signal from can frame
    #[allow(dead_code)]
    pub fn vehiclesystem(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 49) & 0x7F) as f64
    }

    /// Read Function signal from can frame
    #[allow(dead_code)]
    pub fn function(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64
    }

    /// Read FunctionInstance signal from can frame
    #[allow(dead_code)]
    pub fn functioninstance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 35) & 0x1F) as f64
    }

    /// Read ECUInstance signal from can frame
    #[allow(dead_code)]
    pub fn ecuinstance(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0x7) as f64
    }

    /// Assigned by NMEA 2000 Committee
    #[allow(dead_code)]
    pub fn manufacturercode(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 21) & 0x7FF) as f64
    }

    /// Read IdentityNumber signal from can frame
    #[allow(dead_code)]
    pub fn identitynumber(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0x1FFFFF) as f64
    }
}

/// Transfer
#[allow(dead_code)]
#[derive(Debug)]
pub struct Xfer {
    frame_payload: Vec<u8>,
}

impl Xfer {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Xfer {
        Xfer { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Xfer, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2563440382 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Xfer::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Short name of reporting device of the requested PGN via the Transfer PGN.
    #[allow(dead_code)]
    pub fn shrtnameofactualreportingdevice(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64
    }

    /// Length of data reported with the associated PGN via the Transfer PGN.
    #[allow(dead_code)]
    pub fn lengthofdataforthereportedpgn(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// PGN associated with this transfer message
    #[allow(dead_code)]
    pub fn pgnofrequstedinformation(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFF) as f64
    }
}

/// Transport Protocol - Data Transfer
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tpdt {
    frame_payload: Vec<u8>,
}

impl Tpdt {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tpdt {
        Tpdt { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tpdt, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565603070 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tpdt::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read SequenceNumber signal from can frame
    #[allow(dead_code)]
    pub fn sequencenumber(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Transport Protocol - Connection Management
#[allow(dead_code)]
#[derive(Debug)]
pub struct Tpcm {
    frame_payload: Vec<u8>,
}

impl Tpcm {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Tpcm {
        Tpcm { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Tpcm, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565668606 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Tpcm::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total number of packets for BAM message.Total number of packets received for RTS/CTS message.Total number of packets for RTS/CTS message.
    #[allow(dead_code)]
    pub fn totalnumberofpacketseoma(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// Total message size (in bytes) for BAM message.Total message size (in bytes) for RTS/CTS message.Total message size (in bytes) for RTS/CTS message.
    #[allow(dead_code)]
    pub fn totalmessagesizeeoma(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64
    }

    /// Total message size (in bytes) for BAM message.Total message size (in bytes) for RTS/CTS message.Total message size (in bytes) for RTS/CTS message.
    #[allow(dead_code)]
    pub fn totalmessagesizebam(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64
    }

    /// Total number of packets for BAM message.Total number of packets received for RTS/CTS message.Total number of packets for RTS/CTS message.
    #[allow(dead_code)]
    pub fn totalnumberofpacketsbam(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// Reason for connection abort message.
    #[allow(dead_code)]
    pub fn connectionabortreason(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Next Packet Number to be sent (TP.CM_CTS)
    #[allow(dead_code)]
    pub fn nextpacketnumbertobesent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Number of Packets that can be sent (TP.CM_CTS)
    #[allow(dead_code)]
    pub fn numberofpacketsthatcanbesent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Read PGNumber signal from can frame
    #[allow(dead_code)]
    pub fn pgnumber(&self) -> PgNumber2565668606 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PgNumber2565668606::from((((frame_payload >> 40) & 0xFFFFFF) as f64) as u64)
    }

    /// Maximum number of packets for RTS/CTS message.
    #[allow(dead_code)]
    pub fn maximumnumberofpackets(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64
    }

    /// Total number of packets for BAM message.Total number of packets received for RTS/CTS message.Total number of packets for RTS/CTS message.
    #[allow(dead_code)]
    pub fn totalnumberofpackets(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// Total message size (in bytes) for BAM message.Total message size (in bytes) for RTS/CTS message.Total message size (in bytes) for RTS/CTS message.
    #[allow(dead_code)]
    pub fn totalmessagesize(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64
    }

    /// Read ControlByte signal from can frame
    #[allow(dead_code)]
    pub fn controlbyte(&self) -> ControlByte2565668606 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ControlByte2565668606::from(((frame_payload & 0xFF) as f64) as u64)
    }
}

/// Request 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Rqst2 {
    frame_payload: Vec<u8>,
}

impl Rqst2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Rqst2 {
        Rqst2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Rqst2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2563374846 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Rqst2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Requester is to respond via the Transfer PGN
    #[allow(dead_code)]
    pub fn usetransfermode(&self) -> UseTransferMode2563374846 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        UseTransferMode2563374846::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// PGN which is requested by Request2 message
    #[allow(dead_code)]
    pub fn parametergroupnumber(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFF) as f64
    }
}

/// Request
#[allow(dead_code)]
#[derive(Debug)]
pub struct Rqst {
    frame_payload: Vec<u8>,
}

impl Rqst {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Rqst {
        Rqst { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Rqst, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565537534 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Rqst::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// PGN which is requested by Request2 message
    #[allow(dead_code)]
    pub fn parametergroupnumber(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFF) as f64
    }
}

/// DTC Counts
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm29 {
    frame_payload: Vec<u8>,
}

impl Dm29 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm29 {
        Dm29 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm29, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2560556798 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm29::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Identifies the current number of permanent DTCs
    #[allow(dead_code)]
    pub fn permanentdtcs(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64
    }

    /// Identifies the current number of previously MIL-On DTCs
    #[allow(dead_code)]
    pub fn previouslymilondtcs(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64
    }

    /// Identifies the current number of MIL-On DTCs
    #[allow(dead_code)]
    pub fn milondtcs(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Identifies the current total number of pending DTCs, including emission related
    #[allow(dead_code)]
    pub fn allpendingdtcs(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Identifies the current number of emission related pending DTCs
    #[allow(dead_code)]
    pub fn pendingdtcs(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Permanent DTCs
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm28 {
    frame_payload: Vec<u8>,
}

impl Dm28 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm28 {
        Dm28 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm28, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566750462 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm28::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 144) & 0xFFFF) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 112) & 0xFFFF) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 80) & 0xFFFF) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier5(&self) -> FailureModeIdentifier52566750462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier52566750462::from((((frame_payload >> 160) & 0x1F) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier4(&self) -> FailureModeIdentifier42566750462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier42566750462::from((((frame_payload >> 128) & 0x1F) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier3(&self) -> FailureModeIdentifier32566750462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier32566750462::from((((frame_payload >> 96) & 0x1F) as f64) as u64)
    }

    /// This parameter provides the capability to flash the RSL (SPN 3039).
    #[allow(dead_code)]
    pub fn flashredstoplamp(&self) -> FlashRedStopLamp2566750462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashRedStopLamp2566750462::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the engine protect lamp (SPN 3041).
    #[allow(dead_code)]
    pub fn flashprotectlamp(&self) -> FlashProtectLamp2566750462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashProtectLamp2566750462::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the MIL (SPN 3038).
    #[allow(dead_code)]
    pub fn flashmalfuncindicatorlamp(&self) -> FlashMalfuncIndicatorLamp2566750462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashMalfuncIndicatorLamp2566750462::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the AWL (SPN 3040). 
    #[allow(dead_code)]
    pub fn flashamberwarninglamp(&self) -> FlashAmberWarningLamp2566750462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashAmberWarningLamp2566750462::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// A lamp used to relay only emissions-related trouble code information.
    #[allow(dead_code)]
    pub fn malfunctionindicatorlampstatus(&self) -> MalfunctionIndicatorLampStatus2566750462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MalfunctionIndicatorLampStatus2566750462::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code information that is reporting a problem with the vehicle system but the vehicle need
    /// not be immediately stopped.
    #[allow(dead_code)]
    pub fn amberwarninglampstatus(&self) -> AmberWarningLampStatus2566750462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AmberWarningLampStatus2566750462::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x7F) as f64
    }

    /// Read SPNConversionMethod1 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 47) & 0x1) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier1(&self) -> FailureModeIdentifier12566750462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier12566750462::from((((frame_payload >> 32) & 0x1F) as f64) as u64)
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// This lamp is uesed to relay trouble code information that is of a severe enought condition that it warrants stopping the vehicle.
    #[allow(dead_code)]
    pub fn redstoplampstate(&self) -> RedStopLampState2566750462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RedStopLampState2566750462::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code informatio that is reporting a problem with a vehicle system that is most
    /// probably not electronic subsystem related.
    #[allow(dead_code)]
    pub fn protectlampstatus(&self) -> ProtectLampStatus2566750462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ProtectLampStatus2566750462::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier2(&self) -> FailureModeIdentifier22566750462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier22566750462::from((((frame_payload >> 64) & 0x1F) as f64) as u64)
    }

    /// Read SPNConversionMethod5 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 175) & 0x1) as f64
    }

    /// Read SPNConversionMethod4 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 143) & 0x1) as f64
    }

    /// Read SPNConversionMethod3 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 111) & 0x1) as f64
    }

    /// Read SPNConversionMethod2 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 79) & 0x1) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 168) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 136) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 104) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 72) & 0x7F) as f64
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 165) & 0x7) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 133) & 0x7) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 101) & 0x7) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 69) & 0x7) as f64
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 37) & 0x7) as f64
    }
}

/// All Pending DTCs
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dm27 {
    frame_payload: Vec<u8>,
}

impl Dm27 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dm27 {
        Dm27 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dm27, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566750974 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dm27::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 144) & 0xFFFF) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 112) & 0xFFFF) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 80) & 0xFFFF) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier5(&self) -> FailureModeIdentifier52566750974 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier52566750974::from((((frame_payload >> 160) & 0x1F) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier4(&self) -> FailureModeIdentifier42566750974 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier42566750974::from((((frame_payload >> 128) & 0x1F) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier3(&self) -> FailureModeIdentifier32566750974 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier32566750974::from((((frame_payload >> 96) & 0x1F) as f64) as u64)
    }

    /// This parameter provides the capability to flash the RSL (SPN 3039).
    #[allow(dead_code)]
    pub fn flashredstoplamp(&self) -> FlashRedStopLamp2566750974 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashRedStopLamp2566750974::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the engine protect lamp (SPN 3041).
    #[allow(dead_code)]
    pub fn flashprotectlamp(&self) -> FlashProtectLamp2566750974 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashProtectLamp2566750974::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the MIL (SPN 3038).
    #[allow(dead_code)]
    pub fn flashmalfuncindicatorlamp(&self) -> FlashMalfuncIndicatorLamp2566750974 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashMalfuncIndicatorLamp2566750974::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// This parameter provides the capability to flash the AWL (SPN 3040). 
    #[allow(dead_code)]
    pub fn flashamberwarninglamp(&self) -> FlashAmberWarningLamp2566750974 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FlashAmberWarningLamp2566750974::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// A lamp used to relay only emissions-related trouble code information.
    #[allow(dead_code)]
    pub fn malfunctionindicatorlampstatus(&self) -> MalfunctionIndicatorLampStatus2566750974 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        MalfunctionIndicatorLampStatus2566750974::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code information that is reporting a problem with the vehicle system but the vehicle need
    /// not be immediately stopped.
    #[allow(dead_code)]
    pub fn amberwarninglampstatus(&self) -> AmberWarningLampStatus2566750974 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AmberWarningLampStatus2566750974::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x7F) as f64
    }

    /// Read SPNConversionMethod1 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 47) & 0x1) as f64
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier1(&self) -> FailureModeIdentifier12566750974 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier12566750974::from((((frame_payload >> 32) & 0x1F) as f64) as u64)
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64
    }

    /// This lamp is uesed to relay trouble code information that is of a severe enought condition that it warrants stopping the vehicle.
    #[allow(dead_code)]
    pub fn redstoplampstate(&self) -> RedStopLampState2566750974 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RedStopLampState2566750974::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// This lamp is used to relay trouble code informatio that is reporting a problem with a vehicle system that is most
    /// probably not electronic subsystem related.
    #[allow(dead_code)]
    pub fn protectlampstatus(&self) -> ProtectLampStatus2566750974 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ProtectLampStatus2566750974::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// The FMI defines the type of failure detected in the subsystem identified by an SPN.
    #[allow(dead_code)]
    pub fn failuremodeidentifier2(&self) -> FailureModeIdentifier22566750974 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FailureModeIdentifier22566750974::from((((frame_payload >> 64) & 0x1F) as f64) as u64)
    }

    /// Read SPNConversionMethod5 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 175) & 0x1) as f64
    }

    /// Read SPNConversionMethod4 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 143) & 0x1) as f64
    }

    /// Read SPNConversionMethod3 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 111) & 0x1) as f64
    }

    /// Read SPNConversionMethod2 signal from can frame
    #[allow(dead_code)]
    pub fn spnconversionmethod2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 79) & 0x1) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount5(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 168) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount4(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 136) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 104) & 0x7F) as f64
    }

    /// The 7 bit occurence count field contains the number of times a fault has gone from active to previously active.
    #[allow(dead_code)]
    pub fn occurencecount2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 72) & 0x7F) as f64
    }

    /// SPN #5 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn5high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 165) & 0x7) as f64
    }

    /// SPN #4 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn4high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 133) & 0x7) as f64
    }

    /// SPN #3 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn3high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 101) & 0x7) as f64
    }

    /// SPN #2 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn2high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 69) & 0x7) as f64
    }

    /// SPN #1 (Conversion Version 4)
    #[allow(dead_code)]
    pub fn spn1high(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 37) & 0x7) as f64
    }
}

/// Aftertreatment 2 Trip Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ati2 {
    frame_payload: Vec<u8>,
}

impl Ati2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ati2 {
        Ati2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ati2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566748414 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ati2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total amount of time that aftertreatment device 2 has been in passive regeneration during the current trip period.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2trppssvrgnrationtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 128) & 0xFFFFFFFF) as f64
    }

    /// Total number of passive regenerations by aftertreatment device 2 during the current trip period.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2trpnmbrofpssvrgnrtns(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 160) & 0xFFFFFFFF) as f64
    }

    /// Total number of active regenerations by aftertreatment device 2 during the current trip period.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2trpnmbrofactvrgnrtns(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 96) & 0xFFFFFFFF) as f64
    }

    /// Total number of aftertreatment device 2 active regeneration manual requests by the operator during the current trip period.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2trpnmbrofactvrgnrtnmn(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 224) & 0xFFFFFFFF) as f64
    }

    /// Total number of aftertreatment device 2 active regeneration inhibit requests by the operator during the current trip period.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2trpnmbrofactvrgnrtnin(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 192) & 0xFFFFFFFF) as f64
    }

    /// Total amount of time that aftertreatment device 2 has been in active regeneration during the current trip period.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2trpactvrgnrationtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64
    }

    /// Total amount of fuel used by aftertreatment device 2 during the current trip period.
    #[allow(dead_code)]
    pub fn aftertreatment2tripfuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.500000
    }

    /// Total amount of time that aftertreatment 2 regeneration has been manually disabled during the current trip period.
    #[allow(dead_code)]
    pub fn aftertreatment2tripdisabledtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFFFFFF) as f64
    }
}

/// Aftertreatment 1 Trip Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ati1 {
    frame_payload: Vec<u8>,
}

impl Ati1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ati1 {
        Ati1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ati1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566748670 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ati1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Total amount of time that aftertreatment device 1 has been in passive regeneration during the current trip period.
    #[allow(dead_code)]
    pub fn aftrtrtmnt1trppssvrgnrationtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 128) & 0xFFFFFFFF) as f64
    }

    /// Total number of passive regenerations by Aftertreatment device 1 during the current trip period.
    #[allow(dead_code)]
    pub fn aftrtrtmnt1trpnmbrofpssvrgnrtns(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 160) & 0xFFFFFFFF) as f64
    }

    /// Total number of active regenerations by Aftertreatment device 1 during the current trip period.
    #[allow(dead_code)]
    pub fn aftrtrtmnt1trpnmbrofactvrgnrtns(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 96) & 0xFFFFFFFF) as f64
    }

    /// Total number of Aftertreatment device 1 active regeneration manual requests by the operator during the current trip period.
    #[allow(dead_code)]
    pub fn aftrtrtmnt1trpnmbrofactvrgnrtnmn(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 224) & 0xFFFFFFFF) as f64
    }

    /// Total number of aftertreatment device 1 active regeneration inhibit requests by the operator during the current trip period.
    #[allow(dead_code)]
    pub fn aftrtrtmnt1trpnmbrofactvrgnrtnin(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 192) & 0xFFFFFFFF) as f64
    }

    /// Total amount of time that aftertreatment device 1 has been in active regeneration during the current trip period.
    #[allow(dead_code)]
    pub fn aftrtrtmnt1trpactvrgnrationtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFFFFFF) as f64
    }

    /// Total amount of fuel used by aftertreatment device 1 during the current trip period.
    #[allow(dead_code)]
    pub fn aftertreatment1tripfuelused(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFFFFFF) as f64 * 0.500000
    }

    /// Total amount of time that aftertreatment 1 regeneration has been manually disabled during the current trip period.
    #[allow(dead_code)]
    pub fn aftertreatment1tripdisabledtime(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 64) & 0xFFFFFFFF) as f64
    }
}

/// Aftertreatment Air Control 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Aac3 {
    frame_payload: Vec<u8>,
}

impl Aac3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Aac3 {
        Aac3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Aac3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566745598 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Aac3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftertreatment1SecondAirPress signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment1secondairpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.100000
    }

    /// Indicates the secondary air mass flow for aftertreatment 1.
    #[allow(dead_code)]
    pub fn aftrtreatment1secondairmassflow(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.200000
    }

    /// Indicates the secondary air temperature for aftertreatment 1.
    #[allow(dead_code)]
    pub fn aftertreatment1secondairtemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Indicates the secondary air differential pressure for aftertreatment 1.
    #[allow(dead_code)]
    pub fn aftrtratment1secondairdiffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.007812 + -250f64
    }
}

/// Aftertreatment Air Control 4
#[allow(dead_code)]
#[derive(Debug)]
pub struct Aac4 {
    frame_payload: Vec<u8>,
}

impl Aac4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Aac4 {
        Aac4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Aac4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566745342 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Aac4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftertreatment2SecondAirPress signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment2secondairpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.100000
    }

    /// Indicates the secondary air mass flow for aftertreatment 2.
    #[allow(dead_code)]
    pub fn aftrtreatment2secondairmassflow(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.200000
    }

    /// Indicates the secondary air temperature for aftertreatment 2.
    #[allow(dead_code)]
    pub fn aftertreatment2secondairtemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Indicates the secondary air differential pressure for aftertreatment 2.
    #[allow(dead_code)]
    pub fn aftrtratment2secondairdiffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.007812 + -250f64
    }
}

/// Advertised Engine Torque Curve
#[allow(dead_code)]
#[derive(Debug)]
pub struct Aetc {
    frame_payload: Vec<u8>,
}

impl Aetc {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Aetc {
        Aetc { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Aetc, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566754558 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Aetc::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicates the number of speed / torque data points contained in the Advertised Engine Torque Curve broadcast (AETC).
    #[allow(dead_code)]
    pub fn numberofaetcdatapoints(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 4) & 0xF) as f64
    }

    /// Indicates the standardized method by which torque data was obtained for the Advertised Engine Torque Curve (AETC).
    #[allow(dead_code)]
    pub fn aetcdatacollectionstandard(&self) -> AetcDataCollectionStandard2566754558 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AetcDataCollectionStandard2566754558::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// Adaptive Front-Lighting System Status
#[allow(dead_code)]
#[derive(Debug)]
pub struct Afss {
    frame_payload: Vec<u8>,
}

impl Afss {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Afss {
        Afss { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Afss, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566749950 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Afss::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// This parameter indicates what kind of light distribution is set by the AFS system for the right headlamp.
    #[allow(dead_code)]
    pub fn rightheadlamplightdistribution(&self) -> RightHeadlampLightDistribution2566749950 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RightHeadlampLightDistribution2566749950::from((((frame_payload >> 12) & 0xF) as f64) as u64)
    }

    /// This parameter indicates what kind of light distribution is set by the AFS system for the left headlamp.
    #[allow(dead_code)]
    pub fn leftheadlamplightdistribution(&self) -> LeftHeadlampLightDistribution2566749950 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LeftHeadlampLightDistribution2566749950::from((((frame_payload >> 8) & 0xF) as f64) as u64)
    }

    /// This parameter indicates whether the dynamic bending light of the left headlamp is working properly.
    #[allow(dead_code)]
    pub fn rghtheadlampdynamicbendinglight(&self) -> RghtHeadlampDynamicBendingLight2566749950 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RghtHeadlampDynamicBendingLight2566749950::from((((frame_payload >> 3) & 0x7) as f64) as u64)
    }

    /// This parameter indicates whether the dynamic bending light of the left headlamp is working properly.
    #[allow(dead_code)]
    pub fn leftheadlampdynamicbendinglight(&self) -> LeftHeadlampDynamicBendingLight2566749950 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        LeftHeadlampDynamicBendingLight2566749950::from(((frame_payload & 0x7) as f64) as u64)
    }
}

/// Aftertreatment 1 Intake Gas 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct At1i1 {
    frame_payload: Vec<u8>,
}

impl At1i1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> At1i1 {
        At1i1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = At1i1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565869310 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| At1i1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftrtrtmnt1IntkOxygnSnsrPrlmnryF signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1intkoxygnsnsrprlmnryf(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0x1F) as f64
    }

    /// Read Aftrtrtmnt1IntkNOxSnsrPrlmnryFMI signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1intknoxsnsrprlmnryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x1F) as f64
    }

    /// Indicates the heater status in the warm-up process.
    #[allow(dead_code)]
    pub fn aftrtrtmnt1intkgssnsrheaterctrl(&self) -> Aftrtrtmnt1IntkGsSnsrHeaterCtrl2565869310 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt1IntkGsSnsrHeaterCtrl2565869310::from((((frame_payload >> 45) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt1IntkGsSnsrHtrPrlmnryF signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1intkgssnsrhtrprlmnryf(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x1F) as f64
    }

    /// Read Aftrtrtmnt1IntkWdRngO2RdngStble signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1intkwdrngo2rdngstble(&self) -> Aftrtrtmnt1IntkWdRngO2RdngStble2565869310 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt1IntkWdRngO2RdngStble2565869310::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt1IntkNOxReadingStable signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1intknoxreadingstable(&self) -> Aftrtrtmnt1IntkNOxReadingStable2565869310 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt1IntkNOxReadingStable2565869310::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt1IntkeGasSensorAtTemp signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1intkegassensorattemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 34) & 0x3) as f64
    }

    /// Read Aftrtrtmnt1IntkGsSnsrPwrInRange signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1intkgssnsrpwrinrange(&self) -> Aftrtrtmnt1IntkGsSnsrPwrInRange2565869310 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt1IntkGsSnsrPwrInRange2565869310::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// The actual oxidation factor (%O2) of the gas within the exhaust stream.
    #[allow(dead_code)]
    pub fn aftertreatment1intakeo2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.000514 + -12f64
    }

    /// Read Aftertreatment1IntakeNOx signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment1intakenox(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000 + -200f64
    }
}

/// Aftertreatment 1 Intake Gas 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct At1i2 {
    frame_payload: Vec<u8>,
}

impl At1i2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> At1i2 {
        At1i2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = At1i2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566763774 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| At1i2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftrtrtmnt1PrtcltTrpIntkGsTmpPrl signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1prtclttrpintkgstmpprl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x1F) as f64
    }

    /// Read Aftrtrtmnt1ExhstGsTmp1PrlmnryFMI signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1exhstgstmp1prlmnryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0x1F) as f64
    }

    /// Temperature of engine combustion byproducts entering the particulate trap in exhaust bank 1.
    #[allow(dead_code)]
    pub fn aftrtrtmnt1prtclttrpintkgastemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// The reading from the exhaust gas temperature sensor located farthest upstream in the aftertreatment system in exhaust bank 1.
    #[allow(dead_code)]
    pub fn aftertreatment1exhaustgastemp1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Aftertreatment 1 Outlet Gas 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct At1o1 {
    frame_payload: Vec<u8>,
}

impl At1o1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> At1o1 {
        At1o1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = At1o1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565869566 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| At1o1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftrtrtmnt1OtltOxygnSnsrPrlmnryF signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1otltoxygnsnsrprlmnryf(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0x1F) as f64
    }

    /// Read Aftrtrtmnt1OtltNOxSnsrPrlmnryFMI signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1otltnoxsnsrprlmnryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x1F) as f64
    }

    /// Indicates the heater status in the warm-up process.
    #[allow(dead_code)]
    pub fn aftrtrtmnt1otltgssnsrheaterctrl(&self) -> Aftrtrtmnt1OtltGsSnsrHeaterCtrl2565869566 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt1OtltGsSnsrHeaterCtrl2565869566::from((((frame_payload >> 45) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt1OtltGsSnsrHtrPrlmnryF signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1otltgssnsrhtrprlmnryf(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x1F) as f64
    }

    /// Read Aftrtrtmnt1OtltWdRngO2RdngStble signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1otltwdrngo2rdngstble(&self) -> Aftrtrtmnt1OtltWdRngO2RdngStble2565869566 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt1OtltWdRngO2RdngStble2565869566::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt1OtltNOxReadingStable signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1otltnoxreadingstable(&self) -> Aftrtrtmnt1OtltNOxReadingStable2565869566 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt1OtltNOxReadingStable2565869566::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt1OtletGasSensorAtTemp signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1otletgassensorattemp(&self) -> Aftrtrtmnt1OtletGasSensorAtTemp2565869566 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt1OtletGasSensorAtTemp2565869566::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt1OtltGsSnsrPwrInRange signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1otltgssnsrpwrinrange(&self) -> Aftrtrtmnt1OtltGsSnsrPwrInRange2565869566 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt1OtltGsSnsrPwrInRange2565869566::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// The actual oxidation factor (%O2) of the gas within the exhaust stream.
    #[allow(dead_code)]
    pub fn aftertreatment1outleto2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.000514 + -12f64
    }

    /// Read Aftertreatment1OutletNOx signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment1outletnox(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000 + -200f64
    }
}

/// Aftertreatment 1 Outlet Gas 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct At1o2 {
    frame_payload: Vec<u8>,
}

impl At1o2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> At1o2 {
        At1o2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = At1o2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566763518 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| At1o2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftrtrtmnt1PrtcltTrpOtltExhstGsT signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1prtclttrpotltexhstgst(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x1F) as f64
    }

    /// Read Aftrtrtmnt1ExhstGsTmp3PrlmnryFMI signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt1exhstgstmp3prlmnryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0x1F) as f64
    }

    /// Temperature of engine combustion byproducts leaving the particulate trap exhaust in exhaust bank 1.
    #[allow(dead_code)]
    pub fn aftrtrtmnt1prtclttrpotltgastemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Read Aftertreatment1ExhaustGasTemp3 signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment1exhaustgastemp3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Aftertreatment 2 Intake Gas 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct At2i1 {
    frame_payload: Vec<u8>,
}

impl At2i1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> At2i1 {
        At2i1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = At2i1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565869822 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| At2i1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftrtrtmnt2IntkOxygnSnsrPrlmnryF signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2intkoxygnsnsrprlmnryf(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0x1F) as f64
    }

    /// Read Aftrtrtmnt2IntkNOxSnsrPrlmnryFMI signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2intknoxsnsrprlmnryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x1F) as f64
    }

    /// Indicates the heater status in the warm-up process.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2intkgssnsrheaterctrl(&self) -> Aftrtrtmnt2IntkGsSnsrHeaterCtrl2565869822 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt2IntkGsSnsrHeaterCtrl2565869822::from((((frame_payload >> 45) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt2IntkGsSnsrHtrPrlmnryF signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2intkgssnsrhtrprlmnryf(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x1F) as f64
    }

    /// Read Aftrtrtmnt2IntkWdRngO2RdngStble signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2intkwdrngo2rdngstble(&self) -> Aftrtrtmnt2IntkWdRngO2RdngStble2565869822 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt2IntkWdRngO2RdngStble2565869822::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt2IntkNOxReadingStable signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2intknoxreadingstable(&self) -> Aftrtrtmnt2IntkNOxReadingStable2565869822 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt2IntkNOxReadingStable2565869822::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt2IntkeGasSensorAtTemp signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2intkegassensorattemp(&self) -> Aftrtrtmnt2IntkeGasSensorAtTemp2565869822 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt2IntkeGasSensorAtTemp2565869822::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt2IntkGsSnsrPwrInRange signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2intkgssnsrpwrinrange(&self) -> Aftrtrtmnt2IntkGsSnsrPwrInRange2565869822 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt2IntkGsSnsrPwrInRange2565869822::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// The actual oxidation factor (%O2) of the gas within the exhaust stream.
    #[allow(dead_code)]
    pub fn aftertreatment2intakeo2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.000514 + -12f64
    }

    /// Read Aftertreatment2IntakeNOx signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment2intakenox(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000 + -200f64
    }
}

/// Aftertreatment 2 Intake Gas 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct At2i2 {
    frame_payload: Vec<u8>,
}

impl At2i2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> At2i2 {
        At2i2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = At2i2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566763006 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| At2i2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftrtrtmnt2PrtcltTrpIntkGsTmpPrl signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2prtclttrpintkgstmpprl(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x1F) as f64
    }

    /// Read Aftrtrtmnt2ExhstGsTmp1PrlmnryFMI signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2exhstgstmp1prlmnryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0x1F) as f64
    }

    /// Temperature of engine combustion byproducts entering the particulate trap in exhaust bank 2.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2prtclttrpintkgastemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// The reading from the exhaust gas temperature sensor located farthest upstream in the aftertreatment system in exhaust bank 2.
    #[allow(dead_code)]
    pub fn aftertreatment2exhaustgastemp1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Aftertreatment 2 Outlet Gas 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct At2o1 {
    frame_payload: Vec<u8>,
}

impl At2o1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> At2o1 {
        At2o1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = At2o1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565870078 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| At2o1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftrtrtmnt2OtltOxygnSnsrPrlmnryF signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2otltoxygnsnsrprlmnryf(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0x1F) as f64
    }

    /// Read Aftrtrtmnt2OtltNOxSnsrPrlmnryFMI signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2otltnoxsnsrprlmnryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x1F) as f64
    }

    /// Indicates the heater status in the warm-up process.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2otltgssnsrheaterctrl(&self) -> Aftrtrtmnt2OtltGsSnsrHeaterCtrl2565870078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt2OtltGsSnsrHeaterCtrl2565870078::from((((frame_payload >> 45) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt2OtltGsSnsrHtrPrlmnryF signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2otltgssnsrhtrprlmnryf(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x1F) as f64
    }

    /// Read Aftrtrtmnt2OtltWdRngO2RdngStble signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2otltwdrngo2rdngstble(&self) -> Aftrtrtmnt2OtltWdRngO2RdngStble2565870078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt2OtltWdRngO2RdngStble2565870078::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt2OtltNOxReadingStable signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2otltnoxreadingstable(&self) -> Aftrtrtmnt2OtltNOxReadingStable2565870078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt2OtltNOxReadingStable2565870078::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt2OtletGasSensorAtTemp signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2otletgassensorattemp(&self) -> Aftrtrtmnt2OtletGasSensorAtTemp2565870078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt2OtletGasSensorAtTemp2565870078::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Read Aftrtrtmnt2OtltGsSnsrPwrInRange signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2otltgssnsrpwrinrange(&self) -> Aftrtrtmnt2OtltGsSnsrPwrInRange2565870078 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Aftrtrtmnt2OtltGsSnsrPwrInRange2565870078::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// The actual oxidation factor (%O2) of the gas within the exhaust stream.
    #[allow(dead_code)]
    pub fn aftertreatment2outleto2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.000514 + -12f64
    }

    /// Read Aftertreatment2OutletNOx signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment2outletnox(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000 + -200f64
    }
}

/// Aftertreatment 2 Outlet Gas 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct At2o2 {
    frame_payload: Vec<u8>,
}

impl At2o2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> At2o2 {
        At2o2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = At2o2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566762750 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| At2o2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftrtrtmnt2PrtcltTrpExhstGsTmpPr signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2prtclttrpexhstgstmppr(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0x1F) as f64
    }

    /// Read Aftrtrtmnt2ExhstGsTmp3PrlmnryFMI signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2exhstgstmp3prlmnryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0x1F) as f64
    }

    /// Temperature of engine combustion byproducts leaving the particulate trap exhaust in exhaust bank 2.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2prtclttrpotltgastemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Read Aftertreatment2ExhaustGasTemp3 signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment2exhaustgastemp3(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Aftertreatment 1 Gas Parameters
#[allow(dead_code)]
#[derive(Debug)]
pub struct Atgp1 {
    frame_payload: Vec<u8>,
}

impl Atgp1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Atgp1 {
        Atgp1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Atgp1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566753534 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Atgp1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read ParticulateTrapOutletPress1 signal from can frame
    #[allow(dead_code)]
    pub fn particulatetrapoutletpress1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }

    /// Read ParticulateTrapIntakePress1 signal from can frame
    #[allow(dead_code)]
    pub fn particulatetrapintakepress1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// Aftertreatment 2 Gas Parameters
#[allow(dead_code)]
#[derive(Debug)]
pub struct Atgp2 {
    frame_payload: Vec<u8>,
}

impl Atgp2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Atgp2 {
        Atgp2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Atgp2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566753278 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Atgp2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read ParticulateTrapOutletPress2 signal from can frame
    #[allow(dead_code)]
    pub fn particulatetrapoutletpress2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.100000
    }

    /// Read ParticulateTrapIntakePress2 signal from can frame
    #[allow(dead_code)]
    pub fn particulatetrapintakepress2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.100000
    }
}

/// Aftertreatment 2 Intermediate Gas
#[allow(dead_code)]
#[derive(Debug)]
pub struct Atm2 {
    frame_payload: Vec<u8>,
}

impl Atm2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Atm2 {
        Atm2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Atm2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566762494 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Atm2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read Aftrtrtmnt2PrtcltTrpDltPrssPrlmn signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2prtclttrpdltprssprlmn(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 53) & 0x1F) as f64
    }

    /// Read Aftrtrtmnt2ExhstGsTmp2PrlmnryFMI signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2exhstgstmp2prlmnryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x1F) as f64
    }

    /// Exhaust differential pressure measured between the intake and exhaust of a particulate trap in exhaust bank 2.
    #[allow(dead_code)]
    pub fn aftrtrtmnt2prtcltetrapdiffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.100000
    }

    /// Read Aftrtrtmnt2PrtcltTrpIntrmdtGsTmp signal from can frame
    #[allow(dead_code)]
    pub fn aftrtrtmnt2prtclttrpintrmdtgstmp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Read Aftertreatment2ExhaustGasTemp2 signal from can frame
    #[allow(dead_code)]
    pub fn aftertreatment2exhaustgastemp2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Aftertreatment 1 Service
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ats1 {
    frame_payload: Vec<u8>,
}

impl Ats1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ats1 {
        Ats1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ats1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566749182 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ats1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicates the time since the last active regeneration event of particulate trap 1.
    #[allow(dead_code)]
    pub fn prtclttrp1tmsnclstactvrgnration(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFFFFFF) as f64
    }

    /// Indicates the ash load percent of particulate trap 1.
    #[allow(dead_code)]
    pub fn particulatetrap1ashloadpercent(&self) -> ParticulateTrap1AshLoadPercent2566749182 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ParticulateTrap1AshLoadPercent2566749182::from((((frame_payload >> 8) & 0xFF) as f64) as u64)
    }

    /// Indicates the soot load percent of particulate trap 1.
    #[allow(dead_code)]
    pub fn particulatetrap1sootloadpercent(&self) -> ParticulateTrap1SootLoadPercent2566749182 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ParticulateTrap1SootLoadPercent2566749182::from(((frame_payload & 0xFF) as f64) as u64)
    }
}

/// Aftertreatment 2 Service
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ats2 {
    frame_payload: Vec<u8>,
}

impl Ats2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ats2 {
        Ats2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ats2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566748926 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ats2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicates the time since the last active regeneration event of particulate trap 2.
    #[allow(dead_code)]
    pub fn prtclttrp2tmsnclstactvrgnration(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFFFFFF) as f64
    }

    /// Indicates the ash load percent of particulate trap 2.
    #[allow(dead_code)]
    pub fn particulatetrap2ashloadpercent(&self) -> ParticulateTrap2AshLoadPercent2566748926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ParticulateTrap2AshLoadPercent2566748926::from((((frame_payload >> 8) & 0xFF) as f64) as u64)
    }

    /// Indicates the soot load percent of particulate trap 2.
    #[allow(dead_code)]
    pub fn particulatetrap2sootloadpercent(&self) -> ParticulateTrap2SootLoadPercent2566748926 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ParticulateTrap2SootLoadPercent2566748926::from(((frame_payload & 0xFF) as f64) as u64)
    }
}

/// Auxiliary Input/Output Status 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Auxio1 {
    frame_payload: Vec<u8>,
}

impl Auxio1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Auxio1 {
        Auxio1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Auxio1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566838782 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Auxio1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Auxiliary channel of data (16 bit) read by the ECU.
    #[allow(dead_code)]
    pub fn auxi_ochannel2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64
    }

    /// Auxiliary channel of data (16 bit) read by the ECU.
    #[allow(dead_code)]
    pub fn auxi_ochannel1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64
    }
}

/// Auxiliary Input/Output Status 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Auxio2 {
    frame_payload: Vec<u8>,
}

impl Auxio2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Auxio2 {
        Auxio2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Auxio2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2561146622 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Auxio2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o45(&self) -> AuxIO452561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO452561146622::from((((frame_payload >> 62) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o46(&self) -> AuxIO462561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO462561146622::from((((frame_payload >> 60) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o47(&self) -> AuxIO472561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO472561146622::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o48(&self) -> AuxIO482561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO482561146622::from((((frame_payload >> 56) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o41(&self) -> AuxIO412561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO412561146622::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o42(&self) -> AuxIO422561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO422561146622::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o43(&self) -> AuxIO432561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO432561146622::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o44(&self) -> AuxIO442561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO442561146622::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o37(&self) -> AuxIO372561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO372561146622::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o38(&self) -> AuxIO382561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO382561146622::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o39(&self) -> AuxIO392561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO392561146622::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o40(&self) -> AuxIO402561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO402561146622::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o33(&self) -> AuxIO332561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO332561146622::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o34(&self) -> AuxIO342561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO342561146622::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o35(&self) -> AuxIO352561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO352561146622::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o36(&self) -> AuxIO362561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO362561146622::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o29(&self) -> AuxIO292561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO292561146622::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o30(&self) -> AuxIO302561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO302561146622::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o31(&self) -> AuxIO312561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO312561146622::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o32(&self) -> AuxIO322561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO322561146622::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o25(&self) -> AuxIO252561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO252561146622::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o26(&self) -> AuxIO262561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO262561146622::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o27(&self) -> AuxIO272561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO272561146622::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o28(&self) -> AuxIO282561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO282561146622::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o21(&self) -> AuxIO212561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO212561146622::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o22(&self) -> AuxIO222561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO222561146622::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o23(&self) -> AuxIO232561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO232561146622::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o24(&self) -> AuxIO242561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO242561146622::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o17(&self) -> AuxIO172561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO172561146622::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o18(&self) -> AuxIO182561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO182561146622::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o19(&self) -> AuxIO192561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO192561146622::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o20(&self) -> AuxIO202561146622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO202561146622::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Auxiliary Input/Output Status 3
#[allow(dead_code)]
#[derive(Debug)]
pub struct Auxio3 {
    frame_payload: Vec<u8>,
}

impl Auxio3 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Auxio3 {
        Auxio3 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Auxio3, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2561081086 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Auxio3::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o77(&self) -> AuxIO772561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO772561081086::from((((frame_payload >> 62) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o78(&self) -> AuxIO782561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO782561081086::from((((frame_payload >> 60) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o79(&self) -> AuxIO792561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO792561081086::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o80(&self) -> AuxIO802561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO802561081086::from((((frame_payload >> 56) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o73(&self) -> AuxIO732561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO732561081086::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o74(&self) -> AuxIO742561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO742561081086::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o75(&self) -> AuxIO752561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO752561081086::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o76(&self) -> AuxIO762561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO762561081086::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o69(&self) -> AuxIO692561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO692561081086::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o70(&self) -> AuxIO702561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO702561081086::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o71(&self) -> AuxIO712561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO712561081086::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o72(&self) -> AuxIO722561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO722561081086::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o65(&self) -> AuxIO652561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO652561081086::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o66(&self) -> AuxIO662561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO662561081086::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o67(&self) -> AuxIO672561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO672561081086::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o68(&self) -> AuxIO682561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO682561081086::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o61(&self) -> AuxIO612561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO612561081086::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o62(&self) -> AuxIO622561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO622561081086::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o63(&self) -> AuxIO632561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO632561081086::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o64(&self) -> AuxIO642561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO642561081086::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o57(&self) -> AuxIO572561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO572561081086::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o58(&self) -> AuxIO582561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO582561081086::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o59(&self) -> AuxIO592561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO592561081086::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o60(&self) -> AuxIO602561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO602561081086::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o53(&self) -> AuxIO532561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO532561081086::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o54(&self) -> AuxIO542561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO542561081086::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o55(&self) -> AuxIO552561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO552561081086::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o56(&self) -> AuxIO562561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO562561081086::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o49(&self) -> AuxIO492561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO492561081086::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o50(&self) -> AuxIO502561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO502561081086::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o51(&self) -> AuxIO512561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO512561081086::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o52(&self) -> AuxIO522561081086 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO522561081086::from(((frame_payload & 0x3) as f64) as u64)
    }
}

/// Auxiliary Input/Output Status 4
#[allow(dead_code)]
#[derive(Debug)]
pub struct Auxio4 {
    frame_payload: Vec<u8>,
}

impl Auxio4 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Auxio4 {
        Auxio4 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Auxio4, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2561015550 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Auxio4::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o92(&self) -> AuxIO922561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO922561015550::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o85(&self) -> AuxIO852561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO852561015550::from((((frame_payload >> 14) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o86(&self) -> AuxIO862561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO862561015550::from((((frame_payload >> 12) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o87(&self) -> AuxIO872561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO872561015550::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o88(&self) -> AuxIO882561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO882561015550::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o81(&self) -> AuxIO812561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO812561015550::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o82(&self) -> AuxIO822561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO822561015550::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o83(&self) -> AuxIO832561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO832561015550::from((((frame_payload >> 2) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o84(&self) -> AuxIO842561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO842561015550::from(((frame_payload & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o109(&self) -> AuxIO1092561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO1092561015550::from((((frame_payload >> 62) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o110(&self) -> AuxIO1102561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO1102561015550::from((((frame_payload >> 60) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o111(&self) -> AuxIO1112561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO1112561015550::from((((frame_payload >> 58) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o112(&self) -> AuxIO1122561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO1122561015550::from((((frame_payload >> 56) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o105(&self) -> AuxIO1052561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO1052561015550::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o106(&self) -> AuxIO1062561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO1062561015550::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o107(&self) -> AuxIO1072561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO1072561015550::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o108(&self) -> AuxIO1082561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO1082561015550::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o101(&self) -> AuxIO1012561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO1012561015550::from((((frame_payload >> 46) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o102(&self) -> AuxIO1022561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO1022561015550::from((((frame_payload >> 44) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o103(&self) -> AuxIO1032561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO1032561015550::from((((frame_payload >> 42) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o104(&self) -> AuxIO1042561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO1042561015550::from((((frame_payload >> 40) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o97(&self) -> AuxIO972561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO972561015550::from((((frame_payload >> 38) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o98(&self) -> AuxIO982561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO982561015550::from((((frame_payload >> 36) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o99(&self) -> AuxIO992561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO992561015550::from((((frame_payload >> 34) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o100(&self) -> AuxIO1002561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO1002561015550::from((((frame_payload >> 32) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o93(&self) -> AuxIO932561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO932561015550::from((((frame_payload >> 30) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o94(&self) -> AuxIO942561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO942561015550::from((((frame_payload >> 28) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o95(&self) -> AuxIO952561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO952561015550::from((((frame_payload >> 26) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o96(&self) -> AuxIO962561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO962561015550::from((((frame_payload >> 24) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o89(&self) -> AuxIO892561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO892561015550::from((((frame_payload >> 22) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o90(&self) -> AuxIO902561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO902561015550::from((((frame_payload >> 20) & 0x3) as f64) as u64)
    }

    /// Identifies the current status of auxiliary input/output functions that are configured uniquely per application.
    #[allow(dead_code)]
    pub fn auxi_o91(&self) -> AuxIO912561015550 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AuxIO912561015550::from((((frame_payload >> 18) & 0x3) as f64) as u64)
    }
}

/// Brake actuator stroke status
#[allow(dead_code)]
#[derive(Debug)]
pub struct Bsa {
    frame_payload: Vec<u8>,
}

impl Bsa {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Bsa {
        Bsa { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Bsa, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566746622 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Bsa::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Brake stroke status for right brake actuator on trailer axle 5.
    #[allow(dead_code)]
    pub fn trailerbrakestrokeaxle5right(&self) -> TrailerBrakeStrokeAxle5Right2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerBrakeStrokeAxle5Right2566746622::from((((frame_payload >> 57) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for left brake actuator on trailer axle 5.
    #[allow(dead_code)]
    pub fn trailerbrakestrokeaxle5left(&self) -> TrailerBrakeStrokeAxle5Left2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerBrakeStrokeAxle5Left2566746622::from((((frame_payload >> 54) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for right brake actuator on trailer axle 4.
    #[allow(dead_code)]
    pub fn trailerbrakestrokeaxle4right(&self) -> TrailerBrakeStrokeAxle4Right2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerBrakeStrokeAxle4Right2566746622::from((((frame_payload >> 51) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for left brake actuator on trailer axle 4.
    #[allow(dead_code)]
    pub fn trailerbrakestrokeaxle4left(&self) -> TrailerBrakeStrokeAxle4Left2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerBrakeStrokeAxle4Left2566746622::from((((frame_payload >> 48) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for right brake actuator on trailer axle 3.
    #[allow(dead_code)]
    pub fn trailerbrakestrokeaxle3right(&self) -> TrailerBrakeStrokeAxle3Right2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerBrakeStrokeAxle3Right2566746622::from((((frame_payload >> 45) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for left brake actuator on trailer axle 3.
    #[allow(dead_code)]
    pub fn trailerbrakestrokeaxle3left(&self) -> TrailerBrakeStrokeAxle3Left2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerBrakeStrokeAxle3Left2566746622::from((((frame_payload >> 42) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for right brake actuator on trailer axle 2.
    #[allow(dead_code)]
    pub fn trailerbrakestrokeaxle2right(&self) -> TrailerBrakeStrokeAxle2Right2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerBrakeStrokeAxle2Right2566746622::from((((frame_payload >> 39) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for left brake actuator on trailer axle 2.
    #[allow(dead_code)]
    pub fn trailerbrakestrokeaxle2left(&self) -> TrailerBrakeStrokeAxle2Left2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerBrakeStrokeAxle2Left2566746622::from((((frame_payload >> 36) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for right brake actuator on trailer axle 1.
    #[allow(dead_code)]
    pub fn trailerbrakestrokeaxle1right(&self) -> TrailerBrakeStrokeAxle1Right2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerBrakeStrokeAxle1Right2566746622::from((((frame_payload >> 33) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for left brake actuator on trailerr axle 1.
    #[allow(dead_code)]
    pub fn trailerbrakestrokeaxle1left(&self) -> TrailerBrakeStrokeAxle1Left2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TrailerBrakeStrokeAxle1Left2566746622::from((((frame_payload >> 30) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for right brake actuator on tractor axle 5.
    #[allow(dead_code)]
    pub fn tractorbrakestrokeaxle5right(&self) -> TractorBrakeStrokeAxle5Right2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorBrakeStrokeAxle5Right2566746622::from((((frame_payload >> 27) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for left brake actuator on tractor axle 5.
    #[allow(dead_code)]
    pub fn tractorbrakestrokeaxle5left(&self) -> TractorBrakeStrokeAxle5Left2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorBrakeStrokeAxle5Left2566746622::from((((frame_payload >> 24) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for right brake actuator on tractor axle 4.
    #[allow(dead_code)]
    pub fn tractorbrakestrokeaxle4right(&self) -> TractorBrakeStrokeAxle4Right2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorBrakeStrokeAxle4Right2566746622::from((((frame_payload >> 21) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for left brake actuator on tractor axle 4.
    #[allow(dead_code)]
    pub fn tractorbrakestrokeaxle4left(&self) -> TractorBrakeStrokeAxle4Left2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorBrakeStrokeAxle4Left2566746622::from((((frame_payload >> 18) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for right brake actuator on tractor axle 3.
    #[allow(dead_code)]
    pub fn tractorbrakestrokeaxle3right(&self) -> TractorBrakeStrokeAxle3Right2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorBrakeStrokeAxle3Right2566746622::from((((frame_payload >> 15) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for left brake actuator on tractor axle 3.
    #[allow(dead_code)]
    pub fn tractorbrakestrokeaxle3left(&self) -> TractorBrakeStrokeAxle3Left2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorBrakeStrokeAxle3Left2566746622::from((((frame_payload >> 12) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for right brake actuator on tractor axle 2.
    #[allow(dead_code)]
    pub fn tractorbrakestrokeaxle2right(&self) -> TractorBrakeStrokeAxle2Right2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorBrakeStrokeAxle2Right2566746622::from((((frame_payload >> 9) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for left brake actuator on tractor axle 2.
    #[allow(dead_code)]
    pub fn tractorbrakestrokeaxle2left(&self) -> TractorBrakeStrokeAxle2Left2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorBrakeStrokeAxle2Left2566746622::from((((frame_payload >> 6) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for right brake actuator on tractor axle 1.
    #[allow(dead_code)]
    pub fn tractorbrakestrokeaxle1right(&self) -> TractorBrakeStrokeAxle1Right2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorBrakeStrokeAxle1Right2566746622::from((((frame_payload >> 3) & 0x7) as f64) as u64)
    }

    /// Brake stroke status for left brake actuator on tractor axle 1.
    #[allow(dead_code)]
    pub fn tractorbrakestrokeaxle1left(&self) -> TractorBrakeStrokeAxle1Left2566746622 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TractorBrakeStrokeAxle1Left2566746622::from(((frame_payload & 0x7) as f64) as u64)
    }
}

/// Ambient Conditions
#[allow(dead_code)]
#[derive(Debug)]
pub struct Amb {
    frame_payload: Vec<u8>,
}

impl Amb {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Amb {
        Amb { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Amb, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566845950 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Amb::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicated temperature of road surface over which vehicle is operating.
    #[allow(dead_code)]
    pub fn roadsurfacetemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of air entering vehicle air induction system.
    #[allow(dead_code)]
    pub fn engairinlettemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 + -40f64
    }

    /// Temperature of air surrounding vehicle.
    #[allow(dead_code)]
    pub fn ambientairtemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Temperature of air inside the part of the vehicle that encloses the driver and vehicle operating controls.
    #[allow(dead_code)]
    pub fn cabinteriortemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Absolute air pressure of the atmosphere.
    #[allow(dead_code)]
    pub fn barometricpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.500000
    }
}

/// Air Start Pressure
#[allow(dead_code)]
#[derive(Debug)]
pub struct Air2 {
    frame_payload: Vec<u8>,
}

impl Air2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Air2 {
        Air2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Air2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566840062 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Air2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read EngAirStartPress signal from can frame
    #[allow(dead_code)]
    pub fn engairstartpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 4.000000
    }
}

/// Air Supply Pressure
#[allow(dead_code)]
#[derive(Debug)]
pub struct Air1 {
    frame_payload: Vec<u8>,
}

impl Air1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Air1 {
        Air1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Air1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566827774 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Air1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicates whether the air compressor is actively compressing air.
    #[allow(dead_code)]
    pub fn aircompressorstatus(&self) -> AirCompressorStatus2566827774 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AirCompressorStatus2566827774::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// The pneumatic pressure in the circuit for the electronically controlled air suspension system.
    #[allow(dead_code)]
    pub fn airsuspensionsupplypress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFF) as f64 * 8.000000
    }

    /// The pneumatic pressure in the auxiliary circuit.
    #[allow(dead_code)]
    pub fn auxequipmentsupplypress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 8.000000
    }

    /// The pneumatic pressure in the service brake circuit or reservoir #2.
    #[allow(dead_code)]
    pub fn servicebrakeairpresscircuit2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 8.000000
    }

    /// The pneumatic pressure in the service brake circuit or reservoir #1.
    #[allow(dead_code)]
    pub fn servicebrakeairpresscircuit1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 8.000000
    }

    /// The pneumatic pressure in the circuit or reservoir for the parking brake and/or the trailer supply.
    #[allow(dead_code)]
    pub fn parkingand_ortrailerairpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 8.000000
    }

    /// The pneumatic pressure in the main reservoir, sometimes referred to as the wet tank.
    #[allow(dead_code)]
    pub fn pneumaticsupplypress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 8.000000
    }
}

/// Axle Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ai {
    frame_payload: Vec<u8>,
}

impl Ai {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ai {
        Ai { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ai, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566846974 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ai::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The steering axle lubricant pressure.
    #[allow(dead_code)]
    pub fn steeraxlelubepress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 4.000000
    }

    /// Temperature of lubricant in steering axle.
    #[allow(dead_code)]
    pub fn steeraxletemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -40f64
    }

    /// The drive axle lubricant pressure with location determined by Drive Axle Location (SPN 930).
    #[allow(dead_code)]
    pub fn driveaxlelubepress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 * 4.000000
    }

    /// Temperature of axle lubricant in drive axle.
    #[allow(dead_code)]
    pub fn driveaxletemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 + -40f64
    }

    /// Gage pressure of air in system that utilizes compressed air to provide force between axle and frame.
    #[allow(dead_code)]
    pub fn driveaxleliftairpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 4.000000
    }

    /// To identify to which of several similar devices (such as tires or fuel tanks) the information applies.
    #[allow(dead_code)]
    pub fn driveaxlelocation(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }
}

/// Alternate Fuel 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Af2 {
    frame_payload: Vec<u8>,
}

impl Af2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Af2 {
        Af2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Af2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633935614 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Af2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The position of the turbocharger wastegate valve (not the electronic wastegate control valve).
    #[allow(dead_code)]
    pub fn engturbowastegatevalvepos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.400000
    }

    /// Read EngGsMssFlwSnsrFelingCorrection signal from can frame
    #[allow(dead_code)]
    pub fn enggsmssflwsnsrfelingcorrection(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64 + -125f64
    }

    /// The desired absolute intake manifold pressure of the engine.
    #[allow(dead_code)]
    pub fn engdsiredabsintakemanifoldpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.100000
    }

    /// A correction to a predefined gaseous fuel energy (expressed in energy per unit volume) represented as a percentage.
    #[allow(dead_code)]
    pub fn enggasfuelcorrectionfactor(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Adaptive Cruise Control, Operator Input
#[allow(dead_code)]
#[derive(Debug)]
pub struct Acc2 {
    frame_payload: Vec<u8>,
}

impl Acc2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Acc2 {
        Acc2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Acc2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566803966 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Acc2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The Requested Distance Control Mode to the ACC system from the operators interface.
    #[allow(dead_code)]
    pub fn rqedaccdistancemode(&self) -> RqedAccDistanceMode2566803966 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RqedAccDistanceMode2566803966::from((((frame_payload >> 5) & 0x7) as f64) as u64)
    }
}

/// Adaptive Cruise Control
#[allow(dead_code)]
#[derive(Debug)]
pub struct Acc1 {
    frame_payload: Vec<u8>,
}

impl Acc1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Acc1 {
        Acc1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Acc1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2432593918 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Acc1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Signal to indicate to the operator that the ACC system is not able to maintain the distance to the target.
    #[allow(dead_code)]
    pub fn accdistancealertsignal(&self) -> AccDistanceAlertSignal2432593918 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AccDistanceAlertSignal2432593918::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Signal to warn the driver of system deactivation due to non-driver actions.
    #[allow(dead_code)]
    pub fn accsystemshutoffwarning(&self) -> AccSystemShutoffWarning2432593918 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AccSystemShutoffWarning2432593918::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Signal to indicate to the driver that the ACC system has detected a target.
    #[allow(dead_code)]
    pub fn acctargetdetected(&self) -> AccTargetDetected2432593918 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AccTargetDetected2432593918::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Estimated value of the current road curvature for use by the adaptive cruise control system.
    #[allow(dead_code)]
    pub fn roadcurvature(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.007812 + -250f64
    }

    /// Selected distance mode for adaptive cruise control.
    #[allow(dead_code)]
    pub fn adptvecruisectrlsetdistancemode(&self) -> AdptveCruiseCtrlSetDistanceMode2432593918 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AdptveCruiseCtrlSetDistanceMode2432593918::from((((frame_payload >> 27) & 0x7) as f64) as u64)
    }

    /// This parameter is used to indicate the current state, or mode, of operation by the Adaptive Cruise Control (ACC) device.
    #[allow(dead_code)]
    pub fn adaptivecruisectrlmode(&self) -> AdaptiveCruiseCtrlMode2432593918 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        AdaptiveCruiseCtrlMode2432593918::from((((frame_payload >> 24) & 0x7) as f64) as u64)
    }

    /// Value of the desired (chosen) velocity of the adaptive cruise control system.
    #[allow(dead_code)]
    pub fn adaptivecruisectrlsetspeed(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64
    }

    /// Distance to the preceding vehicle situated within 250 m in the same lane and moving in the same direction.
    #[allow(dead_code)]
    pub fn distancetoforwardvehicle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Absolute velocity of the preceding vehicle situated within 250 m in the same lane and moving in the same direction.
    #[allow(dead_code)]
    pub fn speedofforwardvehicle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64
    }
}

/// Articulation Control
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ac {
    frame_payload: Vec<u8>,
}

impl Ac {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ac {
        Ac { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ac, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633935102 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ac::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Angle of deflection of an articulated transit vehicle.
    #[allow(dead_code)]
    pub fn articulationangle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -125f64
    }
}

/// Auxiliary Analog Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Aai {
    frame_payload: Vec<u8>,
}

impl Aai {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Aai {
        Aai { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Aai, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633927934 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Aai::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Level measured by a sensor.
    #[allow(dead_code)]
    pub fn auxlevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.100000
    }

    /// Pressure measured by auxiliary pressure sensor #2.
    #[allow(dead_code)]
    pub fn auxpress2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 16.000000
    }

    /// Pressure measured by auxiliary pressure sensor #1.
    #[allow(dead_code)]
    pub fn auxpress1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 16.000000
    }

    /// Temperature measured by auxiliary temperature sensor #2.
    #[allow(dead_code)]
    pub fn auxtemp2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 + -40f64
    }

    /// Temperature measured by auxiliary temperature sensor #1.
    #[allow(dead_code)]
    pub fn auxtemp1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -40f64
    }
}

/// Alternate Fuel 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct A1 {
    frame_payload: Vec<u8>,
}

impl A1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> A1 {
        A1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = A1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566847998 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| A1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Relative position of the blower bypass valve.
    #[allow(dead_code)]
    pub fn engblowerbypassvalvepos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 0.400000
    }

    /// Gage pressure of gas supply to fuel metering device.
    #[allow(dead_code)]
    pub fn enggassupplypress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFFFF) as f64 * 0.500000
    }
}

/// Acknowledgment Message
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ackm {
    frame_payload: Vec<u8>,
}

impl Ackm {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ackm {
        Ackm { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ackm, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565406462 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ackm::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read AddressBusy signal from can frame
    #[allow(dead_code)]
    pub fn addressbusy(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64
    }

    /// Read ControlByte signal from can frame
    #[allow(dead_code)]
    pub fn controlbyte(&self) -> ControlByte2565406462 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ControlByte2565406462::from(((frame_payload & 0xFF) as f64) as u64)
    }

    /// PGN which is requested by Request2 message
    #[allow(dead_code)]
    pub fn parametergroupnumber(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 40) & 0xFFFFFF) as f64
    }

    /// Group Function of PGN being acknowledged. This field identifies for a device the specific group function of a PGN being acknowledged or declined.  This field is not used if the PGN being acknowledged or declined is not a group function PGN.
    #[allow(dead_code)]
    pub fn groupfunctionvalue(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Read AddressAccessDenied signal from can frame
    #[allow(dead_code)]
    pub fn addressaccessdenied(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64
    }

    /// Read AddressNegativeAcknowledgement signal from can frame
    #[allow(dead_code)]
    pub fn addressnegativeacknowledgement(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64
    }

    /// Read AddressAcknowledged signal from can frame
    #[allow(dead_code)]
    pub fn addressacknowledged(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFF) as f64
    }
}

/// After Treatment Intermediate Gas 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Atm1 {
    frame_payload: Vec<u8>,
}

impl Atm1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Atm1 {
        Atm1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Atm1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566763262 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Atm1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read PrtcltTrpIntrmdtGsTmpPrlmnryFMI signal from can frame
    #[allow(dead_code)]
    pub fn prtclttrpintrmdtgstmpprlmnryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 58) & 0x1F) as f64
    }

    /// Read PrtcltTrpDltPressPreliminaryFMI signal from can frame
    #[allow(dead_code)]
    pub fn prtclttrpdltpresspreliminaryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 53) & 0x1F) as f64
    }

    /// Read ExhaustGasTemp2PreliminaryFMI signal from can frame
    #[allow(dead_code)]
    pub fn exhaustgastemp2preliminaryfmi(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0x1F) as f64
    }

    /// Exhaust differential pressure measured between the intake and exhaust of a particulate trap.
    #[allow(dead_code)]
    pub fn particulatetrapdiffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.100000
    }

    /// Temperature of engine combustion byproducts at a mid-point in the particulate trap.
    #[allow(dead_code)]
    pub fn prtclatetrapintermediategastemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Read ExhaustGasTemp2 signal from can frame
    #[allow(dead_code)]
    pub fn exhaustgastemp2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.031250 + -273f64
    }
}

/// Door Control 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Dc1 {
    frame_payload: Vec<u8>,
}

impl Dc1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Dc1 {
        Dc1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Dc1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566803198 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Dc1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Composite indication of all bus door statuses.
    #[allow(dead_code)]
    pub fn status2ofdoors(&self) -> Status2OfDoors2566803198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        Status2OfDoors2566803198::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the actual position of the ramp / wheel chair lift.
    #[allow(dead_code)]
    pub fn ramp_wheelchairliftpos(&self) -> RampWheelChairLiftPos2566803198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RampWheelChairLiftPos2566803198::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Signal which indicates the actual position of the doors.
    #[allow(dead_code)]
    pub fn posofdoors(&self) -> PosOfDoors2566803198 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PosOfDoors2566803198::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// Fifth Wheel Smart Systems 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Fwss1 {
    frame_payload: Vec<u8>,
}

impl Fwss1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Fwss1 {
        Fwss1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Fwss1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2565870334 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Fwss1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicates to the vehicle operator that the roll moment has exceeded a preset limit.
    #[allow(dead_code)]
    pub fn fifthwheelrollwarningindicator(&self) -> FifthWheelRollWarningIndicator2565870334 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FifthWheelRollWarningIndicator2565870334::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Fifth wheel roll moment force.
    #[allow(dead_code)]
    pub fn fifthwheelrollmoment(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 10.000000 + -320000f64
    }

    /// Fifth wheel drawbar force.
    #[allow(dead_code)]
    pub fn fifthwheeldrawbarforce(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 10.000000 + -320000f64
    }

    /// Fifth wheel vertical force.
    #[allow(dead_code)]
    pub fn fifthwheelverticalforce(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 5.000000
    }
}

/// Fifth Wheel Smart Systems 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Fwss2 {
    frame_payload: Vec<u8>,
}

impl Fwss2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Fwss2 {
        Fwss2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Fwss2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566762238 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Fwss2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Indicates to vehicle operator that the fifth wheel slider is in position and locked.
    #[allow(dead_code)]
    pub fn fifthwheelsliderlockindicator(&self) -> FifthWheelSliderLockIndicator2566762238 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FifthWheelSliderLockIndicator2566762238::from((((frame_payload >> 16) & 0x3) as f64) as u64)
    }

    /// Slider position measurement.
    #[allow(dead_code)]
    pub fn fifthwheelsliderpos(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 10.000000
    }

    /// Indicates results of coupling operation to the vehicle operator.
    #[allow(dead_code)]
    pub fn ffthwhllckcouplestatusindicator(&self) -> FfthWhlLckCoupleStatusIndicator2566762238 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FfthWhlLckCoupleStatusIndicator2566762238::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Indicates to the vehicle operator that the fifth wheel lock is open and ready to couple.
    #[allow(dead_code)]
    pub fn ffthwhllckradytocoupleindicator(&self) -> FfthWhlLckRadyToCoupleIndicator2566762238 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FfthWhlLckRadyToCoupleIndicator2566762238::from((((frame_payload >> 4) & 0x3) as f64) as u64)
    }

    /// Fifth wheel error state conveys information when coupling status is incomplete or bad.
    #[allow(dead_code)]
    pub fn fifthwheelerrorstatus(&self) -> FifthWheelErrorStatus2566762238 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        FifthWheelErrorStatus2566762238::from(((frame_payload & 0xF) as f64) as u64)
    }
}

/// Slope Sensor Information
#[allow(dead_code)]
#[derive(Debug)]
pub struct Ssi {
    frame_payload: Vec<u8>,
}

impl Ssi {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Ssi {
        Ssi { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Ssi, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2364543998 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Ssi::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// The estimated measurement latency of the measurement.
    #[allow(dead_code)]
    pub fn rollandpitchmeasurementlatency(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 56) & 0xFF) as f64 * 0.500000
    }

    /// Compensated mode for the pitch and roll measurements.
    #[allow(dead_code)]
    pub fn pitchandrollcompensated(&self) -> PitchAndRollCompensated2364543998 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PitchAndRollCompensated2364543998::from((((frame_payload >> 54) & 0x3) as f64) as u64)
    }

    /// Figure of merit for the pitch rate measurement.
    #[allow(dead_code)]
    pub fn pitchratefigureofmerit(&self) -> PitchRateFigureOfMerit2364543998 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PitchRateFigureOfMerit2364543998::from((((frame_payload >> 52) & 0x3) as f64) as u64)
    }

    /// Figure of merit for roll angle measurement.
    #[allow(dead_code)]
    pub fn rollanglefigureofmerit(&self) -> RollAngleFigureOfMerit2364543998 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        RollAngleFigureOfMerit2364543998::from((((frame_payload >> 50) & 0x3) as f64) as u64)
    }

    /// Figure of merit for pitch angle measurement.
    #[allow(dead_code)]
    pub fn pitchanglefigureofmerit(&self) -> PitchAngleFigureOfMerit2364543998 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        PitchAngleFigureOfMerit2364543998::from((((frame_payload >> 48) & 0x3) as f64) as u64)
    }

    /// Read PitchRate signal from can frame
    #[allow(dead_code)]
    pub fn pitchrate(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.002000 + -64f64
    }

    /// The angle between the vehicle y-axis and the ground plane.
    #[allow(dead_code)]
    pub fn rollangle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.002000 + -64f64
    }

    /// The angle between the vehicle x-axis and the ground plane.
    #[allow(dead_code)]
    pub fn pitchangle(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.002000 + -64f64
    }
}

/// Transmission Fluids 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Trf1 {
    frame_payload: Vec<u8>,
}

impl Trf1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Trf1 {
        Trf1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Trf1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566846718 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Trf1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read TransOilLevelMeasurementStatus signal from can frame
    #[allow(dead_code)]
    pub fn transoillevelmeasurementstatus(&self) -> TransOilLevelMeasurementStatus2566846718 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransOilLevelMeasurementStatus2566846718::from((((frame_payload >> 60) & 0xF) as f64) as u64)
    }

    /// Read TransOilLevelCountdownTimer signal from can frame
    #[allow(dead_code)]
    pub fn transoillevelcountdowntimer(&self) -> TransOilLevelCountdownTimer2566846718 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        TransOilLevelCountdownTimer2566846718::from((((frame_payload >> 56) & 0xF) as f64) as u64)
    }

    /// Amount of current volume of transmission sump oil compared to recommended volume.
    #[allow(dead_code)]
    pub fn transoillevelhigh_low(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFF) as f64 * 0.500000 + -62.5f64
    }

    /// Temperature of the transmission lubricant.
    #[allow(dead_code)]
    pub fn transoiltemp(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.031250 + -273f64
    }

    /// Gage pressure of lubrication fluid in transmission, measured after pump.
    #[allow(dead_code)]
    pub fn transoilpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 16.000000
    }

    /// Read TransFilterDiffPress signal from can frame
    #[allow(dead_code)]
    pub fn transfilterdiffpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFF) as f64 * 2.000000
    }

    /// Ratio of volume of transmission sump oil to recommended volume.
    #[allow(dead_code)]
    pub fn transoillevel(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64 * 0.400000
    }

    /// Gage pressure of oil within a wet clutch.
    #[allow(dead_code)]
    pub fn clutchpress(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 * 16.000000
    }
}

/// Vehicle Electrical Power #1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vep1 {
    frame_payload: Vec<u8>,
}

impl Vep1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vep1 {
        Vep1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vep1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566846462 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vep1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Electrical potential measured at the input of the electronic control unit supplied through a switching device.
    #[allow(dead_code)]
    pub fn batterypotentialswitched(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 48) & 0xFFFF) as f64 * 0.050000
    }

    /// Measured electrical potential of the battery.
    #[allow(dead_code)]
    pub fn electricalpotential(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.050000
    }

    /// Electrical potential measured at the charging system output.
    #[allow(dead_code)]
    pub fn chargingsystempotential(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.050000
    }

    /// Measure of electrical current flow from the alternator.
    #[allow(dead_code)]
    pub fn altcurrent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 8) & 0xFF) as f64
    }

    /// Net flow of electrical current into/out of the battery or batteries.
    #[allow(dead_code)]
    pub fn netbatterycurrent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFF) as f64 + -125f64
    }
}

/// Wireless Communications Message 2
#[allow(dead_code)]
#[derive(Debug)]
pub struct Wcm2 {
    frame_payload: Vec<u8>,
}

impl Wcm2 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Wcm2 {
        Wcm2 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Wcm2, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566760702 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Wcm2::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read WrlessCommunicationNetworkType2 signal from can frame
    #[allow(dead_code)]
    pub fn wrlesscommunicationnetworktype2(&self) -> WrlessCommunicationNetworkType22566760702 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        WrlessCommunicationNetworkType22566760702::from((((frame_payload >> 32) & 0xFF) as f64) as u64)
    }

    /// Indicates the signal strength for the wireless communications network type.
    #[allow(dead_code)]
    pub fn networksignalstrength2(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.400000
    }

    /// Read NetworkAntennaStatus2 signal from can frame
    #[allow(dead_code)]
    pub fn networkantennastatus2(&self) -> NetworkAntennaStatus22566760702 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        NetworkAntennaStatus22566760702::from((((frame_payload >> 16) & 0xFF) as f64) as u64)
    }

    /// Read NetworkServiceStatus2 signal from can frame
    #[allow(dead_code)]
    pub fn networkservicestatus2(&self) -> NetworkServiceStatus22566760702 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        NetworkServiceStatus22566760702::from((((frame_payload >> 8) & 0xFF) as f64) as u64)
    }

    /// Read NetworkTransceiverStatus2 signal from can frame
    #[allow(dead_code)]
    pub fn networktransceiverstatus2(&self) -> NetworkTransceiverStatus22566760702 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        NetworkTransceiverStatus22566760702::from(((frame_payload & 0xFF) as f64) as u64)
    }
}

/// Wireless Communications Message 1
#[allow(dead_code)]
#[derive(Debug)]
pub struct Wcm1 {
    frame_payload: Vec<u8>,
}

impl Wcm1 {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Wcm1 {
        Wcm1 { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Wcm1, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2566760958 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Wcm1::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read WrlessCommunicationNetworkType1 signal from can frame
    #[allow(dead_code)]
    pub fn wrlesscommunicationnetworktype1(&self) -> WrlessCommunicationNetworkType12566760958 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        WrlessCommunicationNetworkType12566760958::from((((frame_payload >> 32) & 0xFF) as f64) as u64)
    }

    /// Indicates the signal strength for the wireless communications network type.
    #[allow(dead_code)]
    pub fn networksignalstrength1(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 24) & 0xFF) as f64 * 0.400000
    }

    /// Read NetworkAntennaStatus1 signal from can frame
    #[allow(dead_code)]
    pub fn networkantennastatus1(&self) -> NetworkAntennaStatus12566760958 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        NetworkAntennaStatus12566760958::from((((frame_payload >> 16) & 0xFF) as f64) as u64)
    }

    /// Read NetworkServiceStatus1 signal from can frame
    #[allow(dead_code)]
    pub fn networkservicestatus1(&self) -> NetworkServiceStatus12566760958 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        NetworkServiceStatus12566760958::from((((frame_payload >> 8) & 0xFF) as f64) as u64)
    }

    /// Read NetworkTransceiverStatus1 signal from can frame
    #[allow(dead_code)]
    pub fn networktransceiverstatus1(&self) -> NetworkTransceiverStatus12566760958 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        NetworkTransceiverStatus12566760958::from(((frame_payload & 0xFF) as f64) as u64)
    }
}

/// Voltage Regulator Operating Mode
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vrom {
    frame_payload: Vec<u8>,
}

impl Vrom {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vrom {
        Vrom { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vrom, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2633869310 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vrom::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// State signal indicating the Voltage regulator enabled.
    #[allow(dead_code)]
    pub fn voltageregulatorenabled(&self) -> VoltageRegulatorEnabled2633869310 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VoltageRegulatorEnabled2633869310::from((((frame_payload >> 10) & 0x3) as f64) as u64)
    }

    /// State signal indicating the mode of the Voltage regulator soft start function.
    #[allow(dead_code)]
    pub fn voltageregulatorsoftstartstate(&self) -> VoltageRegulatorSoftStartState2633869310 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VoltageRegulatorSoftStartState2633869310::from((((frame_payload >> 8) & 0x3) as f64) as u64)
    }

    /// State signal indicating the operating mode for underfrequency compensation.
    #[allow(dead_code)]
    pub fn vltgrgltrundrfrqncycmpnstnenbld(&self) -> VltgRgltrUndrfrqncyCmpnstnEnbld2633869310 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VltgRgltrUndrfrqncyCmpnstnEnbld2633869310::from((((frame_payload >> 6) & 0x3) as f64) as u64)
    }

    /// Read VltgRgltrVAr_PwrFctrOprtingMode signal from can frame
    #[allow(dead_code)]
    pub fn vltgrgltrvar_pwrfctroprtingmode(&self) -> VltgRgltrVArPwrFctrOprtingMode2633869310 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VltgRgltrVArPwrFctrOprtingMode2633869310::from((((frame_payload >> 3) & 0x7) as f64) as u64)
    }

    /// State signal indicating the voltage regulator load compensation mode.
    #[allow(dead_code)]
    pub fn vltgrglatorloadcompensationmode(&self) -> VltgRglatorLoadCompensationMode2633869310 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        VltgRglatorLoadCompensationMode2633869310::from(((frame_payload & 0x7) as f64) as u64)
    }
}

/// Voltage regulator excitation status
#[allow(dead_code)]
#[derive(Debug)]
pub struct Vrep {
    frame_payload: Vec<u8>,
}

impl Vrep {
    #[allow(dead_code)]
    pub fn new(frame_payload: Vec<u8>) -> Vrep {
        Vrep { frame_payload }
    }

    #[allow(dead_code)]
    pub fn stream(can_interface: String, ival1: std::time::Duration, ival2: std::time::Duration) -> Box<Stream<Item = Vrep, Error = std::io::Error> + Sync + Send> {
        let socket = CanBCMSocket::open_nb(&can_interface).unwrap();
        let message_id = CanMessageId::try_from(2365433598 as u32).unwrap();
        let frame_stream = socket.filter_id_incoming_frames(message_id, ival1, ival2).unwrap();
        let f = frame_stream.map(|frame| Vrep::new(frame.data().to_vec()));
        Box::new(f)
    }

    /// Read GnrtrOtputVoltageBiasPercentage signal from can frame
    #[allow(dead_code)]
    pub fn gnrtrotputvoltagebiaspercentage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 32) & 0xFFFF) as f64 * 0.100000 + -100f64
    }

    /// Measured signal that represents the generator excitation field current.
    #[allow(dead_code)]
    pub fn generatorexcitationfieldcurrent(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        ((frame_payload >> 16) & 0xFFFF) as f64 * 0.050000
    }

    /// Measured signal that represents the generator excitation field voltage.
    #[allow(dead_code)]
    pub fn generatorexcitationfieldvoltage(&self) -> f64 {
        let frame_payload: u64 = LE::read_u64(&self.frame_payload);
        (frame_payload & 0xFFFF) as f64 * 0.050000 + -1605.625f64
    }
}
